
slidingMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800ef00  0800ef00  0001ef00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f420  0800f420  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800f420  0800f420  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f420  0800f420  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f420  0800f420  0001f420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f424  0800f424  0001f424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800f428  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000358  0800f77c  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800f77c  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cf9  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379d  00000000  00000000  00036076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bda4  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c0a  00000000  00000000  00057bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009184b  00000000  00000000  000707e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  00102084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eee4 	.word	0x0800eee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800eee4 	.word	0x0800eee4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <encoder_init>:
 */


#include "encoder.h"

void encoder_init (encoder* Encoder,GPIO_TypeDef *GPIOAx, uint16_t pinA,GPIO_TypeDef *GPIOBx, uint16_t pinB, double encoder_step){
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]

	Encoder->GPIOAx = GPIOAx;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	609a      	str	r2, [r3, #8]
	Encoder->GPIOBx = GPIOBx;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	60da      	str	r2, [r3, #12]

	Encoder->pinA = pinA;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	809a      	strh	r2, [r3, #4]
	Encoder->pinB = pinB;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	8b3a      	ldrh	r2, [r7, #24]
 8000aee:	80da      	strh	r2, [r3, #6]
	Encoder->encoder_step = encoder_step;
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000af6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <encoder_update>:
void encoder_update(encoder *Encoder){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

			Encoder->ref_signal_A = HAL_GPIO_ReadPin(Encoder->GPIOAx,Encoder->pinA);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	889b      	ldrh	r3, [r3, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f001 fda8 	bl	800266c <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	801a      	strh	r2, [r3, #0]
			Encoder->ref_signal_B = HAL_GPIO_ReadPin(Encoder->GPIOBx,Encoder->pinB);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	88db      	ldrh	r3, [r3, #6]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f001 fd9c 	bl	800266c <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	805a      	strh	r2, [r3, #2]
			Encoder->last_pos = Encoder->pos;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	    	if (Encoder->ref_signal_B >0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	885b      	ldrh	r3, [r3, #2]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d016      	beq.n	8000b7e <encoder_update+0x7a>
	    	{
	    		Encoder->raw_pos++;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	831a      	strh	r2, [r3, #24]
	    		Encoder->pos = Encoder->pos + Encoder->encoder_step;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b6e:	f7ff fafd 	bl	800016c <__adddf3>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    	else
	    	{
	    		Encoder->raw_pos--;
				Encoder->pos = Encoder->pos - Encoder->encoder_step;
	    	}
	    }
 8000b7c:	e015      	b.n	8000baa <encoder_update+0xa6>
	    		Encoder->raw_pos--;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	831a      	strh	r2, [r3, #24]
				Encoder->pos = Encoder->pos - Encoder->encoder_step;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b9c:	f7ff fae4 	bl	8000168 <__aeabi_dsub>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    }
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	0000      	movs	r0, r0
 8000bb4:	0000      	movs	r0, r0
	...

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b0fe      	sub	sp, #504	; 0x1f8
 8000bbc:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f001 fa3d 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 fadb 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fbc7 	bl	8001358 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bca:	f000 fb33 	bl	8001234 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000bce:	f009 fc79 	bl	800a4c4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000bd2:	f000 fb5d 	bl	8001290 <MX_TIM2_Init>
  uint32_t t1,t2;

  mpu6050_t mpu;
  uint16_t pwm;

  double control = 0;
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
  double dt = 10;
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <main+0x1b0>)
 8000be8:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
  const double th_bias = -.027;
 8000bec:	a352      	add	r3, pc, #328	; (adr r3, 8000d38 <main+0x180>)
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
  double angle_error = 0;
 8000bf6:	f04f 0200 	mov.w	r2, #0
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  double prev_angle_error = 0;
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
  double speed = 0;
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
  double last_pos = 0;
 8000c1a:	f04f 0200 	mov.w	r2, #0
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  double prev_speed = 0;
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  double ss = 0;
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  double sign;
  double integrator = 0;
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
  double dth = 0;
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  double U1, U2;
  double delta = 0;
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
  double prev_dth = 0;
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  double prev_delta = 0;
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	f04f 0300 	mov.w	r3, #0
 8000c76:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
  const double F = 85;
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <main+0x1b4>)
 8000c80:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
     const double F1 = 0.3*sqrt(F);
 8000c84:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8000c88:	f00d f82c 	bl	800dce4 <sqrt>
 8000c8c:	a32c      	add	r3, pc, #176	; (adr r3, 8000d40 <main+0x188>)
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	f7ff fc21 	bl	80004d8 <__aeabi_dmul>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
     const double F2 = F*10;
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <main+0x1b0>)
 8000ca4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8000ca8:	f7ff fc16 	bl	80004d8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
     const double A = 2.8;
 8000cb4:	a324      	add	r3, pc, #144	; (adr r3, 8000d48 <main+0x190>)
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
     const double K_th = 11;
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <main+0x1b8>)
 8000cc4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
     const double K_dth = 0.01;
 8000cc8:	a321      	add	r3, pc, #132	; (adr r3, 8000d50 <main+0x198>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
     const double K_speed = -0.0035;
 8000cd2:	a321      	add	r3, pc, #132	; (adr r3, 8000d58 <main+0x1a0>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
     const double K_pos = -0.09;
 8000cdc:	a320      	add	r3, pc, #128	; (adr r3, 8000d60 <main+0x1a8>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  unsigned int reached_eq = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  //initialize pwm timer:

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cec:	2100      	movs	r1, #0
 8000cee:	4821      	ldr	r0, [pc, #132]	; (8000d74 <main+0x1bc>)
 8000cf0:	f004 fed6 	bl	8005aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	481f      	ldr	r0, [pc, #124]	; (8000d74 <main+0x1bc>)
 8000cf8:	f004 fed2 	bl	8005aa0 <HAL_TIM_PWM_Start>

  //counter period 65535


  //initializing encoder variables
  encoder_init(&encoderA,GPIOB,right_motor_A_Pin,GPIOB,right_motor_B_Pin,encoder_step);
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <main+0x1c0>)
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d06:	2304      	movs	r3, #4
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <main+0x1c4>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	491b      	ldr	r1, [pc, #108]	; (8000d7c <main+0x1c4>)
 8000d10:	481b      	ldr	r0, [pc, #108]	; (8000d80 <main+0x1c8>)
 8000d12:	f7ff fed9 	bl	8000ac8 <encoder_init>
  encoder_init(&encoderB,GPIOB,left_motor_A_Pin,GPIOB,left_motor_B_Pin,encoder_step);
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <main+0x1c0>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <main+0x1c4>)
 8000d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2a:	4914      	ldr	r1, [pc, #80]	; (8000d7c <main+0x1c4>)
 8000d2c:	4815      	ldr	r0, [pc, #84]	; (8000d84 <main+0x1cc>)
 8000d2e:	f7ff fecb 	bl	8000ac8 <encoder_init>


  //wait for the mpu to init.
  while (mpu6050_init(&hi2c1) == 1) {
 8000d32:	e032      	b.n	8000d9a <main+0x1e2>
 8000d34:	f3af 8000 	nop.w
 8000d38:	53f7ced9 	.word	0x53f7ced9
 8000d3c:	bf9ba5e3 	.word	0xbf9ba5e3
 8000d40:	33333333 	.word	0x33333333
 8000d44:	3fd33333 	.word	0x3fd33333
 8000d48:	66666666 	.word	0x66666666
 8000d4c:	40066666 	.word	0x40066666
 8000d50:	47ae147b 	.word	0x47ae147b
 8000d54:	3f847ae1 	.word	0x3f847ae1
 8000d58:	3126e979 	.word	0x3126e979
 8000d5c:	bf6cac08 	.word	0xbf6cac08
 8000d60:	70a3d70a 	.word	0x70a3d70a
 8000d64:	bfb70a3d 	.word	0xbfb70a3d
 8000d68:	40240000 	.word	0x40240000
 8000d6c:	40554000 	.word	0x40554000
 8000d70:	40260000 	.word	0x40260000
 8000d74:	200003c8 	.word	0x200003c8
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	20000410 	.word	0x20000410
 8000d84:	20000448 	.word	0x20000448
		  HAL_Delay(10);
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f001 f9b9 	bl	8002100 <HAL_Delay>
		  sprintf(buff2,"waiting for the imu to boot, \r\n");
 8000d8e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d92:	49af      	ldr	r1, [pc, #700]	; (8001050 <main+0x498>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00a fcc3 	bl	800b720 <siprintf>
  while (mpu6050_init(&hi2c1) == 1) {
 8000d9a:	48ae      	ldr	r0, [pc, #696]	; (8001054 <main+0x49c>)
 8000d9c:	f000 fcd9 	bl	8001752 <mpu6050_init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d0f0      	beq.n	8000d88 <main+0x1d0>
  }
  mpu6050_tune(&hi2c1,&mpu);
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	48aa      	ldr	r0, [pc, #680]	; (8001054 <main+0x49c>)
 8000dac:	f000 fd38 	bl	8001820 <mpu6050_tune>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  mpu6050_read(&hi2c1,&mpu);
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	48a7      	ldr	r0, [pc, #668]	; (8001054 <main+0x49c>)
 8000db6:	f000 fddf 	bl	8001978 <mpu6050_read>
  angle_error = mpu.th + th_bias;
 8000dba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000dbe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000dc2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000dc6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8000dca:	f7ff f9cf 	bl	800016c <__adddf3>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  prev_angle_error = angle_error;
 8000dd6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8000dda:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8

  motor(30,30);
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b9d      	ldr	r3, [pc, #628]	; (8001058 <main+0x4a0>)
 8000de4:	f04f 0000 	mov.w	r0, #0
 8000de8:	499b      	ldr	r1, [pc, #620]	; (8001058 <main+0x4a0>)
 8000dea:	f000 fb49 	bl	8001480 <motor>
  HAL_Delay(100);
 8000dee:	2064      	movs	r0, #100	; 0x64
 8000df0:	f001 f986 	bl	8002100 <HAL_Delay>
  motor(0,0);
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	f04f 0000 	mov.w	r0, #0
 8000e00:	f04f 0100 	mov.w	r1, #0
 8000e04:	f000 fb3c 	bl	8001480 <motor>

  while (1)
  {
	  last_pos = encoderA.pos;
 8000e08:	4b94      	ldr	r3, [pc, #592]	; (800105c <main+0x4a4>)
 8000e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e0e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	  t1 = HAL_GetTick();
 8000e12:	f001 f96b 	bl	80020ec <HAL_GetTick>
 8000e16:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	  HAL_Delay(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f001 f970 	bl	8002100 <HAL_Delay>
	  mpu6050_read(&hi2c1,&mpu);
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	488b      	ldr	r0, [pc, #556]	; (8001054 <main+0x49c>)
 8000e26:	f000 fda7 	bl	8001978 <mpu6050_read>

	  mpu6050_complimentary(&mpu,dt);
 8000e2a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8000e2e:	f7ff fe2b 	bl	8000a88 <__aeabi_d2uiz>
 8000e32:	4602      	mov	r2, r0
 8000e34:	463b      	mov	r3, r7
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fe99 	bl	8001b70 <mpu6050_complimentary>
	  angle_error = mpu.th + th_bias;
 8000e3e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000e42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000e46:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000e4a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8000e4e:	f7ff f98d 	bl	800016c <__adddf3>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	  dth = (angle_error - prev_angle_error)/dt;
 8000e5a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8000e5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8000e62:	f7ff f981 	bl	8000168 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8000e72:	f7ff fc5b 	bl	800072c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	  speed = (encoderA.pos - last_pos)/dt;
 8000e7e:	4b77      	ldr	r3, [pc, #476]	; (800105c <main+0x4a4>)
 8000e80:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000e84:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8000e88:	f7ff f96e 	bl	8000168 <__aeabi_dsub>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8000e98:	f7ff fc48 	bl	800072c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180

	  // apply control only if the system is upright
	  if (abs2(angle_error) < 0.3 && reached_eq == 1) {
 8000ea4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8000ea8:	f000 fc24 	bl	80016f4 <abs2>
 8000eac:	a366      	add	r3, pc, #408	; (adr r3, 8001048 <main+0x490>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fd83 	bl	80009bc <__aeabi_dcmplt>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80d7 	beq.w	800106c <main+0x4b4>
 8000ebe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	f040 80d2 	bne.w	800106c <main+0x4b4>
		  delta = K_th*angle_error + K_dth*dth + K_speed*speed + K_pos*encoderA.pos;
 8000ec8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8000ecc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8000ed0:	f7ff fb02 	bl	80004d8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8000ee0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8000ee4:	f7ff faf8 	bl	80004d8 <__aeabi_dmul>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff f93c 	bl	800016c <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	461d      	mov	r5, r3
 8000efc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8000f00:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8000f04:	f7ff fae8 	bl	80004d8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	4629      	mov	r1, r5
 8000f10:	f7ff f92c 	bl	800016c <__adddf3>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4614      	mov	r4, r2
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	; (800105c <main+0x4a4>)
 8000f1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000f22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f26:	f7ff fad7 	bl	80004d8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4620      	mov	r0, r4
 8000f30:	4629      	mov	r1, r5
 8000f32:	f7ff f91b 	bl	800016c <__adddf3>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		  ss = delta + (A*( delta - prev_delta))/dt;
 8000f3e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8000f42:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8000f46:	f7ff f90f 	bl	8000168 <__aeabi_dsub>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000f56:	f7ff fabf 	bl	80004d8 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8000f66:	f7ff fbe1 	bl	800072c <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8000f72:	f7ff f8fb 	bl	800016c <__adddf3>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		  U1 = sqrt(abs2(ss))*F1;
 8000f7e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8000f82:	f000 fbb7 	bl	80016f4 <abs2>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f00c fea9 	bl	800dce4 <sqrt>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8000f9a:	f7ff fa9d 	bl	80004d8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		  sign = ss > 0 ? 1 : -1;
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8000fb2:	f7ff fd21 	bl	80009f8 <__aeabi_dcmpgt>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <main+0x40c>
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <main+0x4a8>)
 8000fc2:	e002      	b.n	8000fca <main+0x412>
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <main+0x4ac>)
 8000fca:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		  if (abs2(integrator) < 70) {
 8000fce:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8000fd2:	f000 fb8f 	bl	80016f4 <abs2>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <main+0x4b0>)
 8000fdc:	f7ff fcee 	bl	80009bc <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d017      	beq.n	8001016 <main+0x45e>
			  integrator = integrator + F2*sign*dt;
 8000fe6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8000fea:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8000fee:	f7ff fa73 	bl	80004d8 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8000ffe:	f7ff fa6b 	bl	80004d8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800100a:	f7ff f8af 	bl	800016c <__adddf3>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
		  }
		  control =  U1*sign + integrator;
 8001016:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800101a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800101e:	f7ff fa5b 	bl	80004d8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800102a:	f7ff f89f 	bl	800016c <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
		  control = control;
		  motor(control,control);
 8001036:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800103a:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800103e:	f000 fa1f 	bl	8001480 <motor>
 8001042:	e043      	b.n	80010cc <main+0x514>
 8001044:	f3af 8000 	nop.w
 8001048:	33333333 	.word	0x33333333
 800104c:	3fd33333 	.word	0x3fd33333
 8001050:	0800ef00 	.word	0x0800ef00
 8001054:	20000374 	.word	0x20000374
 8001058:	403e0000 	.word	0x403e0000
 800105c:	20000410 	.word	0x20000410
 8001060:	3ff00000 	.word	0x3ff00000
 8001064:	bff00000 	.word	0xbff00000
 8001068:	40518000 	.word	0x40518000


	  }
	  else {
		  reached_eq = abs2(angle_error) < 0.01 ? 1 : 0;
 800106c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001070:	f000 fb40 	bl	80016f4 <abs2>
 8001074:	2301      	movs	r3, #1
 8001076:	461c      	mov	r4, r3
 8001078:	a33b      	add	r3, pc, #236	; (adr r3, 8001168 <main+0x5b0>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <main+0x4d4>
 8001088:	2300      	movs	r3, #0
 800108a:	461c      	mov	r4, r3
 800108c:	b2e3      	uxtb	r3, r4
 800108e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		  encoderA.pos = 0;
 8001092:	4937      	ldr	r1, [pc, #220]	; (8001170 <main+0x5b8>)
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		  integrator = 0;
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
		  control = 0;
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
		  motor(0,0);
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	f04f 0000 	mov.w	r0, #0
 80010c4:	f04f 0100 	mov.w	r1, #0
 80010c8:	f000 f9da 	bl	8001480 <motor>
	  }
	  prev_delta = delta;
 80010cc:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80010d0:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	  prev_angle_error = angle_error;
 80010d4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80010d8:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	  prev_speed = speed;
 80010dc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80010e0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

	  t2 = HAL_GetTick();
 80010e4:	f001 f802 	bl	80020ec <HAL_GetTick>
 80010e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	  dt = ((double)(t2 - t1))/1000;
 80010ec:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80010f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f974 	bl	80003e4 <__aeabi_ui2d>
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <main+0x5bc>)
 8001102:	f7ff fb13 	bl	800072c <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	  sprintf(buff2,"%f,%f,%f,%f,%f,%f\r\n",angle_error,encoderA.pos,dth,speed,control,integrator);
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <main+0x5b8>)
 8001110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001114:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001118:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800111c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001120:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8001124:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001128:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800112c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001130:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001138:	e9cd 2300 	strd	r2, r3, [sp]
 800113c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001140:	490d      	ldr	r1, [pc, #52]	; (8001178 <main+0x5c0>)
 8001142:	4620      	mov	r0, r4
 8001144:	f00a faec 	bl	800b720 <siprintf>
	  CDC_Transmit_FS((uint8_t*) buff2, strlen(buff2));
 8001148:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800114c:	4618      	mov	r0, r3
 800114e:	f7fe ffff 	bl	8000150 <strlen>
 8001152:	4602      	mov	r2, r0
 8001154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f009 fa70 	bl	800a640 <CDC_Transmit_FS>
  {
 8001160:	e652      	b.n	8000e08 <main+0x250>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	47ae147b 	.word	0x47ae147b
 800116c:	3f847ae1 	.word	0x3f847ae1
 8001170:	20000410 	.word	0x20000410
 8001174:	408f4000 	.word	0x408f4000
 8001178:	0800ef20 	.word	0x0800ef20

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	; 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f009 fe60 	bl	800ae50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 ff55 	bl	8005084 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011e0:	f000 faa8 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2102      	movs	r1, #2
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f9c1 	bl	8005588 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800120c:	f000 fa92 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001210:	2310      	movs	r3, #16
 8001212:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fb3a 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001226:	f000 fa85 	bl	8001734 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 fa43 	bl	80026fc <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fa5a 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000374 	.word	0x20000374
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	481e      	ldr	r0, [pc, #120]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012dc:	f004 fb90 	bl	8005a00 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f000 fa25 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4816      	ldr	r0, [pc, #88]	; (8001354 <MX_TIM2_Init+0xc4>)
 80012fa:	f004 ff3f 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001304:	f000 fa16 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_TIM2_Init+0xc4>)
 8001320:	f004 fc60 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132a:	f000 fa03 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2204      	movs	r2, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM2_Init+0xc4>)
 8001336:	f004 fc55 	bl	8005be4 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001340:	f000 f9f8 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM2_Init+0xc4>)
 8001346:	f000 fd0f 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200003c8 	.word	0x200003c8

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136c:	4b33      	ldr	r3, [pc, #204]	; (800143c <MX_GPIO_Init+0xe4>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a32      	ldr	r2, [pc, #200]	; (800143c <MX_GPIO_Init+0xe4>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <MX_GPIO_Init+0xe4>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <MX_GPIO_Init+0xe4>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <MX_GPIO_Init+0xe4>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_GPIO_Init+0xe4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_GPIO_Init+0xe4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <MX_GPIO_Init+0xe4>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_GPIO_Init+0xe4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin|right_motor_dir_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	210c      	movs	r1, #12
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013ba:	f001 f96e 	bl	800269a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : left_motor_dir_Pin right_motor_dir_Pin */
  GPIO_InitStruct.Pin = left_motor_dir_Pin|right_motor_dir_Pin;
 80013be:	230c      	movs	r3, #12
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	481a      	ldr	r0, [pc, #104]	; (8001440 <MX_GPIO_Init+0xe8>)
 80013d6:	f000 ffc5 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : left_motor_B_Pin right_motor_A_Pin right_motor_B_Pin left_motor_A_Pin */
  GPIO_InitStruct.Pin = left_motor_B_Pin|right_motor_A_Pin|right_motor_B_Pin|left_motor_A_Pin;
 80013da:	f240 2307 	movw	r3, #519	; 0x207
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_GPIO_Init+0xec>)
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <MX_GPIO_Init+0xf0>)
 80013f0:	f000 ffb8 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2006      	movs	r0, #6
 80013fa:	f000 ff7c 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013fe:	2006      	movs	r0, #6
 8001400:	f000 ff95 	bl	800232e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2007      	movs	r0, #7
 800140a:	f000 ff74 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800140e:	2007      	movs	r0, #7
 8001410:	f000 ff8d 	bl	800232e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2008      	movs	r0, #8
 800141a:	f000 ff6c 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800141e:	2008      	movs	r0, #8
 8001420:	f000 ff85 	bl	800232e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2017      	movs	r0, #23
 800142a:	f000 ff64 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142e:	2017      	movs	r0, #23
 8001430:	f000 ff7d 	bl	800232e <HAL_NVIC_EnableIRQ>

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800
 8001444:	10110000 	.word	0x10110000
 8001448:	40010c00 	.word	0x40010c00

0800144c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == right_motor_A_Pin) {
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d102      	bne.n	8001462 <HAL_GPIO_EXTI_Callback+0x16>
    	encoder_update(&encoderA);
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <HAL_GPIO_EXTI_Callback+0x2c>)
 800145e:	f7ff fb51 	bl	8000b04 <encoder_update>
    }
    if (GPIO_Pin == left_motor_A_Pin){
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d102      	bne.n	8001470 <HAL_GPIO_EXTI_Callback+0x24>
    	encoder_update(&encoderB);
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <HAL_GPIO_EXTI_Callback+0x30>)
 800146c:	f7ff fb4a 	bl	8000b04 <encoder_update>
    }

}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000410 	.word	0x20000410
 800147c:	20000448 	.word	0x20000448

08001480 <motor>:
// takes input from -100 to 100.

void motor(double L, double R) {
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800148a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// constrain the inputs
	L = L > 100 ? 100 : L;
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b95      	ldr	r3, [pc, #596]	; (80016e8 <motor+0x268>)
 8001494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001498:	f7ff faae 	bl	80009f8 <__aeabi_dcmpgt>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <motor+0x2a>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b90      	ldr	r3, [pc, #576]	; (80016e8 <motor+0x268>)
 80014a8:	e001      	b.n	80014ae <motor+0x2e>
 80014aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R > 100 ? 100 : R;
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <motor+0x268>)
 80014b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014bc:	f7ff fa9c 	bl	80009f8 <__aeabi_dcmpgt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <motor+0x4e>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <motor+0x268>)
 80014cc:	e001      	b.n	80014d2 <motor+0x52>
 80014ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	L = L < -100 ? -100 : L;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b84      	ldr	r3, [pc, #528]	; (80016ec <motor+0x26c>)
 80014dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e0:	f7ff fa6c 	bl	80009bc <__aeabi_dcmplt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <motor+0x72>
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <motor+0x26c>)
 80014f0:	e001      	b.n	80014f6 <motor+0x76>
 80014f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R < -100 ? -100 : R;
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <motor+0x26c>)
 8001500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001504:	f7ff fa5a 	bl	80009bc <__aeabi_dcmplt>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <motor+0x96>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <motor+0x26c>)
 8001514:	e001      	b.n	800151a <motor+0x9a>
 8001516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800151a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//change the direction pin.
	if (L < 0) {
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152a:	f7ff fa47 	bl	80009bc <__aeabi_dcmplt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00f      	beq.n	8001554 <motor+0xd4>
		HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2104      	movs	r1, #4
 8001538:	486d      	ldr	r0, [pc, #436]	; (80016f0 <motor+0x270>)
 800153a:	f001 f8ae 	bl	800269a <HAL_GPIO_WritePin>
		L = -1*L;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800154e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001552:	e004      	b.n	800155e <motor+0xde>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	4865      	ldr	r0, [pc, #404]	; (80016f0 <motor+0x270>)
 800155a:	f001 f89e 	bl	800269a <HAL_GPIO_WritePin>
	}
	if (R > 0) {
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156a:	f7ff fa45 	bl	80009f8 <__aeabi_dcmpgt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <motor+0x100>
		HAL_GPIO_WritePin(GPIOA, right_motor_dir_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	485d      	ldr	r0, [pc, #372]	; (80016f0 <motor+0x270>)
 800157a:	f001 f88e 	bl	800269a <HAL_GPIO_WritePin>
 800157e:	e00a      	b.n	8001596 <motor+0x116>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, right_motor_dir_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2108      	movs	r1, #8
 8001584:	485a      	ldr	r0, [pc, #360]	; (80016f0 <motor+0x270>)
 8001586:	f001 f888 	bl	800269a <HAL_GPIO_WritePin>
		R = -1*R;
 800158a:	68bc      	ldr	r4, [r7, #8]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001592:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	//deadzone compensation
	L = L > 2 && L < MOTOR_DEADZONE  ? MOTOR_DEADZONE : L;
 8001596:	2301      	movs	r3, #1
 8001598:	461c      	mov	r4, r3
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a6:	f7ff fa27 	bl	80009f8 <__aeabi_dcmpgt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <motor+0x134>
 80015b0:	2300      	movs	r3, #0
 80015b2:	461c      	mov	r4, r3
 80015b4:	b2e3      	uxtb	r3, r4
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d113      	bne.n	80015e8 <motor+0x168>
 80015c0:	2301      	movs	r3, #1
 80015c2:	461c      	mov	r4, r3
 80015c4:	a344      	add	r3, pc, #272	; (adr r3, 80016d8 <motor+0x258>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ce:	f7ff f9f5 	bl	80009bc <__aeabi_dcmplt>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <motor+0x15c>
 80015d8:	2300      	movs	r3, #0
 80015da:	461c      	mov	r4, r3
 80015dc:	b2e3      	uxtb	r3, r4
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <motor+0x16e>
 80015e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015ec:	e002      	b.n	80015f4 <motor+0x174>
 80015ee:	a33a      	add	r3, pc, #232	; (adr r3, 80016d8 <motor+0x258>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R > 2 && R < MOTOR_DEADZONE  ? MOTOR_DEADZONE : R;
 80015f8:	2301      	movs	r3, #1
 80015fa:	461c      	mov	r4, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001608:	f7ff f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <motor+0x196>
 8001612:	2300      	movs	r3, #0
 8001614:	461c      	mov	r4, r3
 8001616:	b2e3      	uxtb	r3, r4
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d113      	bne.n	800164a <motor+0x1ca>
 8001622:	2301      	movs	r3, #1
 8001624:	461c      	mov	r4, r3
 8001626:	a32c      	add	r3, pc, #176	; (adr r3, 80016d8 <motor+0x258>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001630:	f7ff f9c4 	bl	80009bc <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <motor+0x1be>
 800163a:	2300      	movs	r3, #0
 800163c:	461c      	mov	r4, r3
 800163e:	b2e3      	uxtb	r3, r4
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <motor+0x1d0>
 800164a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800164e:	e002      	b.n	8001656 <motor+0x1d6>
 8001650:	a321      	add	r3, pc, #132	; (adr r3, 80016d8 <motor+0x258>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//convert to pwm tick count
	L = L*PWM_CONV;
 800165a:	a321      	add	r3, pc, #132	; (adr r3, 80016e0 <motor+0x260>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001664:	f7fe ff38 	bl	80004d8 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <motor+0x268>)
 8001676:	f7ff f859 	bl	800072c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R*PWM_CONV;
 8001682:	a317      	add	r3, pc, #92	; (adr r3, 80016e0 <motor+0x260>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168c:	f7fe ff24 	bl	80004d8 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <motor+0x268>)
 800169e:	f7ff f845 	bl	800072c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//write to timers.
	TIM2->CCR2 = R;
 80016aa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80016ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b2:	f7ff f9e9 	bl	8000a88 <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR1 = L;
 80016ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80016be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c2:	f7ff f9e1 	bl	8000a88 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	6363      	str	r3, [r4, #52]	; 0x34
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	47ae147b 	.word	0x47ae147b
 80016dc:	3f847ae1 	.word	0x3f847ae1
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40efffe0 	.word	0x40efffe0
 80016e8:	40590000 	.word	0x40590000
 80016ec:	c0590000 	.word	0xc0590000
 80016f0:	40010800 	.word	0x40010800

080016f4 <abs2>:

double abs2(double x) {
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	e9c7 0100 	strd	r0, r1, [r7]
	x = x < 0 ? -x : x;
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7ff f957 	bl	80009bc <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <abs2+0x2a>
 8001714:	683c      	ldr	r4, [r7, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800171c:	e001      	b.n	8001722 <abs2+0x2e>
 800171e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001722:	e9c7 4500 	strd	r4, r5, [r7]
	return x;
 8001726:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	motor(0,0);
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	f04f 0000 	mov.w	r0, #0
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	f7ff fe9a 	bl	8001480 <motor>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x1c>

08001752 <mpu6050_init>:
#define GYRO_XOUT_H_REG 0x43
#define PI 3.14159265359
#define rad2deg  57.29567015
const uint8_t TIMEOUT = 100;
// initialization function, returns 0 if successful, otherwise 1.
uint8_t mpu6050_init(I2C_HandleTypeDef *I2Cx){
 8001752:	b580      	push	{r7, lr}
 8001754:	b088      	sub	sp, #32
 8001756:	af04      	add	r7, sp, #16
 8001758:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, TIMEOUT);
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2301      	movs	r3, #1
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030f 	add.w	r3, r7, #15
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	2275      	movs	r2, #117	; 0x75
 800176c:	21d0      	movs	r1, #208	; 0xd0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f001 fa02 	bl	8002b78 <HAL_I2C_Mem_Read>

    if (check == 104) // waiting for init flag.
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b68      	cmp	r3, #104	; 0x68
 8001778:	d14c      	bne.n	8001814 <mpu6050_init+0xc2>
    {
        // reset internal registers, set to use internal 8MHz clock.
        data = 0b00000000;
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, TIMEOUT);
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	f107 030e 	add.w	r3, r7, #14
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	226b      	movs	r2, #107	; 0x6b
 8001790:	21d0      	movs	r1, #208	; 0xd0
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f001 f8f6 	bl	8002984 <HAL_I2C_Mem_Write>

        // set the sample rate divider to 1kHz
        data = 0x07;
 8001798:	2307      	movs	r3, #7
 800179a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, TIMEOUT);
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2301      	movs	r3, #1
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f107 030e 	add.w	r3, r7, #14
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	2219      	movs	r2, #25
 80017ae:	21d0      	movs	r1, #208	; 0xd0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f001 f8e7 	bl	8002984 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        data = 0x00;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2301      	movs	r3, #1
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f107 030e 	add.w	r3, r7, #14
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	221c      	movs	r2, #28
 80017cc:	21d0      	movs	r1, #208	; 0xd0
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f001 f8d8 	bl	8002984 <HAL_I2C_Mem_Write>

        // low pass filter configuration.
        // set to 260Hz bandwith for minimum delay.
        data = 0b00001000;
 80017d4:	2308      	movs	r3, #8
 80017d6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	2301      	movs	r3, #1
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f107 030e 	add.w	r3, r7, #14
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	221b      	movs	r2, #27
 80017ea:	21d0      	movs	r1, #208	; 0xd0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f001 f8c9 	bl	8002984 <HAL_I2C_Mem_Write>

        //set the lowpass filter to 100Hz;
        data = 0b0000100;
 80017f2:	2304      	movs	r3, #4
 80017f4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, LOWPASS_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2301      	movs	r3, #1
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 030e 	add.w	r3, r7, #14
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	221a      	movs	r2, #26
 8001808:	21d0      	movs	r1, #208	; 0xd0
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f001 f8ba 	bl	8002984 <HAL_I2C_Mem_Write>
        return 0;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <mpu6050_init+0xc4>
    }
    return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <mpu6050_tune>:
// calculates gyroscope bias
void mpu6050_tune(I2C_HandleTypeDef *I2Cx, mpu6050_t *dataStore) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	uint8_t tempData[6];
	int16_t i= 1,i_max = 1000;
 800182a:	2301      	movs	r3, #1
 800182c:	82fb      	strh	r3, [r7, #22]
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	82bb      	strh	r3, [r7, #20]
	int16_t x,y,z;

	dataStore->K_gyr = 0.94;
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	a34c      	add	r3, pc, #304	; (adr r3, 8001968 <mpu6050_tune+0x148>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	dataStore->K_acc = 1-dataStore->K_gyr;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	4949      	ldr	r1, [pc, #292]	; (8001970 <mpu6050_tune+0x150>)
 800184c:	f7fe fc8c 	bl	8000168 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	dataStore->th_prev = 0;
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	dataStore->gyro_x_raw_bias = 0;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	819a      	strh	r2, [r3, #12]
	dataStore->gyro_y_raw_bias = 0;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	81da      	strh	r2, [r3, #14]
	dataStore->gyro_z_raw_bias = 0;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	821a      	strh	r2, [r3, #16]

	while (i <= i_max) {
 800187a:	e069      	b.n	8001950 <mpu6050_tune+0x130>
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, &tempData, 6, TIMEOUT);
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2306      	movs	r3, #6
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	2243      	movs	r2, #67	; 0x43
 800188e:	21d0      	movs	r1, #208	; 0xd0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 f971 	bl	8002b78 <HAL_I2C_Mem_Read>

		x = (int16_t)(tempData[0] << 8 | tempData[1]);
 8001896:	7a3b      	ldrb	r3, [r7, #8]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7a7b      	ldrb	r3, [r7, #9]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	827b      	strh	r3, [r7, #18]
		y = (int16_t)(tempData[2] << 8 | tempData[3]);
 80018a4:	7abb      	ldrb	r3, [r7, #10]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	823b      	strh	r3, [r7, #16]
		z = (int16_t)(tempData[4] << 8 | tempData[5]);
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	7b7b      	ldrb	r3, [r7, #13]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	81fb      	strh	r3, [r7, #14]

		//iterative mean update.
		dataStore->gyro_x_raw_bias = dataStore->gyro_x_raw_bias + (x - dataStore->gyro_x_raw_bias)/(i+1);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80018d2:	1a59      	subs	r1, r3, r1
 80018d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d8:	3301      	adds	r3, #1
 80018da:	fb91 f3f3 	sdiv	r3, r1, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	819a      	strh	r2, [r3, #12]
		dataStore->gyro_y_raw_bias = dataStore->gyro_y_raw_bias + (y - dataStore->gyro_y_raw_bias)/(i+1);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018fc:	1a59      	subs	r1, r3, r1
 80018fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001902:	3301      	adds	r3, #1
 8001904:	fb91 f3f3 	sdiv	r3, r1, r3
 8001908:	b29b      	uxth	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	81da      	strh	r2, [r3, #14]
		dataStore->gyro_z_raw_bias = dataStore->gyro_z_raw_bias + (z - dataStore->gyro_z_raw_bias)/(i+1);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800191a:	b29a      	uxth	r2, r3
 800191c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001926:	1a59      	subs	r1, r3, r1
 8001928:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800192c:	3301      	adds	r3, #1
 800192e:	fb91 f3f3 	sdiv	r3, r1, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	b21a      	sxth	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	821a      	strh	r2, [r3, #16]
		i++;
 800193e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001942:	b29b      	uxth	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	b29b      	uxth	r3, r3
 8001948:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(5);
 800194a:	2005      	movs	r0, #5
 800194c:	f000 fbd8 	bl	8002100 <HAL_Delay>
	while (i <= i_max) {
 8001950:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001954:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	dd8f      	ble.n	800187c <mpu6050_tune+0x5c>
	}

}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e147ae14 	.word	0xe147ae14
 800196c:	3fee147a 	.word	0x3fee147a
 8001970:	3ff00000 	.word	0x3ff00000
 8001974:	00000000 	.word	0x00000000

08001978 <mpu6050_read>:
void mpu6050_read(I2C_HandleTypeDef *I2Cx, mpu6050_t *dataStore) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]

	uint8_t tempData[14];
	const double AccLsbSensitivity = 16384; // conversion factor to g, based on config.
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <mpu6050_read+0x1f0>)
 8001988:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double gyroLsbSensitivity = 131; // conversion factor to rad/s
 800198c:	a372      	add	r3, pc, #456	; (adr r3, 8001b58 <mpu6050_read+0x1e0>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9c7 2306 	strd	r2, r3, [r7, #24]

	dataStore->x_prev = dataStore->gx;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	// read 14 data registers in a row.
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, &tempData, 14, TIMEOUT);
 80019a2:	2364      	movs	r3, #100	; 0x64
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	230e      	movs	r3, #14
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	223b      	movs	r2, #59	; 0x3b
 80019b4:	21d0      	movs	r1, #208	; 0xd0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 f8de 	bl	8002b78 <HAL_I2C_Mem_Read>

	/*
		one measurement is 16bits, but stored in two 8bit registers,
		therefore, they need to be concatenated.
	*/
	dataStore->acc_x_raw = (int16_t)(tempData[0] << 8 | tempData[1]);
 80019bc:	7a3b      	ldrb	r3, [r7, #8]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	7a7b      	ldrb	r3, [r7, #9]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	801a      	strh	r2, [r3, #0]
	dataStore->acc_y_raw = (int16_t)(tempData[2] << 8 | tempData[3]);
 80019ce:	7abb      	ldrb	r3, [r7, #10]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b21a      	sxth	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	805a      	strh	r2, [r3, #2]
	dataStore->acc_z_raw = (int16_t)(tempData[4] << 8 | tempData[5]);
 80019e0:	7b3b      	ldrb	r3, [r7, #12]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	809a      	strh	r2, [r3, #4]

	dataStore->temp_raw = (int16_t)(tempData[6] << 8 | tempData[7]);
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	825a      	strh	r2, [r3, #18]

	dataStore->gyro_x_raw = (int16_t)(tempData[8] << 8 | tempData[9]) - dataStore->gyro_x_raw_bias;
 8001a04:	7c3b      	ldrb	r3, [r7, #16]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7c7b      	ldrb	r3, [r7, #17]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	80da      	strh	r2, [r3, #6]
	dataStore->gyro_y_raw = (int16_t)(tempData[10] << 8 | tempData[11]) - dataStore->gyro_y_raw_bias;
 8001a26:	7cbb      	ldrb	r3, [r7, #18]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	811a      	strh	r2, [r3, #8]
	dataStore->gyro_z_raw = (int16_t)(tempData[12] << 8 | tempData[13]) - dataStore->gyro_z_raw_bias;
 8001a48:	7d3b      	ldrb	r3, [r7, #20]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	815a      	strh	r2, [r3, #10]

	//convert to g
	dataStore->ax = ((double)dataStore->acc_x_raw)/AccLsbSensitivity;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fcc7 	bl	8000404 <__aeabi_i2d>
 8001a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a7a:	f7fe fe57 	bl	800072c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dataStore->ay = ((double)dataStore->acc_y_raw/AccLsbSensitivity);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcb8 	bl	8000404 <__aeabi_i2d>
 8001a94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a98:	f7fe fe48 	bl	800072c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dataStore->az = ((double)dataStore->acc_z_raw/AccLsbSensitivity);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fca9 	bl	8000404 <__aeabi_i2d>
 8001ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ab6:	f7fe fe39 	bl	800072c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// convert to Celsius
	dataStore->temp = (double)(dataStore->temp_raw/340 + 36.53);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001aca:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <mpu6050_read+0x1f4>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	11d2      	asrs	r2, r2, #7
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fc93 	bl	8000404 <__aeabi_i2d>
 8001ade:	a320      	add	r3, pc, #128	; (adr r3, 8001b60 <mpu6050_read+0x1e8>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fb42 	bl	800016c <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	//convert to rad/s
	dataStore->gx = (dataStore->gyro_x_raw/gyroLsbSensitivity);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc83 	bl	8000404 <__aeabi_i2d>
 8001afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b02:	f7fe fe13 	bl	800072c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dataStore->gy = (double)(dataStore->gyro_y_raw/gyroLsbSensitivity);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc74 	bl	8000404 <__aeabi_i2d>
 8001b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b20:	f7fe fe04 	bl	800072c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	dataStore->gz = (dataStore->gyro_z_raw/gyroLsbSensitivity);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc65 	bl	8000404 <__aeabi_i2d>
 8001b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3e:	f7fe fdf5 	bl	800072c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40606000 	.word	0x40606000
 8001b60:	0a3d70a4 	.word	0x0a3d70a4
 8001b64:	404243d7 	.word	0x404243d7
 8001b68:	40d00000 	.word	0x40d00000
 8001b6c:	60606061 	.word	0x60606061

08001b70 <mpu6050_complimentary>:
void mpu6050_complimentary(mpu6050_t *dataStore, uint32_t dt) {
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]

	dataStore->th = dataStore->K_acc*atan2(dataStore->ax,sqrt(pow(dataStore->ay,2) + pow(dataStore->az,2))) + dataStore->K_gyr*(dataStore->th_prev + dataStore->gy*dt);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b96:	f00c f83d 	bl	800dc14 <pow>
 8001b9a:	4682      	mov	sl, r0
 8001b9c:	468b      	mov	fp, r1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bac:	f00c f832 	bl	800dc14 <pow>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4650      	mov	r0, sl
 8001bb6:	4659      	mov	r1, fp
 8001bb8:	f7fe fad8 	bl	800016c <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f00c f88e 	bl	800dce4 <sqrt>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4640      	mov	r0, r8
 8001bce:	4649      	mov	r1, r9
 8001bd0:	f00c f81e 	bl	800dc10 <atan2>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fc7c 	bl	80004d8 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2300 	strd	r2, r3, [r7]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	e9d3 ab0e 	ldrd	sl, fp, [r3, #56]	; 0x38
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f7fe fbf2 	bl	80003e4 <__aeabi_ui2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4650      	mov	r0, sl
 8001c06:	4659      	mov	r1, fp
 8001c08:	f7fe fc66 	bl	80004d8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4640      	mov	r0, r8
 8001c12:	4649      	mov	r1, r9
 8001c14:	f7fe faaa 	bl	800016c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fc5a 	bl	80004d8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	f7fe fa9e 	bl	800016c <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	dataStore->th_prev = dataStore->th;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_MspInit+0x5c>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_MspInit+0x5c>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_MspInit+0x5c>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_MspInit+0x5c>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_MspInit+0x5c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_MspInit+0x5c>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_MspInit+0x60>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_MspInit+0x60>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_I2C_MspInit+0x70>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d123      	bne.n	8001d1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_I2C_MspInit+0x78>)
 8001d00:	f000 fb30 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0e:	61d3      	str	r3, [r2, #28]
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d10b      	bne.n	8001d5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d86:	d117      	bne.n	8001db8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_TIM_MspPostInit+0x58>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_TIM_MspPostInit+0x58>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_TIM_MspPostInit+0x58>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <HAL_TIM_MspPostInit+0x5c>)
 8001db4:	f000 fad6 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 f95b 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_motor_B_Pin);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 fc56 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_motor_A_Pin);
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f000 fc4f 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_motor_B_Pin);
 8001e36:	2004      	movs	r0, #4
 8001e38:	f000 fc48 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e46:	f001 fd8a 	bl	800395e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20001150 	.word	0x20001150

08001e54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_motor_A_Pin);
 8001e58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e5c:	f000 fc36 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <_kill>:

int _kill(int pid, int sig)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e7c:	f008 ffbe 	bl	800adfc <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2216      	movs	r2, #22
 8001e84:	601a      	str	r2, [r3, #0]
  return -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_exit>:

void _exit (int status)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffe7 	bl	8001e72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea4:	e7fe      	b.n	8001ea4 <_exit+0x12>

08001ea6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e00a      	b.n	8001ece <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb8:	f3af 8000 	nop.w
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	60ba      	str	r2, [r7, #8]
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbf0      	blt.n	8001eb8 <_read+0x12>
  }

  return len;
 8001ed6:	687b      	ldr	r3, [r7, #4]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e009      	b.n	8001f06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbf1      	blt.n	8001ef2 <_write+0x12>
  }
  return len;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_close>:

int _close(int file)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <_sbrk+0x5c>)
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <_sbrk+0x60>)
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <_sbrk+0x64>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <_sbrk+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa8:	f008 ff28 	bl	800adfc <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	220c      	movs	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e009      	b.n	8001fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <_sbrk+0x64>)
 8001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20005000 	.word	0x20005000
 8001fd8:	00000400 	.word	0x00000400
 8001fdc:	20000480 	.word	0x20000480
 8001fe0:	20001670 	.word	0x20001670

08001fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002016:	f7ff ffe5 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f008 fef5 	bl	800ae08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201e:	f7fe fdcb 	bl	8000bb8 <main>
  bx lr
 8002022:	4770      	bx	lr
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800202c:	0800f428 	.word	0x0800f428
  ldr r2, =_sbss
 8002030:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002034:	2000166c 	.word	0x2000166c

08002038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC1_2_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x28>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f947 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fdfa 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f95f 	bl	800234a <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 f927 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000010 	.word	0x20000010
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x1c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x20>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_IncTick+0x20>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000010 	.word	0x20000010
 80020e8:	20000484 	.word	0x20000484

080020ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GetTick+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000484 	.word	0x20000484

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fff0 	bl	80020ec <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffe0 	bl	80020ec <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000010 	.word	0x20000010

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4906      	ldr	r1, [pc, #24]	; (80021e0 <__NVIC_EnableIRQ+0x34>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff90 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff2d 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff42 	bl	8002190 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff90 	bl	8002238 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5f 	bl	80021e4 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff35 	bl	80021ac <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b08b      	sub	sp, #44	; 0x2c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e169      	b.n	800264c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002378:	2201      	movs	r2, #1
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8158 	bne.w	8002646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a9a      	ldr	r2, [pc, #616]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d05e      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023a0:	4a98      	ldr	r2, [pc, #608]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d875      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023a6:	4a98      	ldr	r2, [pc, #608]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d058      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023ac:	4a96      	ldr	r2, [pc, #600]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d86f      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023b2:	4a96      	ldr	r2, [pc, #600]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d052      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023b8:	4a94      	ldr	r2, [pc, #592]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d869      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023be:	4a94      	ldr	r2, [pc, #592]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d04c      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023c4:	4a92      	ldr	r2, [pc, #584]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d863      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023ca:	4a92      	ldr	r2, [pc, #584]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d046      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023d0:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d85d      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d82a      	bhi.n	8002430 <HAL_GPIO_Init+0xcc>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d859      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HAL_GPIO_Init+0x80>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	08002439 	.word	0x08002439
 80023ec:	0800244b 	.word	0x0800244b
 80023f0:	0800248d 	.word	0x0800248d
 80023f4:	08002493 	.word	0x08002493
 80023f8:	08002493 	.word	0x08002493
 80023fc:	08002493 	.word	0x08002493
 8002400:	08002493 	.word	0x08002493
 8002404:	08002493 	.word	0x08002493
 8002408:	08002493 	.word	0x08002493
 800240c:	08002493 	.word	0x08002493
 8002410:	08002493 	.word	0x08002493
 8002414:	08002493 	.word	0x08002493
 8002418:	08002493 	.word	0x08002493
 800241c:	08002493 	.word	0x08002493
 8002420:	08002493 	.word	0x08002493
 8002424:	08002493 	.word	0x08002493
 8002428:	08002441 	.word	0x08002441
 800242c:	08002455 	.word	0x08002455
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_GPIO_Init+0x2b4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002436:	e02c      	b.n	8002492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e029      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e024      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	3308      	adds	r3, #8
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e01f      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	330c      	adds	r3, #12
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e01a      	b.n	8002494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002466:	2304      	movs	r3, #4
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e013      	b.n	8002494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	611a      	str	r2, [r3, #16]
          break;
 800247e:	e009      	b.n	8002494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	615a      	str	r2, [r3, #20]
          break;
 800248a:	e003      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x130>
          break;
 8002492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d801      	bhi.n	800249e <HAL_GPIO_Init+0x13a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	e001      	b.n	80024a2 <HAL_GPIO_Init+0x13e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d802      	bhi.n	80024b0 <HAL_GPIO_Init+0x14c>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3b08      	subs	r3, #8
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	210f      	movs	r1, #15
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80b1 	beq.w	8002646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_GPIO_Init+0x2c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_GPIO_Init+0x1ec>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_GPIO_Init+0x2c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_Init+0x1e8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <HAL_GPIO_Init+0x2c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x1e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_GPIO_Init+0x2cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_Init+0x1e0>
 8002540:	2303      	movs	r3, #3
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002544:	2304      	movs	r3, #4
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002550:	2300      	movs	r3, #0
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002562:	492f      	ldr	r1, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	492c      	ldr	r1, [pc, #176]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4928      	ldr	r1, [pc, #160]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4922      	ldr	r1, [pc, #136]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	491e      	ldr	r1, [pc, #120]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4914      	ldr	r1, [pc, #80]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d021      	beq.n	8002638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e021      	b.n	8002646 <HAL_GPIO_Init+0x2e2>
 8002602:	bf00      	nop
 8002604:	10320000 	.word	0x10320000
 8002608:	10310000 	.word	0x10310000
 800260c:	10220000 	.word	0x10220000
 8002610:	10210000 	.word	0x10210000
 8002614:	10120000 	.word	0x10120000
 8002618:	10110000 	.word	0x10110000
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	40010800 	.word	0x40010800
 8002628:	40010c00 	.word	0x40010c00
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_GPIO_Init+0x304>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002642:	4013      	ands	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae8e 	bne.w	8002378 <HAL_GPIO_Init+0x14>
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	372c      	adds	r7, #44	; 0x2c
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
 80026a6:	4613      	mov	r3, r2
 80026a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026aa:	787b      	ldrb	r3, [r7, #1]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe feae 	bl	800144c <HAL_GPIO_EXTI_Callback>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e12b      	b.n	8002966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fac6 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002760:	f003 f866 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a81      	ldr	r2, [pc, #516]	; (8002970 <HAL_I2C_Init+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d807      	bhi.n	8002780 <HAL_I2C_Init+0x84>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a80      	ldr	r2, [pc, #512]	; (8002974 <HAL_I2C_Init+0x278>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e006      	b.n	800278e <HAL_I2C_Init+0x92>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_I2C_Init+0x27c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0e7      	b.n	8002966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a78      	ldr	r2, [pc, #480]	; (800297c <HAL_I2C_Init+0x280>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_I2C_Init+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_I2C_Init+0xd4>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e009      	b.n	80027e4 <HAL_I2C_Init+0xe8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_I2C_Init+0x284>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	3301      	adds	r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	495c      	ldr	r1, [pc, #368]	; (8002970 <HAL_I2C_Init+0x274>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d819      	bhi.n	8002838 <HAL_I2C_Init+0x13c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002818:	400b      	ands	r3, r1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_I2C_Init+0x138>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fbb1 f3f3 	udiv	r3, r1, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	e051      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002834:	2304      	movs	r3, #4
 8002836:	e04f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_I2C_Init+0x168>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e012      	b.n	800288a <HAL_I2C_Init+0x18e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x196>
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10e      	bne.n	80028b8 <HAL_I2C_Init+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e58      	subs	r0, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Init+0x1dc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6911      	ldr	r1, [r2, #16]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff fba5 	bl	80020ec <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80d9 	bne.w	8002b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2319      	movs	r3, #25
 80029b8:	2201      	movs	r2, #1
 80029ba:	496d      	ldr	r1, [pc, #436]	; (8002b70 <HAL_I2C_Mem_Write+0x1ec>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fcc1 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0cc      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Mem_Write+0x56>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0c5      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d007      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_I2C_Mem_Write+0x1f0>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a42:	88f8      	ldrh	r0, [r7, #6]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 faf8 	bl	8003048 <I2C_RequestMemoryWrite>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d052      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e081      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fd42 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x180>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1aa      	bne.n	8002a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd2e 	bl	8003572 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e016      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00100002 	.word	0x00100002
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7ff faa9 	bl	80020ec <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 8244 	bne.w	8003032 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2319      	movs	r3, #25
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4982      	ldr	r1, [pc, #520]	; (8002dbc <HAL_I2C_Mem_Read+0x244>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fbc5 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e237      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Mem_Read+0x5a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e230      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2222      	movs	r2, #34	; 0x22
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a62      	ldr	r2, [pc, #392]	; (8002dc0 <HAL_I2C_Mem_Read+0x248>)
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c3a:	88f8      	ldrh	r0, [r7, #6]
 8002c3c:	893a      	ldrh	r2, [r7, #8]
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa92 	bl	8003174 <I2C_RequestMemoryRead>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e1ec      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d113      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e1c0      	b.n	800300c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d11e      	bne.n	8002cd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca2:	b672      	cpsid	i
}
 8002ca4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ccc:	b662      	cpsie	i
}
 8002cce:	e035      	b.n	8002d3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d11e      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce8:	b672      	cpsid	i
}
 8002cea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d12:	b662      	cpsie	i
}
 8002d14:	e012      	b.n	8002d3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d3c:	e166      	b.n	800300c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	f200 811f 	bhi.w	8002f86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d123      	bne.n	8002d98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fc4d 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e167      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d96:	e139      	b.n	800300c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d152      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	2200      	movs	r2, #0
 8002da8:	4906      	ldr	r1, [pc, #24]	; (8002dc4 <HAL_I2C_Mem_Read+0x24c>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 faca 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e13c      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
 8002dba:	bf00      	nop
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000
 8002dc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e0e:	b662      	cpsie	i
}
 8002e10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e44:	e0e2      	b.n	800300c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	497b      	ldr	r1, [pc, #492]	; (800303c <HAL_I2C_Mem_Read+0x4c4>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa77 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0e9      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_I2C_Mem_Read+0x4c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	08db      	lsrs	r3, r3, #3
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_I2C_Mem_Read+0x4cc>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0a1a      	lsrs	r2, r3, #8
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00da      	lsls	r2, r3, #3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d118      	bne.n	8002efe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002eee:	b662      	cpsie	i
}
 8002ef0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e09a      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d1d9      	bne.n	8002ec0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f4e:	b662      	cpsie	i
}
 8002f50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f84:	e042      	b.n	800300c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fb32 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e04c      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d118      	bne.n	800300c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f ae94 	bne.w	8002d3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
  }
}
 8003034:	4618      	mov	r0, r3
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010004 	.word	0x00010004
 8003040:	20000008 	.word	0x20000008
 8003044:	14f8b589 	.word	0x14f8b589

08003048 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	460b      	mov	r3, r1
 800305c:	813b      	strh	r3, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2200      	movs	r2, #0
 800307a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f960 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d103      	bne.n	80030a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e05f      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	492d      	ldr	r1, [pc, #180]	; (8003170 <I2C_RequestMemoryWrite+0x128>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f998 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e04c      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa02 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e02b      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e021      	b.n	8003164 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003120:	893b      	ldrh	r3, [r7, #8]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	b29b      	uxth	r3, r3
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f9dc 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e005      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315a:	893b      	ldrh	r3, [r7, #8]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	00010002 	.word	0x00010002

08003174 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	460b      	mov	r3, r1
 8003188:	813b      	strh	r3, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f8c2 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d103      	bne.n	80031de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0aa      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	4952      	ldr	r1, [pc, #328]	; (8003340 <I2C_RequestMemoryRead+0x1cc>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f8fa 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e097      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f964 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b04      	cmp	r3, #4
 8003234:	d107      	bne.n	8003246 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e076      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003250:	893b      	ldrh	r3, [r7, #8]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	e021      	b.n	80032a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	b29b      	uxth	r3, r3
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f93e 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e050      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003296:	893b      	ldrh	r3, [r7, #8]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f923 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e035      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f82b 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d103      	bne.n	800330c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003310:	897b      	ldrh	r3, [r7, #10]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	4906      	ldr	r1, [pc, #24]	; (8003340 <I2C_RequestMemoryRead+0x1cc>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f863 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010002 	.word	0x00010002

08003344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003354:	e025      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe fec5 	bl	80020ec <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e023      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10d      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	e00c      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d0b6      	beq.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003400:	e051      	b.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d123      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e046      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fe43 	bl	80020ec <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e020      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e00b      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d18d      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	e02d      	b.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8ce 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02d      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d021      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7fe fde9 	bl	80020ec <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d1ca      	bne.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357e:	e02d      	b.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f88d 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e02d      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d021      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe fda8 	bl	80020ec <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d1ca      	bne.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003600:	e042      	b.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d119      	bne.n	8003644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0210 	mvn.w	r2, #16
 8003618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e029      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe fd52 	bl	80020ec <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d1b5      	bne.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d11b      	bne.n	80036f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fe:	b08b      	sub	sp, #44	; 0x2c
 8003700:	af06      	add	r7, sp, #24
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0fd      	b.n	800390a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f007 f8c0 	bl	800a8a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fda5 	bl	8006284 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	687e      	ldr	r6, [r7, #4]
 8003742:	466d      	mov	r5, sp
 8003744:	f106 0410 	add.w	r4, r6, #16
 8003748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	1d33      	adds	r3, r6, #4
 8003752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003754:	6838      	ldr	r0, [r7, #0]
 8003756:	f002 fd6f 	bl	8006238 <USB_CoreInit>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ce      	b.n	800390a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fda0 	bl	80062b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	e04c      	b.n	8003818 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	440b      	add	r3, r1
 800378e:	3301      	adds	r3, #1
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	b298      	uxth	r0, r3
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	3336      	adds	r3, #54	; 0x36
 80037bc:	4602      	mov	r2, r0
 80037be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	3303      	adds	r3, #3
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	3338      	adds	r3, #56	; 0x38
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	333c      	adds	r3, #60	; 0x3c
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	3340      	adds	r3, #64	; 0x40
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3301      	adds	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3ad      	bcc.n	800377e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e044      	b.n	80038b2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	f203 1369 	addw	r3, r3, #361	; 0x169
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	3301      	adds	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3b5      	bcc.n	8003828 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	687e      	ldr	r6, [r7, #4]
 80038c4:	466d      	mov	r5, sp
 80038c6:	f106 0410 	add.w	r4, r6, #16
 80038ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	602b      	str	r3, [r5, #0]
 80038d2:	1d33      	adds	r3, r6, #4
 80038d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f002 fcfa 	bl	80062d0 <USB_DevInit>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00d      	b.n	800390a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f005 f9ac 	bl	8008c60 <USB_DevDisconnect>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003912 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_PCD_Start+0x16>
 8003924:	2302      	movs	r3, #2
 8003926:	e016      	b.n	8003956 <HAL_PCD_Start+0x44>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fc8f 	bl	8006258 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800393a:	2101      	movs	r1, #1
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f007 fa26 	bl	800ad8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f005 f980 	bl	8008c4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f005 f982 	bl	8008c74 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397a:	d102      	bne.n	8003982 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb5f 	bl	8004040 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f005 f974 	bl	8008c74 <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d112      	bne.n	80039be <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039aa:	b292      	uxth	r2, r2
 80039ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f006 fff4 	bl	800a99e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039b6:	2100      	movs	r1, #0
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f923 	bl	8003c04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f005 f956 	bl	8008c74 <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d2:	d10b      	bne.n	80039ec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039e6:	b292      	uxth	r2, r2
 80039e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f005 f93f 	bl	8008c74 <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a00:	d10b      	bne.n	8003a1a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a14:	b292      	uxth	r2, r2
 8003a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f005 f928 	bl	8008c74 <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d126      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	b292      	uxth	r2, r2
 8003a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0208 	bic.w	r2, r2, #8
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f006 ffd5 	bl	800aa10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f005 f8f6 	bl	8008c74 <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	f040 8082 	bne.w	8003b9a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e010      	b.n	8003abe <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	441a      	add	r2, r3
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	8812      	ldrh	r2, [r2, #0]
 8003aac:	b292      	uxth	r2, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	443b      	add	r3, r7
 8003ab4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003ab8:	7ffb      	ldrb	r3, [r7, #31]
 8003aba:	3301      	adds	r3, #1
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2b07      	cmp	r3, #7
 8003ac2:	d9eb      	bls.n	8003a9c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	b292      	uxth	r2, r2
 8003af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003af4:	bf00      	nop
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f6      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e00f      	b.n	8003b46 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	7ffa      	ldrb	r2, [r7, #31]
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	440a      	add	r2, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	3320      	adds	r3, #32
 8003b38:	443b      	add	r3, r7
 8003b3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003b3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003b40:	7ffb      	ldrb	r3, [r7, #31]
 8003b42:	3301      	adds	r3, #1
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	7ffb      	ldrb	r3, [r7, #31]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9ec      	bls.n	8003b26 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b76:	b292      	uxth	r2, r2
 8003b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0204 	orr.w	r2, r2, #4
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f006 ff21 	bl	800a9dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f005 f868 	bl	8008c74 <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bae:	d10e      	bne.n	8003bce <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f006 feda 	bl	800a982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f005 f84e 	bl	8008c74 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be2:	d10b      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_SetAddress+0x1a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e013      	b.n	8003c46 <HAL_PCD_SetAddress+0x42>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 fff5 	bl	8008c26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	4608      	mov	r0, r1
 8003c58:	4611      	mov	r1, r2
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	70fb      	strb	r3, [r7, #3]
 8003c60:	460b      	mov	r3, r1
 8003c62:	803b      	strh	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da0e      	bge.n	8003c92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	705a      	strb	r2, [r3, #1]
 8003c90:	e00e      	b.n	8003cb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 0207 	and.w	r2, r3, #7
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cbc:	883a      	ldrh	r2, [r7, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	78ba      	ldrb	r2, [r7, #2]
 8003cc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cda:	78bb      	ldrb	r3, [r7, #2]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d102      	bne.n	8003ce6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_EP_Open+0xa6>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e00e      	b.n	8003d12 <HAL_PCD_EP_Open+0xc4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f002 fb04 	bl	8006310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003d10:	7afb      	ldrb	r3, [r7, #11]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da0e      	bge.n	8003d4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	e00e      	b.n	8003d6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 0207 	and.w	r2, r3, #7
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_EP_Close+0x6a>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e00e      	b.n	8003da2 <HAL_PCD_EP_Close+0x88>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68f9      	ldr	r1, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fe26 	bl	80069e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	460b      	mov	r3, r1
 8003db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 0207 	and.w	r2, r3, #7
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2200      	movs	r2, #0
 8003de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f002 ffd8 	bl	8006dbc <USB_EPStartXfer>
 8003e0c:	e005      	b.n	8003e1a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f002 ffd1 	bl	8006dbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 0207 	and.w	r2, r3, #7
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	7afb      	ldrb	r3, [r7, #11]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 ff7e 	bl	8006dbc <USB_EPStartXfer>
 8003ec0:	e005      	b.n	8003ece <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f002 ff77 	bl	8006dbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d901      	bls.n	8003ef6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e04c      	b.n	8003f90 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da0e      	bge.n	8003f1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4413      	add	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	705a      	strb	r2, [r3, #1]
 8003f1a:	e00c      	b.n	8003f36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_PCD_EP_SetStall+0x7e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e01c      	b.n	8003f90 <HAL_PCD_EP_SetStall+0xb8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 fd61 	bl	8008a2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f004 fe86 	bl	8008c92 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d901      	bls.n	8003fb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e040      	b.n	8004038 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da0e      	bge.n	8003fdc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	705a      	strb	r2, [r3, #1]
 8003fda:	e00e      	b.n	8003ffa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 0207 	and.w	r2, r3, #7
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PCD_EP_ClrStall+0x82>
 8004016:	2302      	movs	r3, #2
 8004018:	e00e      	b.n	8004038 <HAL_PCD_EP_ClrStall+0xa0>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fd4f 	bl	8008acc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004048:	e2ec      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004052:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004060:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 8161 	bne.w	800432c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800406a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d152      	bne.n	800411a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	81fb      	strh	r3, [r7, #14]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004094:	b29b      	uxth	r3, r3
 8004096:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3328      	adds	r3, #40	; 0x28
 800409c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	3302      	adds	r3, #2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	441a      	add	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f006 fc37 	bl	800a94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 829b 	beq.w	8004624 <PCD_EP_ISR_Handler+0x5e4>
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8296 	bne.w	8004624 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004104:	b2da      	uxtb	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b292      	uxth	r2, r2
 800410c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004118:	e284      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800412a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800412c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d034      	beq.n	800419e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413c:	b29b      	uxth	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	3306      	adds	r3, #6
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004172:	b29b      	uxth	r3, r3
 8004174:	f004 fddd 	bl	8008d32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29a      	uxth	r2, r3
 8004180:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004184:	4013      	ands	r3, r2
 8004186:	823b      	strh	r3, [r7, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	8a3a      	ldrh	r2, [r7, #16]
 800418e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004192:	b292      	uxth	r2, r2
 8004194:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f006 fbac 	bl	800a8f4 <HAL_PCD_SetupStageCallback>
 800419c:	e242      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800419e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f280 823e 	bge.w	8004624 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041b4:	4013      	ands	r3, r2
 80041b6:	83bb      	strh	r3, [r7, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	8bba      	ldrh	r2, [r7, #28]
 80041be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041c2:	b292      	uxth	r2, r2
 80041c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	3306      	adds	r3, #6
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d019      	beq.n	800422e <PCD_EP_ISR_Handler+0x1ee>
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d015      	beq.n	800422e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004212:	b29b      	uxth	r3, r3
 8004214:	f004 fd8d 	bl	8008d32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	441a      	add	r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004226:	2100      	movs	r1, #0
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f006 fb75 	bl	800a918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 81f2 	bne.w	8004624 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424e:	b29b      	uxth	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	4413      	add	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d112      	bne.n	800428e <PCD_EP_ISR_Handler+0x24e>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004272:	b29a      	uxth	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29a      	uxth	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e02f      	b.n	80042ee <PCD_EP_ISR_Handler+0x2ae>
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b3e      	cmp	r3, #62	; 0x3e
 8004294:	d813      	bhi.n	80042be <PCD_EP_ISR_Handler+0x27e>
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <PCD_EP_ISR_Handler+0x270>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	3301      	adds	r3, #1
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e017      	b.n	80042ee <PCD_EP_ISR_Handler+0x2ae>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <PCD_EP_ISR_Handler+0x298>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	3b01      	subs	r3, #1
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	b29b      	uxth	r3, r3
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	b29b      	uxth	r3, r3
 80042e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	827b      	strh	r3, [r7, #18]
 8004300:	8a7b      	ldrh	r3, [r7, #18]
 8004302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004306:	827b      	strh	r3, [r7, #18]
 8004308:	8a7b      	ldrh	r3, [r7, #18]
 800430a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800430e:	827b      	strh	r3, [r7, #18]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	8a7b      	ldrh	r3, [r7, #18]
 8004316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]
 800432a:	e17b      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800433e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004342:	2b00      	cmp	r3, #0
 8004344:	f280 80ea 	bge.w	800451c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29a      	uxth	r2, r3
 800435a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800435e:	4013      	ands	r3, r2
 8004360:	853b      	strh	r3, [r7, #40]	; 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004376:	b292      	uxth	r2, r2
 8004378:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800437a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	7b1b      	ldrb	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d122      	bne.n	80043de <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	3306      	adds	r3, #6
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80043c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8087 	beq.w	80044d8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	6959      	ldr	r1, [r3, #20]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	88da      	ldrh	r2, [r3, #6]
 80043d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043d8:	f004 fcab 	bl	8008d32 <USB_ReadPMA>
 80043dc:	e07c      	b.n	80044d8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	78db      	ldrb	r3, [r3, #3]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d108      	bne.n	80043f8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80043e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043e8:	461a      	mov	r2, r3
 80043ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f927 	bl	8004640 <HAL_PCD_EP_DB_Receive>
 80043f2:	4603      	mov	r3, r0
 80043f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043f6:	e06f      	b.n	80044d8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	847b      	strh	r3, [r7, #34]	; 0x22
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d021      	beq.n	8004496 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	3302      	adds	r3, #2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800447c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800447e:	2b00      	cmp	r3, #0
 8004480:	d02a      	beq.n	80044d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	6959      	ldr	r1, [r3, #20]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	891a      	ldrh	r2, [r3, #8]
 800448e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004490:	f004 fc4f 	bl	8008d32 <USB_ReadPMA>
 8004494:	e020      	b.n	80044d8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	3306      	adds	r3, #6
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80044c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	6959      	ldr	r1, [r3, #20]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	895a      	ldrh	r2, [r3, #10]
 80044d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044d4:	f004 fc2d 	bl	8008d32 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044de:	441a      	add	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044ea:	441a      	add	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <PCD_EP_ISR_Handler+0x4c2>
 80044f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d206      	bcs.n	8004510 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f006 fa05 	bl	800a918 <HAL_PCD_DataOutStageCallback>
 800450e:	e005      	b.n	800451c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004516:	4618      	mov	r0, r3
 8004518:	f002 fc50 	bl	8006dbc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800451c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d07e      	beq.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004526:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004554:	843b      	strh	r3, [r7, #32]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	8c3b      	ldrh	r3, [r7, #32]
 8004566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d00c      	beq.n	8004594 <PCD_EP_ISR_Handler+0x554>
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004586:	2b02      	cmp	r3, #2
 8004588:	d146      	bne.n	8004618 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800458a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d141      	bne.n	8004618 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	3302      	adds	r3, #2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045bc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d906      	bls.n	80045d6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	8bfb      	ldrh	r3, [r7, #30]
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	619a      	str	r2, [r3, #24]
 80045d4:	e002      	b.n	80045dc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f006 f9af 	bl	800a94e <HAL_PCD_DataInStageCallback>
 80045f0:	e018      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	441a      	add	r2, r3
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	8bfb      	ldrh	r3, [r7, #30]
 8004604:	441a      	add	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004610:	4618      	mov	r0, r3
 8004612:	f002 fbd3 	bl	8006dbc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004616:	e005      	b.n	8004624 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800461a:	461a      	mov	r2, r3
 800461c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f91b 	bl	800485a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800462c:	b29b      	uxth	r3, r3
 800462e:	b21b      	sxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f6ff ad0a 	blt.w	800404a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3738      	adds	r7, #56	; 0x38
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d07e      	beq.n	8004756 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004660:	b29b      	uxth	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	3302      	adds	r3, #2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004680:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	8b7b      	ldrh	r3, [r7, #26]
 8004688:	429a      	cmp	r2, r3
 800468a:	d306      	bcc.n	800469a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	8b7b      	ldrh	r3, [r7, #26]
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	619a      	str	r2, [r3, #24]
 8004698:	e002      	b.n	80046a0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d123      	bne.n	80046f0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	833b      	strh	r3, [r7, #24]
 80046c4:	8b3b      	ldrh	r3, [r7, #24]
 80046c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046ca:	833b      	strh	r3, [r7, #24]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	8b3b      	ldrh	r3, [r7, #24]
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01f      	beq.n	800473a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	82fb      	strh	r3, [r7, #22]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	8afb      	ldrh	r3, [r7, #22]
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800473a:	8b7b      	ldrh	r3, [r7, #26]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8087 	beq.w	8004850 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6959      	ldr	r1, [r3, #20]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	891a      	ldrh	r2, [r3, #8]
 800474e:	8b7b      	ldrh	r3, [r7, #26]
 8004750:	f004 faef 	bl	8008d32 <USB_ReadPMA>
 8004754:	e07c      	b.n	8004850 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	3306      	adds	r3, #6
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800477e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	8b7b      	ldrh	r3, [r7, #26]
 8004786:	429a      	cmp	r2, r3
 8004788:	d306      	bcc.n	8004798 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	8b7b      	ldrh	r3, [r7, #26]
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	619a      	str	r2, [r3, #24]
 8004796:	e002      	b.n	800479e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d123      	bne.n	80047ee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	83fb      	strh	r3, [r7, #30]
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047c8:	83fb      	strh	r3, [r7, #30]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8bfb      	ldrh	r3, [r7, #30]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11f      	bne.n	8004838 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	83bb      	strh	r3, [r7, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	8bbb      	ldrh	r3, [r7, #28]
 8004824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004838:	8b7b      	ldrh	r3, [r7, #26]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6959      	ldr	r1, [r3, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	895a      	ldrh	r2, [r3, #10]
 800484a:	8b7b      	ldrh	r3, [r7, #26]
 800484c:	f004 fa71 	bl	8008d32 <USB_ReadPMA>
    }
  }

  return count;
 8004850:	8b7b      	ldrh	r3, [r7, #26]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b0a2      	sub	sp, #136	; 0x88
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 81c7 	beq.w	8004c02 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487c:	b29b      	uxth	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	3302      	adds	r3, #2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d907      	bls.n	80048bc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	e002      	b.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80b9 	bne.w	8004a3e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d126      	bne.n	8004922 <HAL_PCD_EP_DB_Transmit+0xc8>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	4413      	add	r3, r2
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	011a      	lsls	r2, r3, #4
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	4413      	add	r3, r2
 80048f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004906:	b29a      	uxth	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491a:	b29a      	uxth	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e01a      	b.n	8004958 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d116      	bne.n	8004958 <HAL_PCD_EP_DB_Transmit+0xfe>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	4413      	add	r3, r2
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	4413      	add	r3, r2
 800494c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2200      	movs	r2, #0
 8004956:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d126      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4413      	add	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e017      	b.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d113      	bne.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	4413      	add	r3, r2
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	011a      	lsls	r2, r3, #4
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f005 ffaf 	bl	800a94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 82d4 	beq.w	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	827b      	strh	r3, [r7, #18]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	8a7b      	ldrh	r3, [r7, #18]
 8004a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8013      	strh	r3, [r2, #0]
 8004a3c:	e2b2      	b.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d021      	beq.n	8004a8c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f040 8286 	bne.w	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004aae:	441a      	add	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d309      	bcc.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	621a      	str	r2, [r3, #32]
 8004ad2:	e015      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ae0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004aea:	e009      	b.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2200      	movs	r2, #0
 8004afe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d155      	bne.n	8004bb4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	4413      	add	r3, r2
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	011a      	lsls	r2, r3, #4
 8004b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b28:	4413      	add	r3, r2
 8004b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d112      	bne.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x302>
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e047      	b.n	8004bec <HAL_PCD_EP_DB_Transmit+0x392>
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b60:	d811      	bhi.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b74:	3301      	adds	r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e032      	b.n	8004bec <HAL_PCD_EP_DB_Transmit+0x392>
 8004b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x342>
 8004b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e01b      	b.n	8004bec <HAL_PCD_EP_DB_Transmit+0x392>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d117      	bne.n	8004bec <HAL_PCD_EP_DB_Transmit+0x392>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd0:	4413      	add	r3, r2
 8004bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	011a      	lsls	r2, r3, #4
 8004bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bdc:	4413      	add	r3, r2
 8004bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	6959      	ldr	r1, [r3, #20]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	891a      	ldrh	r2, [r3, #8]
 8004bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f004 f854 	bl	8008ca8 <USB_WritePMA>
 8004c00:	e1d0      	b.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	3306      	adds	r3, #6
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d307      	bcc.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	619a      	str	r2, [r3, #24]
 8004c48:	e002      	b.n	8004c50 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 80c4 	bne.w	8004de2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d126      	bne.n	8004cb0 <HAL_PCD_EP_DB_Transmit+0x456>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c76:	4413      	add	r3, r2
 8004c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	011a      	lsls	r2, r3, #4
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	4413      	add	r3, r2
 8004c84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e01a      	b.n	8004ce6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d116      	bne.n	8004ce6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	677b      	str	r3, [r7, #116]	; 0x74
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	4413      	add	r3, r2
 8004cce:	677b      	str	r3, [r7, #116]	; 0x74
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	011a      	lsls	r2, r3, #4
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	4413      	add	r3, r2
 8004cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d12f      	bne.n	8004d54 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	011a      	lsls	r2, r3, #4
 8004d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e017      	b.n	8004d84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d113      	bne.n	8004d84 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	4413      	add	r3, r2
 8004d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	011a      	lsls	r2, r3, #4
 8004d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d76:	4413      	add	r3, r2
 8004d78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d80:	2200      	movs	r2, #0
 8004d82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f005 fddf 	bl	800a94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 8104 	bne.w	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
 8004de0:	e0e0      	b.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d121      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	f040 80b4 	bne.w	8004fa4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e44:	441a      	add	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e52:	441a      	add	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d309      	bcc.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6a1a      	ldr	r2, [r3, #32]
 8004e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	621a      	str	r2, [r3, #32]
 8004e76:	e015      	b.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e8e:	e009      	b.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d155      	bne.n	8004f5e <HAL_PCD_EP_DB_Transmit+0x704>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec6:	4413      	add	r3, r2
 8004ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	011a      	lsls	r2, r3, #4
 8004ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d112      	bne.n	8004f06 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	e044      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x736>
 8004f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f08:	2b3e      	cmp	r3, #62	; 0x3e
 8004f0a:	d811      	bhi.n	8004f30 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	657b      	str	r3, [r7, #84]	; 0x54
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	3301      	adds	r3, #1
 8004f20:	657b      	str	r3, [r7, #84]	; 0x54
 8004f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e02f      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x736>
 8004f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	657b      	str	r3, [r7, #84]	; 0x54
 8004f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f42:	3b01      	subs	r3, #1
 8004f44:	657b      	str	r3, [r7, #84]	; 0x54
 8004f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e018      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x736>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d114      	bne.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x736>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f74:	4413      	add	r3, r2
 8004f76:	667b      	str	r3, [r7, #100]	; 0x64
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f80:	4413      	add	r3, r2
 8004f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f86:	663b      	str	r3, [r7, #96]	; 0x60
 8004f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6959      	ldr	r1, [r3, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	895a      	ldrh	r2, [r3, #10]
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f003 fe82 	bl	8008ca8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbe:	823b      	strh	r3, [r7, #16]
 8004fc0:	8a3b      	ldrh	r3, [r7, #16]
 8004fc2:	f083 0310 	eor.w	r3, r3, #16
 8004fc6:	823b      	strh	r3, [r7, #16]
 8004fc8:	8a3b      	ldrh	r3, [r7, #16]
 8004fca:	f083 0320 	eor.w	r3, r3, #32
 8004fce:	823b      	strh	r3, [r7, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	8a3b      	ldrh	r3, [r7, #16]
 8004fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3788      	adds	r7, #136	; 0x88
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005010:	897b      	ldrh	r3, [r7, #10]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800501c:	897b      	ldrh	r3, [r7, #10]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e009      	b.n	8005048 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005034:	897a      	ldrh	r2, [r7, #10]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2200      	movs	r2, #0
 8005052:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	b29a      	uxth	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	80da      	strh	r2, [r3, #6]
 800505c:	e00b      	b.n	8005076 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2201      	movs	r2, #1
 8005062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	b29a      	uxth	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	b29a      	uxth	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
	...

08005084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e272      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8087 	beq.w	80051b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a4:	4b92      	ldr	r3, [pc, #584]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d00c      	beq.n	80050ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050b0:	4b8f      	ldr	r3, [pc, #572]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d112      	bne.n	80050e2 <HAL_RCC_OscConfig+0x5e>
 80050bc:	4b8c      	ldr	r3, [pc, #560]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d10b      	bne.n	80050e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ca:	4b89      	ldr	r3, [pc, #548]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d06c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x12c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d168      	bne.n	80051b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e24c      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x76>
 80050ec:	4b80      	ldr	r3, [pc, #512]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a7f      	ldr	r2, [pc, #508]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80050f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e02e      	b.n	8005158 <HAL_RCC_OscConfig+0xd4>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x98>
 8005102:	4b7b      	ldr	r3, [pc, #492]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7a      	ldr	r2, [pc, #488]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b78      	ldr	r3, [pc, #480]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a77      	ldr	r2, [pc, #476]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e01d      	b.n	8005158 <HAL_RCC_OscConfig+0xd4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0xbc>
 8005126:	4b72      	ldr	r3, [pc, #456]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a71      	ldr	r2, [pc, #452]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800512c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6e      	ldr	r2, [pc, #440]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0xd4>
 8005140:	4b6b      	ldr	r3, [pc, #428]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6a      	ldr	r2, [pc, #424]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a67      	ldr	r2, [pc, #412]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7fc ffc4 	bl	80020ec <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fc ffc0 	bl	80020ec <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e200      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b5d      	ldr	r3, [pc, #372]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0xe4>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fc ffb0 	bl	80020ec <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fc ffac 	bl	80020ec <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e1ec      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x10c>
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d063      	beq.n	8005286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051be:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051ca:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d11c      	bne.n	8005210 <HAL_RCC_OscConfig+0x18c>
 80051d6:	4b46      	ldr	r3, [pc, #280]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d116      	bne.n	8005210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e2:	4b43      	ldr	r3, [pc, #268]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_RCC_OscConfig+0x176>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e1c0      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fa:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4939      	ldr	r1, [pc, #228]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520e:	e03a      	b.n	8005286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005218:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <HAL_RCC_OscConfig+0x270>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fc ff65 	bl	80020ec <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005226:	f7fc ff61 	bl	80020ec <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1a1      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005238:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005244:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4927      	ldr	r1, [pc, #156]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]
 8005258:	e015      	b.n	8005286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525a:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_RCC_OscConfig+0x270>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fc ff44 	bl	80020ec <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005268:	f7fc ff40 	bl	80020ec <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e180      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d03a      	beq.n	8005308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d019      	beq.n	80052ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a0:	f7fc ff24 	bl	80020ec <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fc ff20 	bl	80020ec <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e160      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCC_OscConfig+0x26c>)
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052c6:	2001      	movs	r0, #1
 80052c8:	f000 fac6 	bl	8005858 <RCC_Delay>
 80052cc:	e01c      	b.n	8005308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d4:	f7fc ff0a 	bl	80020ec <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052da:	e00f      	b.n	80052fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fc ff06 	bl	80020ec <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d908      	bls.n	80052fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e146      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	42420000 	.word	0x42420000
 80052f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	4b92      	ldr	r3, [pc, #584]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e9      	bne.n	80052dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a6 	beq.w	8005462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531a:	4b8b      	ldr	r3, [pc, #556]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	4b88      	ldr	r3, [pc, #544]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4a87      	ldr	r2, [pc, #540]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	61d3      	str	r3, [r2, #28]
 8005332:	4b85      	ldr	r3, [pc, #532]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005342:	4b82      	ldr	r3, [pc, #520]	; (800554c <HAL_RCC_OscConfig+0x4c8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d118      	bne.n	8005380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534e:	4b7f      	ldr	r3, [pc, #508]	; (800554c <HAL_RCC_OscConfig+0x4c8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7e      	ldr	r2, [pc, #504]	; (800554c <HAL_RCC_OscConfig+0x4c8>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535a:	f7fc fec7 	bl	80020ec <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005362:	f7fc fec3 	bl	80020ec <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b64      	cmp	r3, #100	; 0x64
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e103      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b75      	ldr	r3, [pc, #468]	; (800554c <HAL_RCC_OscConfig+0x4c8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d106      	bne.n	8005396 <HAL_RCC_OscConfig+0x312>
 8005388:	4b6f      	ldr	r3, [pc, #444]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	4a6e      	ldr	r2, [pc, #440]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	6213      	str	r3, [r2, #32]
 8005394:	e02d      	b.n	80053f2 <HAL_RCC_OscConfig+0x36e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x334>
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4a69      	ldr	r2, [pc, #420]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6213      	str	r3, [r2, #32]
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4a66      	ldr	r2, [pc, #408]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	6213      	str	r3, [r2, #32]
 80053b6:	e01c      	b.n	80053f2 <HAL_RCC_OscConfig+0x36e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b05      	cmp	r3, #5
 80053be:	d10c      	bne.n	80053da <HAL_RCC_OscConfig+0x356>
 80053c0:	4b61      	ldr	r3, [pc, #388]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4a60      	ldr	r2, [pc, #384]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053c6:	f043 0304 	orr.w	r3, r3, #4
 80053ca:	6213      	str	r3, [r2, #32]
 80053cc:	4b5e      	ldr	r3, [pc, #376]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4a5d      	ldr	r2, [pc, #372]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	6213      	str	r3, [r2, #32]
 80053d8:	e00b      	b.n	80053f2 <HAL_RCC_OscConfig+0x36e>
 80053da:	4b5b      	ldr	r3, [pc, #364]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4a5a      	ldr	r2, [pc, #360]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6213      	str	r3, [r2, #32]
 80053e6:	4b58      	ldr	r3, [pc, #352]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	4a57      	ldr	r2, [pc, #348]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d015      	beq.n	8005426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fc fe77 	bl	80020ec <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005400:	e00a      	b.n	8005418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fc fe73 	bl	80020ec <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0b1      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ee      	beq.n	8005402 <HAL_RCC_OscConfig+0x37e>
 8005424:	e014      	b.n	8005450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005426:	f7fc fe61 	bl	80020ec <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fe5d 	bl	80020ec <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e09b      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005444:	4b40      	ldr	r3, [pc, #256]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ee      	bne.n	800542e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4b3c      	ldr	r3, [pc, #240]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8087 	beq.w	800557a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800546c:	4b36      	ldr	r3, [pc, #216]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d061      	beq.n	800553c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d146      	bne.n	800550e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005480:	4b33      	ldr	r3, [pc, #204]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fc fe31 	bl	80020ec <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7fc fe2d 	bl	80020ec <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e06d      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d108      	bne.n	80054c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	4921      	ldr	r1, [pc, #132]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a19      	ldr	r1, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	430b      	orrs	r3, r1
 80054da:	491b      	ldr	r1, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fc fe01 	bl	80020ec <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fc fdfd 	bl	80020ec <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e03d      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x46a>
 800550c:	e035      	b.n	800557a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCC_OscConfig+0x4cc>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fc fdea 	bl	80020ec <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fc fde6 	bl	80020ec <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e026      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCC_OscConfig+0x4c4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x498>
 800553a:	e01e      	b.n	800557a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e019      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
 8005548:	40021000 	.word	0x40021000
 800554c:	40007000 	.word	0x40007000
 8005550:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_OscConfig+0x500>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	429a      	cmp	r2, r3
 8005566:	d106      	bne.n	8005576 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d001      	beq.n	800557a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000

08005588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0d0      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	4b6a      	ldr	r3, [pc, #424]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d910      	bls.n	80055cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b67      	ldr	r3, [pc, #412]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 0207 	bic.w	r2, r3, #7
 80055b2:	4965      	ldr	r1, [pc, #404]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b63      	ldr	r3, [pc, #396]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0b8      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a58      	ldr	r2, [pc, #352]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a52      	ldr	r2, [pc, #328]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005608:	4b50      	ldr	r3, [pc, #320]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	494d      	ldr	r1, [pc, #308]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d040      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d107      	bne.n	800563e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562e:	4b47      	ldr	r3, [pc, #284]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d115      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e07f      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e073      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005656:	4b3d      	ldr	r3, [pc, #244]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e06b      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005666:	4b39      	ldr	r3, [pc, #228]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f023 0203 	bic.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4936      	ldr	r1, [pc, #216]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005678:	f7fc fd38 	bl	80020ec <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	e00a      	b.n	8005696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005680:	f7fc fd34 	bl	80020ec <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e053      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005696:	4b2d      	ldr	r3, [pc, #180]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 020c 	and.w	r2, r3, #12
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d1eb      	bne.n	8005680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d210      	bcs.n	80056d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 0207 	bic.w	r2, r3, #7
 80056be:	4922      	ldr	r1, [pc, #136]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <HAL_RCC_ClockConfig+0x1c0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e032      	b.n	800573e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e4:	4b19      	ldr	r3, [pc, #100]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4916      	ldr	r1, [pc, #88]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	490e      	ldr	r1, [pc, #56]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005716:	f000 f821 	bl	800575c <HAL_RCC_GetSysClockFreq>
 800571a:	4602      	mov	r2, r0
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_ClockConfig+0x1c4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	490a      	ldr	r1, [pc, #40]	; (8005750 <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	5ccb      	ldrb	r3, [r1, r3]
 800572a:	fa22 f303 	lsr.w	r3, r2, r3
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <HAL_RCC_ClockConfig+0x1cc>)
 8005730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCC_ClockConfig+0x1d0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fc fc96 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40022000 	.word	0x40022000
 800574c:	40021000 	.word	0x40021000
 8005750:	0800ef8c 	.word	0x0800ef8c
 8005754:	20000008 	.word	0x20000008
 8005758:	2000000c 	.word	0x2000000c

0800575c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800575c:	b490      	push	{r4, r7}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005762:	4b29      	ldr	r3, [pc, #164]	; (8005808 <HAL_RCC_GetSysClockFreq+0xac>)
 8005764:	1d3c      	adds	r4, r7, #4
 8005766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800576c:	f240 2301 	movw	r3, #513	; 0x201
 8005770:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b04      	cmp	r3, #4
 8005794:	d002      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x40>
 8005796:	2b08      	cmp	r3, #8
 8005798:	d003      	beq.n	80057a2 <HAL_RCC_GetSysClockFreq+0x46>
 800579a:	e02b      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800579c:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <HAL_RCC_GetSysClockFreq+0xb4>)
 800579e:	623b      	str	r3, [r7, #32]
      break;
 80057a0:	e02b      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	0c9b      	lsrs	r3, r3, #18
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	3328      	adds	r3, #40	; 0x28
 80057ac:	443b      	add	r3, r7
 80057ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80057b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_RCC_GetSysClockFreq+0xb0>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	0c5b      	lsrs	r3, r3, #17
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	3328      	adds	r3, #40	; 0x28
 80057ca:	443b      	add	r3, r7
 80057cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <HAL_RCC_GetSysClockFreq+0xb4>)
 80057d6:	fb03 f202 	mul.w	r2, r3, r2
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
 80057e2:	e004      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4a0b      	ldr	r2, [pc, #44]	; (8005814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	623b      	str	r3, [r7, #32]
      break;
 80057f2:	e002      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057f6:	623b      	str	r3, [r7, #32]
      break;
 80057f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057fa:	6a3b      	ldr	r3, [r7, #32]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3728      	adds	r7, #40	; 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bc90      	pop	{r4, r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	0800ef34 	.word	0x0800ef34
 800580c:	40021000 	.word	0x40021000
 8005810:	00f42400 	.word	0x00f42400
 8005814:	003d0900 	.word	0x003d0900
 8005818:	007a1200 	.word	0x007a1200

0800581c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005820:	4b02      	ldr	r3, [pc, #8]	; (800582c <HAL_RCC_GetHCLKFreq+0x10>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	20000008 	.word	0x20000008

08005830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005834:	f7ff fff2 	bl	800581c <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000
 8005854:	0800ef9c 	.word	0x0800ef9c

08005858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <RCC_Delay+0x34>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <RCC_Delay+0x38>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0a5b      	lsrs	r3, r3, #9
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005874:	bf00      	nop
  }
  while (Delay --);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f9      	bne.n	8005874 <RCC_Delay+0x1c>
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	20000008 	.word	0x20000008
 8005890:	10624dd3 	.word	0x10624dd3

08005894 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d07d      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058b0:	2300      	movs	r3, #0
 80058b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b4:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4a4b      	ldr	r2, [pc, #300]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ca:	61d3      	str	r3, [r2, #28]
 80058cc:	4b49      	ldr	r3, [pc, #292]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d118      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e8:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a42      	ldr	r2, [pc, #264]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f4:	f7fc fbfa 	bl	80020ec <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	e008      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fc:	f7fc fbf6 	bl	80020ec <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e06d      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590e:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800591a:	4b36      	ldr	r3, [pc, #216]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02e      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	429a      	cmp	r2, r3
 8005936:	d027      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005938:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005942:	4b2e      	ldr	r3, [pc, #184]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800594e:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d014      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fc fbc5 	bl	80020ec <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005964:	e00a      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fc fbc1 	bl	80020ec <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e036      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0ee      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4917      	ldr	r1, [pc, #92]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	4313      	orrs	r3, r2
 8005998:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059b8:	4b0e      	ldr	r3, [pc, #56]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	490b      	ldr	r1, [pc, #44]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4904      	ldr	r1, [pc, #16]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40007000 	.word	0x40007000
 80059fc:	42420440 	.word	0x42420440

08005a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e041      	b.n	8005a96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc f982 	bl	8001d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 f98e 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_TIM_PWM_Start+0x24>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	bf14      	ite	ne
 8005abc:	2301      	movne	r3, #1
 8005abe:	2300      	moveq	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	e022      	b.n	8005b0a <HAL_TIM_PWM_Start+0x6a>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d109      	bne.n	8005ade <HAL_TIM_PWM_Start+0x3e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	e015      	b.n	8005b0a <HAL_TIM_PWM_Start+0x6a>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d109      	bne.n	8005af8 <HAL_TIM_PWM_Start+0x58>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e008      	b.n	8005b0a <HAL_TIM_PWM_Start+0x6a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e05e      	b.n	8005bd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0x82>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b20:	e013      	b.n	8005b4a <HAL_TIM_PWM_Start+0xaa>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0x92>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b30:	e00b      	b.n	8005b4a <HAL_TIM_PWM_Start+0xaa>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xa2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	e003      	b.n	8005b4a <HAL_TIM_PWM_Start+0xaa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 faee 	bl	8006134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <HAL_TIM_PWM_Start+0x138>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d107      	bne.n	8005b72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <HAL_TIM_PWM_Start+0x138>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_TIM_PWM_Start+0xfa>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d009      	beq.n	8005b9a <HAL_TIM_PWM_Start+0xfa>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <HAL_TIM_PWM_Start+0x13c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_TIM_PWM_Start+0xfa>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a12      	ldr	r2, [pc, #72]	; (8005be0 <HAL_TIM_PWM_Start+0x140>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b06      	cmp	r3, #6
 8005baa:	d010      	beq.n	8005bce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	e007      	b.n	8005bce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800

08005be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0ac      	b.n	8005d58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	f200 809f 	bhi.w	8005d4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005d4d 	.word	0x08005d4d
 8005c1c:	08005d4d 	.word	0x08005d4d
 8005c20:	08005d4d 	.word	0x08005d4d
 8005c24:	08005c89 	.word	0x08005c89
 8005c28:	08005d4d 	.word	0x08005d4d
 8005c2c:	08005d4d 	.word	0x08005d4d
 8005c30:	08005d4d 	.word	0x08005d4d
 8005c34:	08005ccb 	.word	0x08005ccb
 8005c38:	08005d4d 	.word	0x08005d4d
 8005c3c:	08005d4d 	.word	0x08005d4d
 8005c40:	08005d4d 	.word	0x08005d4d
 8005c44:	08005d0b 	.word	0x08005d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f8e8 	bl	8005e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0208 	orr.w	r2, r2, #8
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0204 	bic.w	r2, r2, #4
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	619a      	str	r2, [r3, #24]
      break;
 8005c86:	e062      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f92e 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	619a      	str	r2, [r3, #24]
      break;
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f977 	bl	8005fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0208 	orr.w	r2, r2, #8
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0204 	bic.w	r2, r2, #4
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	61da      	str	r2, [r3, #28]
      break;
 8005d08:	e021      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f9c1 	bl	8006098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	021a      	lsls	r2, r3, #8
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	61da      	str	r2, [r3, #28]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7e:	d007      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <TIM_Base_SetConfig+0xbc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0x30>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <TIM_Base_SetConfig+0xc0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00b      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d007      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <TIM_Base_SetConfig+0xbc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_Base_SetConfig+0x62>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <TIM_Base_SetConfig+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <TIM_Base_SetConfig+0xb8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800

08005e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0302 	bic.w	r3, r3, #2
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10c      	bne.n	8005e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0308 	bic.w	r3, r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0304 	bic.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1d      	ldr	r2, [pc, #116]	; (8005fc0 <TIM_OC2_SetConfig+0xd0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10d      	bne.n	8005f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a14      	ldr	r2, [pc, #80]	; (8005fc0 <TIM_OC2_SetConfig+0xd0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	40012c00 	.word	0x40012c00

08005fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <TIM_OC3_SetConfig+0xd0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d10d      	bne.n	800603e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <TIM_OC3_SetConfig+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d113      	bne.n	800606e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00

08006098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <TIM_OC4_SetConfig+0x98>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d109      	bne.n	800610c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00

08006134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2201      	movs	r2, #1
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	fa01 f303 	lsl.w	r3, r1, r3
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e046      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a16      	ldr	r2, [pc, #88]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a10      	ldr	r2, [pc, #64]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800

08006238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006238:	b084      	sub	sp, #16
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	f107 0014 	add.w	r0, r7, #20
 8006246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	b004      	add	sp, #16
 8006256:	4770      	bx	lr

08006258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006268:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800626c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr

08006284 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800628c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006290:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	b29b      	uxth	r3, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4013      	ands	r3, r2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062d0:	b084      	sub	sp, #16
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	f107 0014 	add.w	r0, r7, #20
 80062de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	b004      	add	sp, #16
 800630e:	4770      	bx	lr

08006310 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006310:	b480      	push	{r7}
 8006312:	b09b      	sub	sp, #108	; 0x6c
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	78db      	ldrb	r3, [r3, #3]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d81f      	bhi.n	8006382 <USB_ActivateEndpoint+0x72>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <USB_ActivateEndpoint+0x38>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006359 	.word	0x08006359
 800634c:	08006375 	.word	0x08006375
 8006350:	0800638b 	.word	0x0800638b
 8006354:	08006367 	.word	0x08006367
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006358:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800635c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006360:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006364:	e012      	b.n	800638c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006366:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800636a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800636e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006372:	e00b      	b.n	800638c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006374:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800637c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006380:	e004      	b.n	800638c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006388:	e000      	b.n	800638c <USB_ActivateEndpoint+0x7c>
      break;
 800638a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	441a      	add	r2, r3
 8006396:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800639a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	7b1b      	ldrb	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 8149 	bne.w	8006690 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8084 	beq.w	8006510 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	88db      	ldrh	r3, [r3, #6]
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	81fb      	strh	r3, [r7, #14]
 800644a:	89fb      	ldrh	r3, [r7, #14]
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01b      	beq.n	800648c <USB_ActivateEndpoint+0x17c>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	81bb      	strh	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	89bb      	ldrh	r3, [r7, #12]
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d020      	beq.n	80064d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064aa:	813b      	strh	r3, [r7, #8]
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	f083 0320 	eor.w	r3, r3, #32
 80064b2:	813b      	strh	r3, [r7, #8]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	893b      	ldrh	r3, [r7, #8]
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
 80064d4:	e27f      	b.n	80069d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ec:	817b      	strh	r3, [r7, #10]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	897b      	ldrh	r3, [r7, #10]
 80064fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]
 800650e:	e262      	b.n	80069d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	4413      	add	r3, r2
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	011a      	lsls	r2, r3, #4
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	4413      	add	r3, r2
 800652e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	4413      	add	r3, r2
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	011a      	lsls	r2, r3, #4
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	4413      	add	r3, r2
 8006562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d112      	bne.n	8006596 <USB_ActivateEndpoint+0x286>
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800657a:	b29a      	uxth	r2, r3
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658e:	b29a      	uxth	r2, r3
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e02f      	b.n	80065f6 <USB_ActivateEndpoint+0x2e6>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b3e      	cmp	r3, #62	; 0x3e
 800659c:	d813      	bhi.n	80065c6 <USB_ActivateEndpoint+0x2b6>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <USB_ActivateEndpoint+0x2a8>
 80065b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b4:	3301      	adds	r3, #1
 80065b6:	663b      	str	r3, [r7, #96]	; 0x60
 80065b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e017      	b.n	80065f6 <USB_ActivateEndpoint+0x2e6>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	663b      	str	r3, [r7, #96]	; 0x60
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <USB_ActivateEndpoint+0x2d0>
 80065da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065dc:	3b01      	subs	r3, #1
 80065de:	663b      	str	r3, [r7, #96]	; 0x60
 80065e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	83fb      	strh	r3, [r7, #30]
 8006604:	8bfb      	ldrh	r3, [r7, #30]
 8006606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01b      	beq.n	8006646 <USB_ActivateEndpoint+0x336>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	83bb      	strh	r3, [r7, #28]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	8bbb      	ldrh	r3, [r7, #28]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	837b      	strh	r3, [r7, #26]
 800665e:	8b7b      	ldrh	r3, [r7, #26]
 8006660:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006664:	837b      	strh	r3, [r7, #26]
 8006666:	8b7b      	ldrh	r3, [r7, #26]
 8006668:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800666c:	837b      	strh	r3, [r7, #26]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	8b7b      	ldrh	r3, [r7, #26]
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
 800668e:	e1a2      	b.n	80069d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066dc:	4413      	add	r3, r2
 80066de:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	011a      	lsls	r2, r3, #4
 80066e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ee:	657b      	str	r3, [r7, #84]	; 0x54
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	891b      	ldrh	r3, [r3, #8]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	653b      	str	r3, [r7, #80]	; 0x50
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006710:	4413      	add	r3, r2
 8006712:	653b      	str	r3, [r7, #80]	; 0x50
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	011a      	lsls	r2, r3, #4
 800671a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671c:	4413      	add	r3, r2
 800671e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	895b      	ldrh	r3, [r3, #10]
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	b29b      	uxth	r3, r3
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8091 	bne.w	8006860 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800674c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800674e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01b      	beq.n	800678e <USB_ActivateEndpoint+0x47e>
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800677a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	873b      	strh	r3, [r7, #56]	; 0x38
 800679c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01b      	beq.n	80067de <USB_ActivateEndpoint+0x4ce>
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006804:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	867b      	strh	r3, [r7, #50]	; 0x32
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800684a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685a:	b29b      	uxth	r3, r3
 800685c:	8013      	strh	r3, [r2, #0]
 800685e:	e0ba      	b.n	80069d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006870:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01d      	beq.n	80068b8 <USB_ActivateEndpoint+0x5a8>
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01d      	beq.n	8006910 <USB_ActivateEndpoint+0x600>
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	78db      	ldrb	r3, [r3, #3]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d024      	beq.n	8006962 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006932:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006936:	f083 0320 	eor.w	r3, r3, #32
 800693a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800694c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695c:	b29b      	uxth	r3, r3
 800695e:	8013      	strh	r3, [r2, #0]
 8006960:	e01d      	b.n	800699e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80069d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80069da:	4618      	mov	r0, r3
 80069dc:	376c      	adds	r7, #108	; 0x6c
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b08d      	sub	sp, #52	; 0x34
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	7b1b      	ldrb	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 808e 	bne.w	8006b14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d044      	beq.n	8006a8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	81bb      	strh	r3, [r7, #12]
 8006a0e:	89bb      	ldrh	r3, [r7, #12]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <USB_DeactivateEndpoint+0x6c>
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	817b      	strh	r3, [r7, #10]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	897b      	ldrh	r3, [r7, #10]
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a66:	813b      	strh	r3, [r7, #8]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	893b      	ldrh	r3, [r7, #8]
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
 8006a88:	e192      	b.n	8006db0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	827b      	strh	r3, [r7, #18]
 8006a98:	8a7b      	ldrh	r3, [r7, #18]
 8006a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01b      	beq.n	8006ada <USB_DeactivateEndpoint+0xf6>
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	823b      	strh	r3, [r7, #16]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	8a3b      	ldrh	r3, [r7, #16]
 8006ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	81fb      	strh	r3, [r7, #14]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]
 8006b12:	e14d      	b.n	8006db0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 80a5 	bne.w	8006c68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	843b      	strh	r3, [r7, #32]
 8006b2c:	8c3b      	ldrh	r3, [r7, #32]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01b      	beq.n	8006b6e <USB_DeactivateEndpoint+0x18a>
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	83fb      	strh	r3, [r7, #30]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	8bfb      	ldrh	r3, [r7, #30]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	83bb      	strh	r3, [r7, #28]
 8006b7c:	8bbb      	ldrh	r3, [r7, #28]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01b      	beq.n	8006bbe <USB_DeactivateEndpoint+0x1da>
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9c:	837b      	strh	r3, [r7, #26]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	8b7b      	ldrh	r3, [r7, #26]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd4:	833b      	strh	r3, [r7, #24]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	441a      	add	r2, r3
 8006be0:	8b3b      	ldrh	r3, [r7, #24]
 8006be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	82fb      	strh	r3, [r7, #22]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	8afb      	ldrh	r3, [r7, #22]
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	82bb      	strh	r3, [r7, #20]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	8abb      	ldrh	r3, [r7, #20]
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]
 8006c66:	e0a3      	b.n	8006db0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01b      	beq.n	8006cb8 <USB_DeactivateEndpoint+0x2d4>
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006cc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01b      	beq.n	8006d08 <USB_DeactivateEndpoint+0x324>
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3734      	adds	r7, #52	; 0x34
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0cc      	sub	sp, #304	; 0x130
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dca:	6018      	str	r0, [r3, #0]
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	f041 817d 	bne.w	80080e2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d908      	bls.n	8006e16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006e14:	e007      	b.n	8006e26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	7b1b      	ldrb	r3, [r3, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d152      	bne.n	8006edc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6959      	ldr	r1, [r3, #20]
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	88da      	ldrh	r2, [r3, #6]
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e5c:	6800      	ldr	r0, [r0, #0]
 8006e5e:	f001 ff23 	bl	8008ca8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e6e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e94:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	011a      	lsls	r2, r3, #4
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	f001 b8b5 	b.w	8008046 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	78db      	ldrb	r3, [r3, #3]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	f040 84c6 	bne.w	800787a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	f240 8443 	bls.w	8007792 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 823e 	beq.w	800742a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006fb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 809a 	bne.w	8007108 <USB_EPStartXfer+0x34c>
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007002:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007006:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	440a      	add	r2, r1
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	011a      	lsls	r2, r3, #4
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4413      	add	r3, r2
 800702a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007032:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703c:	2b00      	cmp	r3, #0
 800703e:	d122      	bne.n	8007086 <USB_EPStartXfer+0x2ca>
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007052:	b29a      	uxth	r2, r3
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e079      	b.n	800717a <USB_EPStartXfer+0x3be>
 8007086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708a:	2b3e      	cmp	r3, #62	; 0x3e
 800708c:	d81b      	bhi.n	80070c6 <USB_EPStartXfer+0x30a>
 800708e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <USB_EPStartXfer+0x2f2>
 80070a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80070ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e059      	b.n	800717a <USB_EPStartXfer+0x3be>
 80070c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <USB_EPStartXfer+0x32a>
 80070dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070e0:	3b01      	subs	r3, #1
 80070e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80070e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e038      	b.n	800717a <USB_EPStartXfer+0x3be>
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d130      	bne.n	800717a <USB_EPStartXfer+0x3be>
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007136:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	440a      	add	r2, r1
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	011a      	lsls	r2, r3, #4
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4413      	add	r3, r2
 800715a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	b29a      	uxth	r2, r3
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	895b      	ldrh	r3, [r3, #10]
 8007186:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	b29b      	uxth	r3, r3
 800719c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071a8:	6800      	ldr	r0, [r0, #0]
 80071aa:	f001 fd7d 	bl	8008ca8 <USB_WritePMA>
            ep->xfer_buff += len;
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071be:	441a      	add	r2, r3
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6a1a      	ldr	r2, [r3, #32]
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d90f      	bls.n	8007208 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f8:	1ad2      	subs	r2, r2, r3
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	621a      	str	r2, [r3, #32]
 8007206:	e00e      	b.n	8007226 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 809a 	bne.w	800736c <USB_EPStartXfer+0x5b0>
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007240:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007244:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725a:	b29b      	uxth	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007262:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007266:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800726a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	440a      	add	r2, r1
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	011a      	lsls	r2, r3, #4
 8007282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007286:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4413      	add	r3, r2
 800728e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d122      	bne.n	80072ea <USB_EPStartXfer+0x52e>
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e083      	b.n	80073f2 <USB_EPStartXfer+0x636>
 80072ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d81b      	bhi.n	800732a <USB_EPStartXfer+0x56e>
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <USB_EPStartXfer+0x556>
 8007308:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800730c:	3301      	adds	r3, #1
 800730e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007312:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29a      	uxth	r2, r3
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e063      	b.n	80073f2 <USB_EPStartXfer+0x636>
 800732a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2b00      	cmp	r3, #0
 800733e:	d104      	bne.n	800734a <USB_EPStartXfer+0x58e>
 8007340:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007344:	3b01      	subs	r3, #1
 8007346:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800734a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735c:	b29a      	uxth	r2, r3
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e042      	b.n	80073f2 <USB_EPStartXfer+0x636>
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d13a      	bne.n	80073f2 <USB_EPStartXfer+0x636>
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007384:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007388:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4619      	mov	r1, r3
 80073a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80073aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	440a      	add	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	891b      	ldrh	r3, [r3, #8]
 80073fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6959      	ldr	r1, [r3, #20]
 800740e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007412:	b29b      	uxth	r3, r3
 8007414:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007418:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800741c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007420:	6800      	ldr	r0, [r0, #0]
 8007422:	f001 fc41 	bl	8008ca8 <USB_WritePMA>
 8007426:	f000 be0e 	b.w	8008046 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d16d      	bne.n	8007516 <USB_EPStartXfer+0x75a>
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	64bb      	str	r3, [r7, #72]	; 0x48
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007454:	b29b      	uxth	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	4413      	add	r3, r2
 800745c:	64bb      	str	r3, [r7, #72]	; 0x48
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	011a      	lsls	r2, r3, #4
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	4413      	add	r3, r2
 8007470:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007474:	647b      	str	r3, [r7, #68]	; 0x44
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d112      	bne.n	80074a4 <USB_EPStartXfer+0x6e8>
 800747e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007488:	b29a      	uxth	r2, r3
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e063      	b.n	800756c <USB_EPStartXfer+0x7b0>
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	2b3e      	cmp	r3, #62	; 0x3e
 80074aa:	d817      	bhi.n	80074dc <USB_EPStartXfer+0x720>
 80074ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <USB_EPStartXfer+0x710>
 80074c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074c6:	3301      	adds	r3, #1
 80074c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e047      	b.n	800756c <USB_EPStartXfer+0x7b0>
 80074dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <USB_EPStartXfer+0x740>
 80074f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074f6:	3b01      	subs	r3, #1
 80074f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007500:	b29b      	uxth	r3, r3
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	b29b      	uxth	r3, r3
 8007506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800750a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750e:	b29a      	uxth	r2, r3
 8007510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e02a      	b.n	800756c <USB_EPStartXfer+0x7b0>
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d122      	bne.n	800756c <USB_EPStartXfer+0x7b0>
 8007526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	653b      	str	r3, [r7, #80]	; 0x50
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	4413      	add	r3, r2
 8007548:	653b      	str	r3, [r7, #80]	; 0x50
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755a:	4413      	add	r3, r2
 800755c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007566:	b29a      	uxth	r2, r3
 8007568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800756c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	891b      	ldrh	r3, [r3, #8]
 8007578:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007592:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007596:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f001 fb84 	bl	8008ca8 <USB_WritePMA>
            ep->xfer_buff += len;
 80075a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695a      	ldr	r2, [r3, #20]
 80075ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b0:	441a      	add	r2, r3
 80075b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d90f      	bls.n	80075fa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	621a      	str	r2, [r3, #32]
 80075f8:	e00e      	b.n	8007618 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2200      	movs	r2, #0
 8007616:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d16d      	bne.n	8007710 <USB_EPStartXfer+0x954>
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764e:	b29b      	uxth	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	4413      	add	r3, r2
 8007656:	63bb      	str	r3, [r7, #56]	; 0x38
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	011a      	lsls	r2, r3, #4
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	4413      	add	r3, r2
 800766a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d112      	bne.n	800769e <USB_EPStartXfer+0x8e2>
 8007678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007682:	b29a      	uxth	r2, r3
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007696:	b29a      	uxth	r2, r3
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e05d      	b.n	800775a <USB_EPStartXfer+0x99e>
 800769e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a2:	2b3e      	cmp	r3, #62	; 0x3e
 80076a4:	d817      	bhi.n	80076d6 <USB_EPStartXfer+0x91a>
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <USB_EPStartXfer+0x90a>
 80076bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076c0:	3301      	adds	r3, #1
 80076c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e041      	b.n	800775a <USB_EPStartXfer+0x99e>
 80076d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <USB_EPStartXfer+0x93a>
 80076ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076f0:	3b01      	subs	r3, #1
 80076f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007708:	b29a      	uxth	r2, r3
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e024      	b.n	800775a <USB_EPStartXfer+0x99e>
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11c      	bne.n	800775a <USB_EPStartXfer+0x99e>
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772e:	b29b      	uxth	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007734:	4413      	add	r3, r2
 8007736:	643b      	str	r3, [r7, #64]	; 0x40
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	011a      	lsls	r2, r3, #4
 8007746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007748:	4413      	add	r3, r2
 800774a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	b29a      	uxth	r2, r3
 8007756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007758:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	895b      	ldrh	r3, [r3, #10]
 8007766:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6959      	ldr	r1, [r3, #20]
 8007776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777a:	b29b      	uxth	r3, r3
 800777c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007780:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007784:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007788:	6800      	ldr	r0, [r0, #0]
 800778a:	f001 fa8d 	bl	8008ca8 <USB_WritePMA>
 800778e:	f000 bc5a 	b.w	8008046 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80077cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	441a      	add	r2, r3
 80077e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80077ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007818:	b29b      	uxth	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800781e:	4413      	add	r3, r2
 8007820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	011a      	lsls	r2, r3, #4
 8007830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007832:	4413      	add	r3, r2
 8007834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007838:	65bb      	str	r3, [r7, #88]	; 0x58
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	b29a      	uxth	r2, r3
 8007840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007842:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	891b      	ldrh	r3, [r3, #8]
 8007850:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6959      	ldr	r1, [r3, #20]
 8007860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007864:	b29b      	uxth	r3, r3
 8007866:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800786a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800786e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007872:	6800      	ldr	r0, [r0, #0]
 8007874:	f001 fa18 	bl	8008ca8 <USB_WritePMA>
 8007878:	e3e5      	b.n	8008046 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800787a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80078d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a1a      	ldr	r2, [r3, #32]
 80078e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 81bc 	beq.w	8007c94 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800791c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d16d      	bne.n	8007a16 <USB_EPStartXfer+0xc5a>
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	67bb      	str	r3, [r7, #120]	; 0x78
 8007946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007954:	b29b      	uxth	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795a:	4413      	add	r3, r2
 800795c:	67bb      	str	r3, [r7, #120]	; 0x78
 800795e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	011a      	lsls	r2, r3, #4
 800796c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796e:	4413      	add	r3, r2
 8007970:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007974:	677b      	str	r3, [r7, #116]	; 0x74
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d112      	bne.n	80079a4 <USB_EPStartXfer+0xbe8>
 800797e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007988:	b29a      	uxth	r2, r3
 800798a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	b29a      	uxth	r2, r3
 800799e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e060      	b.n	8007a66 <USB_EPStartXfer+0xcaa>
 80079a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a8:	2b3e      	cmp	r3, #62	; 0x3e
 80079aa:	d817      	bhi.n	80079dc <USB_EPStartXfer+0xc20>
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <USB_EPStartXfer+0xc10>
 80079c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079c6:	3301      	adds	r3, #1
 80079c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e044      	b.n	8007a66 <USB_EPStartXfer+0xcaa>
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <USB_EPStartXfer+0xc40>
 80079f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079f6:	3b01      	subs	r3, #1
 80079f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80079fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e027      	b.n	8007a66 <USB_EPStartXfer+0xcaa>
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d11f      	bne.n	8007a66 <USB_EPStartXfer+0xcaa>
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	011a      	lsls	r2, r3, #4
 8007a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	895b      	ldrh	r3, [r3, #10]
 8007a72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6959      	ldr	r1, [r3, #20]
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a94:	6800      	ldr	r0, [r0, #0]
 8007a96:	f001 f907 	bl	8008ca8 <USB_WritePMA>
          ep->xfer_buff += len;
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aaa:	441a      	add	r2, r3
 8007aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d90f      	bls.n	8007af4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6a1a      	ldr	r2, [r3, #32]
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	1ad2      	subs	r2, r2, r3
 8007ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	621a      	str	r2, [r3, #32]
 8007af2:	e00e      	b.n	8007b12 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8295 	beq.w	8008046 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d16d      	bne.n	8007c08 <USB_EPStartXfer+0xe4c>
 8007b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b4c:	4413      	add	r3, r2
 8007b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	011a      	lsls	r2, r3, #4
 8007b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b60:	4413      	add	r3, r2
 8007b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b66:	667b      	str	r3, [r7, #100]	; 0x64
 8007b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d112      	bne.n	8007b96 <USB_EPStartXfer+0xdda>
 8007b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	e063      	b.n	8007c5e <USB_EPStartXfer+0xea2>
 8007b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9c:	d817      	bhi.n	8007bce <USB_EPStartXfer+0xe12>
 8007b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <USB_EPStartXfer+0xe02>
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e047      	b.n	8007c5e <USB_EPStartXfer+0xea2>
 8007bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <USB_EPStartXfer+0xe32>
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	e02a      	b.n	8007c5e <USB_EPStartXfer+0xea2>
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d122      	bne.n	8007c5e <USB_EPStartXfer+0xea2>
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	673b      	str	r3, [r7, #112]	; 0x70
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c38:	4413      	add	r3, r2
 8007c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	011a      	lsls	r2, r3, #4
 8007c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	891b      	ldrh	r3, [r3, #8]
 8007c6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6959      	ldr	r1, [r3, #20]
 8007c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f001 f80b 	bl	8008ca8 <USB_WritePMA>
 8007c92:	e1d8      	b.n	8008046 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d178      	bne.n	8007d96 <USB_EPStartXfer+0xfda>
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cc8:	4413      	add	r3, r2
 8007cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	011a      	lsls	r2, r3, #4
 8007cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d116      	bne.n	8007d20 <USB_EPStartXfer+0xf64>
 8007cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d1c:	801a      	strh	r2, [r3, #0]
 8007d1e:	e06b      	b.n	8007df8 <USB_EPStartXfer+0x103c>
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d24:	2b3e      	cmp	r3, #62	; 0x3e
 8007d26:	d818      	bhi.n	8007d5a <USB_EPStartXfer+0xf9e>
 8007d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <USB_EPStartXfer+0xf8c>
 8007d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d42:	3301      	adds	r3, #1
 8007d44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	029b      	lsls	r3, r3, #10
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e04e      	b.n	8007df8 <USB_EPStartXfer+0x103c>
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <USB_EPStartXfer+0xfbe>
 8007d70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d74:	3b01      	subs	r3, #1
 8007d76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e030      	b.n	8007df8 <USB_EPStartXfer+0x103c>
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d128      	bne.n	8007df8 <USB_EPStartXfer+0x103c>
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dca:	4413      	add	r3, r2
 8007dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	011a      	lsls	r2, r3, #4
 8007dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007de2:	4413      	add	r3, r2
 8007de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007df6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	891b      	ldrh	r3, [r3, #8]
 8007e04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6959      	ldr	r1, [r3, #20]
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e1e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e22:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	f000 ff3e 	bl	8008ca8 <USB_WritePMA>
          ep->xfer_buff += len;
 8007e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3c:	441a      	add	r2, r3
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d90f      	bls.n	8007e86 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a1a      	ldr	r2, [r3, #32]
 8007e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	621a      	str	r2, [r3, #32]
 8007e84:	e00e      	b.n	8007ea4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80cc 	beq.w	8008046 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d178      	bne.n	8007fbe <USB_EPStartXfer+0x1202>
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	011a      	lsls	r2, r3, #4
 8007f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f08:	4413      	add	r3, r2
 8007f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d116      	bne.n	8007f48 <USB_EPStartXfer+0x118c>
 8007f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e064      	b.n	8008012 <USB_EPStartXfer+0x1256>
 8007f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4e:	d818      	bhi.n	8007f82 <USB_EPStartXfer+0x11c6>
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <USB_EPStartXfer+0x11b4>
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e047      	b.n	8008012 <USB_EPStartXfer+0x1256>
 8007f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <USB_EPStartXfer+0x11e6>
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	029b      	lsls	r3, r3, #10
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	e029      	b.n	8008012 <USB_EPStartXfer+0x1256>
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d121      	bne.n	8008012 <USB_EPStartXfer+0x1256>
 8007fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	011a      	lsls	r2, r3, #4
 8007ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	895b      	ldrh	r3, [r3, #10]
 800801e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008032:	b29b      	uxth	r3, r3
 8008034:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008038:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800803c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008040:	6800      	ldr	r0, [r0, #0]
 8008042:	f000 fe31 	bl	8008ca8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008068:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800806c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008074:	8013      	strh	r3, [r2, #0]
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800807e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008082:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008086:	8812      	ldrh	r2, [r2, #0]
 8008088:	f082 0210 	eor.w	r2, r2, #16
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008096:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800809a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800809e:	8812      	ldrh	r2, [r2, #0]
 80080a0:	f082 0220 	eor.w	r2, r2, #32
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	441a      	add	r2, r3
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8013      	strh	r3, [r2, #0]
 80080de:	f000 bc9f 	b.w	8008a20 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	7b1b      	ldrb	r3, [r3, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80ae 	bne.w	8008250 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80080f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d917      	bls.n	8008140 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	619a      	str	r2, [r3, #24]
 800813e:	e00e      	b.n	800815e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800815e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800816c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817a:	b29b      	uxth	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	011a      	lsls	r2, r3, #4
 8008196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800819a:	4413      	add	r3, r2
 800819c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d116      	bne.n	80081da <USB_EPStartXfer+0x141e>
 80081ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081be:	801a      	strh	r2, [r3, #0]
 80081c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	e3e8      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
 80081da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081de:	2b3e      	cmp	r3, #62	; 0x3e
 80081e0:	d818      	bhi.n	8008214 <USB_EPStartXfer+0x1458>
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80081ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USB_EPStartXfer+0x1446>
 80081f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081fc:	3301      	adds	r3, #1
 80081fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008202:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008206:	b29b      	uxth	r3, r3
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	e3cb      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800821e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008222:	f003 031f 	and.w	r3, r3, #31
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <USB_EPStartXfer+0x1478>
 800822a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800822e:	3b01      	subs	r3, #1
 8008230:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008234:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008238:	b29b      	uxth	r3, r3
 800823a:	029b      	lsls	r3, r3, #10
 800823c:	b29b      	uxth	r3, r3
 800823e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008246:	b29a      	uxth	r2, r3
 8008248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800824c:	801a      	strh	r2, [r3, #0]
 800824e:	e3ad      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	78db      	ldrb	r3, [r3, #3]
 800825c:	2b02      	cmp	r3, #2
 800825e:	f040 8200 	bne.w	8008662 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 8091 	bne.w	8008396 <USB_EPStartXfer+0x15da>
 8008274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008298:	4413      	add	r3, r2
 800829a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	011a      	lsls	r2, r3, #4
 80082ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082b0:	4413      	add	r3, r2
 80082b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d116      	bne.n	80082f8 <USB_EPStartXfer+0x153c>
 80082ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e083      	b.n	8008400 <USB_EPStartXfer+0x1644>
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2b3e      	cmp	r3, #62	; 0x3e
 8008306:	d820      	bhi.n	800834a <USB_EPStartXfer+0x158e>
 8008308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <USB_EPStartXfer+0x157c>
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008332:	3301      	adds	r3, #1
 8008334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833c:	b29b      	uxth	r3, r3
 800833e:	029b      	lsls	r3, r3, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	e05a      	b.n	8008400 <USB_EPStartXfer+0x1644>
 800834a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800835c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <USB_EPStartXfer+0x15be>
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008374:	3b01      	subs	r3, #1
 8008376:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837e:	b29b      	uxth	r3, r3
 8008380:	029b      	lsls	r3, r3, #10
 8008382:	b29b      	uxth	r3, r3
 8008384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838c:	b29a      	uxth	r2, r3
 800838e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	e034      	b.n	8008400 <USB_EPStartXfer+0x1644>
 8008396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d12c      	bne.n	8008400 <USB_EPStartXfer+0x1644>
 80083a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ca:	4413      	add	r3, r2
 80083cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	011a      	lsls	r2, r3, #4
 80083de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083e2:	4413      	add	r3, r2
 80083e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800840e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 8091 	bne.w	8008542 <USB_EPStartXfer+0x1786>
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800842e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843c:	b29b      	uxth	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008444:	4413      	add	r3, r2
 8008446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	011a      	lsls	r2, r3, #4
 8008458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800845c:	4413      	add	r3, r2
 800845e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008462:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d116      	bne.n	80084a4 <USB_EPStartXfer+0x16e8>
 8008476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008482:	b29a      	uxth	r2, r3
 8008484:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008488:	801a      	strh	r2, [r3, #0]
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849a:	b29a      	uxth	r2, r3
 800849c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084a0:	801a      	strh	r2, [r3, #0]
 80084a2:	e07c      	b.n	800859e <USB_EPStartXfer+0x17e2>
 80084a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b3e      	cmp	r3, #62	; 0x3e
 80084b2:	d820      	bhi.n	80084f6 <USB_EPStartXfer+0x173a>
 80084b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USB_EPStartXfer+0x1728>
 80084da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084de:	3301      	adds	r3, #1
 80084e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e053      	b.n	800859e <USB_EPStartXfer+0x17e2>
 80084f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f003 031f 	and.w	r3, r3, #31
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <USB_EPStartXfer+0x176a>
 800851c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008520:	3b01      	subs	r3, #1
 8008522:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008526:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800852a:	b29b      	uxth	r3, r3
 800852c:	029b      	lsls	r3, r3, #10
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e02d      	b.n	800859e <USB_EPStartXfer+0x17e2>
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d125      	bne.n	800859e <USB_EPStartXfer+0x17e2>
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008568:	4413      	add	r3, r2
 800856a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	011a      	lsls	r2, r3, #4
 800857c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008580:	4413      	add	r3, r2
 8008582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800858a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	b29a      	uxth	r2, r3
 8008598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800859c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 81fe 	beq.w	80089ac <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80085b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <USB_EPStartXfer+0x182c>
 80085dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 81db 	bne.w	80089ac <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f040 81d4 	bne.w	80089ac <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800862e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	441a      	add	r2, r3
 8008648:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800864c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800865c:	b29b      	uxth	r3, r3
 800865e:	8013      	strh	r3, [r2, #0]
 8008660:	e1a4      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	78db      	ldrb	r3, [r3, #3]
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 819a 	bne.w	80089a8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	699a      	ldr	r2, [r3, #24]
 8008680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	429a      	cmp	r2, r3
 800868e:	d917      	bls.n	80086c0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80086a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	1ad2      	subs	r2, r2, r3
 80086b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	619a      	str	r2, [r3, #24]
 80086be:	e00e      	b.n	80086de <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80086c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80086d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80086de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d178      	bne.n	80087e0 <USB_EPStartXfer+0x1a24>
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870a:	b29b      	uxth	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008712:	4413      	add	r3, r2
 8008714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	011a      	lsls	r2, r3, #4
 8008726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800872a:	4413      	add	r3, r2
 800872c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d116      	bne.n	800876a <USB_EPStartXfer+0x19ae>
 800873c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29b      	uxth	r3, r3
 8008744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008748:	b29a      	uxth	r2, r3
 800874a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800875c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008760:	b29a      	uxth	r2, r3
 8008762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008766:	801a      	strh	r2, [r3, #0]
 8008768:	e06b      	b.n	8008842 <USB_EPStartXfer+0x1a86>
 800876a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876e:	2b3e      	cmp	r3, #62	; 0x3e
 8008770:	d818      	bhi.n	80087a4 <USB_EPStartXfer+0x19e8>
 8008772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800877c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <USB_EPStartXfer+0x19d6>
 8008788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878c:	3301      	adds	r3, #1
 800878e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008796:	b29b      	uxth	r3, r3
 8008798:	029b      	lsls	r3, r3, #10
 800879a:	b29a      	uxth	r2, r3
 800879c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087a0:	801a      	strh	r2, [r3, #0]
 80087a2:	e04e      	b.n	8008842 <USB_EPStartXfer+0x1a86>
 80087a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b2:	f003 031f 	and.w	r3, r3, #31
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d104      	bne.n	80087c4 <USB_EPStartXfer+0x1a08>
 80087ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087be:	3b01      	subs	r3, #1
 80087c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	029b      	lsls	r3, r3, #10
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087dc:	801a      	strh	r2, [r3, #0]
 80087de:	e030      	b.n	8008842 <USB_EPStartXfer+0x1a86>
 80087e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d128      	bne.n	8008842 <USB_EPStartXfer+0x1a86>
 80087f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880c:	b29b      	uxth	r3, r3
 800880e:	461a      	mov	r2, r3
 8008810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008814:	4413      	add	r3, r2
 8008816:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800881a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	011a      	lsls	r2, r3, #4
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882c:	4413      	add	r3, r2
 800882e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800883a:	b29a      	uxth	r2, r3
 800883c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d178      	bne.n	8008952 <USB_EPStartXfer+0x1b96>
 8008860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887c:	b29b      	uxth	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008884:	4413      	add	r3, r2
 8008886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	011a      	lsls	r2, r3, #4
 8008898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800889c:	4413      	add	r3, r2
 800889e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d116      	bne.n	80088dc <USB_EPStartXfer+0x1b20>
 80088ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088d8:	801a      	strh	r2, [r3, #0]
 80088da:	e067      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
 80088dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e0:	2b3e      	cmp	r3, #62	; 0x3e
 80088e2:	d818      	bhi.n	8008916 <USB_EPStartXfer+0x1b5a>
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <USB_EPStartXfer+0x1b48>
 80088fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088fe:	3301      	adds	r3, #1
 8008900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008904:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008908:	b29b      	uxth	r3, r3
 800890a:	029b      	lsls	r3, r3, #10
 800890c:	b29a      	uxth	r2, r3
 800890e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008912:	801a      	strh	r2, [r3, #0]
 8008914:	e04a      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
 8008916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	f003 031f 	and.w	r3, r3, #31
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <USB_EPStartXfer+0x1b7a>
 800892c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008930:	3b01      	subs	r3, #1
 8008932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800893a:	b29b      	uxth	r3, r3
 800893c:	029b      	lsls	r3, r3, #10
 800893e:	b29b      	uxth	r3, r3
 8008940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008948:	b29a      	uxth	r2, r3
 800894a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	e02c      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
 8008952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d124      	bne.n	80089ac <USB_EPStartXfer+0x1bf0>
 8008962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008970:	b29b      	uxth	r3, r3
 8008972:	461a      	mov	r2, r3
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008978:	4413      	add	r3, r2
 800897a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	011a      	lsls	r2, r3, #4
 800898c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008990:	4413      	add	r3, r2
 8008992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800899a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899e:	b29a      	uxth	r2, r3
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	e001      	b.n	80089ac <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e03a      	b.n	8008a22 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80089da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80089e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80089ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d020      	beq.n	8008a80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a54:	81bb      	strh	r3, [r7, #12]
 8008a56:	89bb      	ldrh	r3, [r7, #12]
 8008a58:	f083 0310 	eor.w	r3, r3, #16
 8008a5c:	81bb      	strh	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	89bb      	ldrh	r3, [r7, #12]
 8008a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	8013      	strh	r3, [r2, #0]
 8008a7e:	e01f      	b.n	8008ac0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	81fb      	strh	r3, [r7, #14]
 8008a98:	89fb      	ldrh	r3, [r7, #14]
 8008a9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a9e:	81fb      	strh	r3, [r7, #14]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	89fb      	ldrh	r3, [r7, #14]
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	7b1b      	ldrb	r3, [r3, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 809d 	bne.w	8008c1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d04c      	beq.n	8008b82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	823b      	strh	r3, [r7, #16]
 8008af6:	8a3b      	ldrh	r3, [r7, #16]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01b      	beq.n	8008b38 <USB_EPClearStall+0x6c>
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	81fb      	strh	r3, [r7, #14]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	441a      	add	r2, r3
 8008b22:	89fb      	ldrh	r3, [r7, #14]
 8008b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d06c      	beq.n	8008c1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b56:	81bb      	strh	r3, [r7, #12]
 8008b58:	89bb      	ldrh	r3, [r7, #12]
 8008b5a:	f083 0320 	eor.w	r3, r3, #32
 8008b5e:	81bb      	strh	r3, [r7, #12]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	89bb      	ldrh	r3, [r7, #12]
 8008b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	8013      	strh	r3, [r2, #0]
 8008b80:	e04b      	b.n	8008c1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	82fb      	strh	r3, [r7, #22]
 8008b90:	8afb      	ldrh	r3, [r7, #22]
 8008b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01b      	beq.n	8008bd2 <USB_EPClearStall+0x106>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb0:	82bb      	strh	r3, [r7, #20]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	8abb      	ldrh	r3, [r7, #20]
 8008bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be8:	827b      	strh	r3, [r7, #18]
 8008bea:	8a7b      	ldrh	r3, [r7, #18]
 8008bec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bf0:	827b      	strh	r3, [r7, #18]
 8008bf2:	8a7b      	ldrh	r3, [r7, #18]
 8008bf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bf8:	827b      	strh	r3, [r7, #18]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	441a      	add	r2, r3
 8008c04:	8a7b      	ldrh	r3, [r7, #18]
 8008c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bc80      	pop	{r7}
 8008c24:	4770      	bx	lr

08008c26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2280      	movs	r2, #128	; 0x80
 8008c3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr

08008c74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bc80      	pop	{r7}
 8008c90:	4770      	bx	lr

08008c92 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b08d      	sub	sp, #52	; 0x34
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	80fb      	strh	r3, [r7, #6]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008cbe:	88bb      	ldrh	r3, [r7, #4]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	085b      	lsrs	r3, r3, #1
 8008cc4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	005a      	lsls	r2, r3, #1
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce0:	e01e      	b.n	8008d20 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	3301      	adds	r3, #1
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	3302      	adds	r3, #2
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	3302      	adds	r3, #2
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	3301      	adds	r3, #1
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1dd      	bne.n	8008ce2 <USB_WritePMA+0x3a>
  }
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	3734      	adds	r7, #52	; 0x34
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr

08008d32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b08b      	sub	sp, #44	; 0x2c
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	461a      	mov	r2, r3
 8008d40:	460b      	mov	r3, r1
 8008d42:	80fb      	strh	r3, [r7, #6]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008d48:	88bb      	ldrh	r3, [r7, #4]
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	005a      	lsls	r2, r3, #1
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d64:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6a:	e01b      	b.n	8008da4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	3302      	adds	r3, #2
 8008d78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	3301      	adds	r3, #1
 8008d86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	3301      	adds	r3, #1
 8008d96:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	3b01      	subs	r3, #1
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e0      	bne.n	8008d6c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008daa:	88bb      	ldrh	r3, [r7, #4]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	701a      	strb	r2, [r3, #0]
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	372c      	adds	r7, #44	; 0x2c
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr

08008dd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7c1b      	ldrb	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d115      	bne.n	8008e14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dec:	2202      	movs	r2, #2
 8008dee:	2181      	movs	r1, #129	; 0x81
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 fe90 	bl	800ab16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e00:	2202      	movs	r2, #2
 8008e02:	2101      	movs	r1, #1
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fe86 	bl	800ab16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008e12:	e012      	b.n	8008e3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e14:	2340      	movs	r3, #64	; 0x40
 8008e16:	2202      	movs	r2, #2
 8008e18:	2181      	movs	r1, #129	; 0x81
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 fe7b 	bl	800ab16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e26:	2340      	movs	r3, #64	; 0x40
 8008e28:	2202      	movs	r2, #2
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 fe72 	bl	800ab16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	2182      	movs	r1, #130	; 0x82
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f001 fe68 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008e50:	f001 ff88 	bl	800ad64 <USBD_static_malloc>
 8008e54:	4602      	mov	r2, r0
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e62:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008e66:	2100      	movs	r1, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 fff1 	bl	800ae50 <memset>
  if (pdev->pClassData == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <USBD_CDC_Init+0xae>
  {
    ret = 1U;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
 8008e7c:	e026      	b.n	8008ecc <USBD_CDC_Init+0xfc>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7c1b      	ldrb	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <USBD_CDC_Init+0xec>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 ff1f 	bl	800acf8 <USBD_LL_PrepareReceive>
 8008eba:	e007      	b.n	8008ecc <USBD_CDC_Init+0xfc>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 ff16 	bl	800acf8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ee6:	2181      	movs	r1, #129	; 0x81
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 fe3a 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 fe33 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f04:	2182      	movs	r1, #130	; 0x82
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fe2b 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00e      	beq.n	8008f3a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 ff25 	bl	800ad7c <USBD_static_free>
    pdev->pClassData = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d039      	beq.n	8008fe2 <USBD_CDC_Setup+0x9e>
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d17f      	bne.n	8009072 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	88db      	ldrh	r3, [r3, #6]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d029      	beq.n	8008fce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	da11      	bge.n	8008fa8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008f90:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	88d2      	ldrh	r2, [r2, #6]
 8008f96:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008f98:	6939      	ldr	r1, [r7, #16]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	88db      	ldrh	r3, [r3, #6]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fa0a 	bl	800a3ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008fa6:	e06b      	b.n	8009080 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	785a      	ldrb	r2, [r3, #1]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	88db      	ldrh	r3, [r3, #6]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008fbe:	6939      	ldr	r1, [r7, #16]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f001 fa25 	bl	800a416 <USBD_CtlPrepareRx>
      break;
 8008fcc:	e058      	b.n	8009080 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	7850      	ldrb	r0, [r2, #1]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	4798      	blx	r3
      break;
 8008fe0:	e04e      	b.n	8009080 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b0b      	cmp	r3, #11
 8008fe8:	d02e      	beq.n	8009048 <USBD_CDC_Setup+0x104>
 8008fea:	2b0b      	cmp	r3, #11
 8008fec:	dc38      	bgt.n	8009060 <USBD_CDC_Setup+0x11c>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <USBD_CDC_Setup+0xb4>
 8008ff2:	2b0a      	cmp	r3, #10
 8008ff4:	d014      	beq.n	8009020 <USBD_CDC_Setup+0xdc>
 8008ff6:	e033      	b.n	8009060 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d107      	bne.n	8009012 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009002:	f107 030c 	add.w	r3, r7, #12
 8009006:	2202      	movs	r2, #2
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 f9d5 	bl	800a3ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009010:	e02e      	b.n	8009070 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f966 	bl	800a2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800901a:	2302      	movs	r3, #2
 800901c:	75fb      	strb	r3, [r7, #23]
          break;
 800901e:	e027      	b.n	8009070 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009026:	2b03      	cmp	r3, #3
 8009028:	d107      	bne.n	800903a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800902a:	f107 030f 	add.w	r3, r7, #15
 800902e:	2201      	movs	r2, #1
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 f9c1 	bl	800a3ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009038:	e01a      	b.n	8009070 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f952 	bl	800a2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	75fb      	strb	r3, [r7, #23]
          break;
 8009046:	e013      	b.n	8009070 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	2b03      	cmp	r3, #3
 8009050:	d00d      	beq.n	800906e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 f946 	bl	800a2e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800905e:	e006      	b.n	800906e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 f93f 	bl	800a2e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009068:	2302      	movs	r3, #2
 800906a:	75fb      	strb	r3, [r7, #23]
          break;
 800906c:	e000      	b.n	8009070 <USBD_CDC_Setup+0x12c>
          break;
 800906e:	bf00      	nop
      }
      break;
 8009070:	e006      	b.n	8009080 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f936 	bl	800a2e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800907a:	2302      	movs	r3, #2
 800907c:	75fb      	strb	r3, [r7, #23]
      break;
 800907e:	bf00      	nop
  }

  return ret;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d03a      	beq.n	8009126 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	331c      	adds	r3, #28
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d029      	beq.n	800911a <USBD_CDC_DataIn+0x90>
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	440b      	add	r3, r1
 80090d4:	331c      	adds	r3, #28
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	78f9      	ldrb	r1, [r7, #3]
 80090da:	68b8      	ldr	r0, [r7, #8]
 80090dc:	460b      	mov	r3, r1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4403      	add	r3, r0
 80090e6:	3338      	adds	r3, #56	; 0x38
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d110      	bne.n	800911a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	331c      	adds	r3, #28
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800910c:	78f9      	ldrb	r1, [r7, #3]
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 fdcd 	bl	800acb2 <USBD_LL_Transmit>
 8009118:	e003      	b.n	8009122 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e000      	b.n	8009128 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 fdf8 	bl	800ad3e <USBD_LL_GetRxDataSize>
 800914e:	4602      	mov	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009174:	4611      	mov	r1, r2
 8009176:	4798      	blx	r3

    return USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	e000      	b.n	800917e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800917c:	2302      	movs	r3, #2
  }
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009194:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800919c:	2b00      	cmp	r3, #0
 800919e:	d015      	beq.n	80091cc <USBD_CDC_EP0_RxReady+0x46>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d010      	beq.n	80091cc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80091b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091c0:	b292      	uxth	r2, r2
 80091c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	22ff      	movs	r2, #255	; 0xff
 80091c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2243      	movs	r2, #67	; 0x43
 80091e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000009c 	.word	0x2000009c

080091f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2243      	movs	r2, #67	; 0x43
 8009204:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009206:	4b03      	ldr	r3, [pc, #12]	; (8009214 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000058 	.word	0x20000058

08009218 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2243      	movs	r2, #67	; 0x43
 8009224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009226:	4b03      	ldr	r3, [pc, #12]	; (8009234 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	200000e0 	.word	0x200000e0

08009238 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	220a      	movs	r2, #10
 8009244:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000014 	.word	0x20000014

08009258 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009262:	2302      	movs	r3, #2
 8009264:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	bc80      	pop	{r7}
 8009282:	4770      	bx	lr

08009284 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009298:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092a2:	88fa      	ldrh	r2, [r7, #6]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr

080092dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01c      	beq.n	8009330 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d115      	bne.n	800932c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800931e:	b29b      	uxth	r3, r3
 8009320:	2181      	movs	r1, #129	; 0x81
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fcc5 	bl	800acb2 <USBD_LL_Transmit>

      return USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e002      	b.n	8009332 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800932c:	2301      	movs	r3, #1
 800932e:	e000      	b.n	8009332 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009330:	2302      	movs	r3, #2
  }
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009348:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d017      	beq.n	8009384 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7c1b      	ldrb	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009366:	2101      	movs	r1, #1
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fcc5 	bl	800acf8 <USBD_LL_PrepareReceive>
 800936e:	e007      	b.n	8009380 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009376:	2340      	movs	r3, #64	; 0x40
 8009378:	2101      	movs	r1, #1
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fcbc 	bl	800acf8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	e000      	b.n	8009386 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009384:	2302      	movs	r3, #2
  }
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	4613      	mov	r3, r2
 800939a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80093a2:	2302      	movs	r3, #2
 80093a4:	e01a      	b.n	80093dc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	79fa      	ldrb	r2, [r7, #7]
 80093d2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f001 fb29 	bl	800aa2c <USBD_LL_Init>

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d006      	beq.n	8009406 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e001      	b.n	800940a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009406:	2302      	movs	r3, #2
 8009408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	bc80      	pop	{r7}
 8009414:	4770      	bx	lr

08009416 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 fb5e 	bl	800aae0 <USBD_LL_Start>

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr

08009442 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	460b      	mov	r3, r1
 800944c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800944e:	2302      	movs	r3, #2
 8009450:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	4611      	mov	r1, r2
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	4611      	mov	r1, r2
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	4798      	blx	r3

  return USBD_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 fed8 	bl	800a26e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d016      	beq.n	8009510 <USBD_LL_SetupStage+0x6a>
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d81c      	bhi.n	8009520 <USBD_LL_SetupStage+0x7a>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <USBD_LL_SetupStage+0x4a>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d008      	beq.n	8009500 <USBD_LL_SetupStage+0x5a>
 80094ee:	e017      	b.n	8009520 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9cb 	bl	8009894 <USBD_StdDevReq>
      break;
 80094fe:	e01a      	b.n	8009536 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa2d 	bl	8009968 <USBD_StdItfReq>
      break;
 800950e:	e012      	b.n	8009536 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa6d 	bl	80099f8 <USBD_StdEPReq>
      break;
 800951e:	e00a      	b.n	8009536 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800952a:	b2db      	uxtb	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 fb36 	bl	800aba0 <USBD_LL_StallEP>
      break;
 8009534:	bf00      	nop
  }

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	460b      	mov	r3, r1
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d14b      	bne.n	80095ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800955a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009562:	2b03      	cmp	r3, #3
 8009564:	d134      	bne.n	80095d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	429a      	cmp	r2, r3
 8009570:	d919      	bls.n	80095a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	68da      	ldr	r2, [r3, #12]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009588:	429a      	cmp	r2, r3
 800958a:	d203      	bcs.n	8009594 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009590:	b29b      	uxth	r3, r3
 8009592:	e002      	b.n	800959a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009598:	b29b      	uxth	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 ff57 	bl	800a452 <USBD_CtlContinueRx>
 80095a4:	e038      	b.n	8009618 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d105      	bne.n	80095c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 ff54 	bl	800a476 <USBD_CtlSendStatus>
 80095ce:	e023      	b.n	8009618 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d11e      	bne.n	8009618 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80095e2:	2100      	movs	r1, #0
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f001 fadb 	bl	800aba0 <USBD_LL_StallEP>
 80095ea:	e015      	b.n	8009618 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00d      	beq.n	8009614 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d108      	bne.n	8009614 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	7afa      	ldrb	r2, [r7, #11]
 800960c:	4611      	mov	r1, r2
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	4798      	blx	r3
 8009612:	e001      	b.n	8009618 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009614:	2302      	movs	r3, #2
 8009616:	e000      	b.n	800961a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	460b      	mov	r3, r1
 800962c:	607a      	str	r2, [r7, #4]
 800962e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d17f      	bne.n	8009736 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3314      	adds	r3, #20
 800963a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009642:	2b02      	cmp	r3, #2
 8009644:	d15c      	bne.n	8009700 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	429a      	cmp	r2, r3
 8009650:	d915      	bls.n	800967e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	1ad2      	subs	r2, r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	b29b      	uxth	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fec1 	bl	800a3f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009670:	2300      	movs	r3, #0
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f001 fb3e 	bl	800acf8 <USBD_LL_PrepareReceive>
 800967c:	e04e      	b.n	800971c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	6912      	ldr	r2, [r2, #16]
 8009686:	fbb3 f1f2 	udiv	r1, r3, r2
 800968a:	fb01 f202 	mul.w	r2, r1, r2
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d11c      	bne.n	80096ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800969c:	429a      	cmp	r2, r3
 800969e:	d316      	bcc.n	80096ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d20f      	bcs.n	80096ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fe9d 	bl	800a3f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 fb16 	bl	800acf8 <USBD_LL_PrepareReceive>
 80096cc:	e026      	b.n	800971c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d105      	bne.n	80096f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80096f0:	2180      	movs	r1, #128	; 0x80
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f001 fa54 	bl	800aba0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fecf 	bl	800a49c <USBD_CtlReceiveStatus>
 80096fe:	e00d      	b.n	800971c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009706:	2b04      	cmp	r3, #4
 8009708:	d004      	beq.n	8009714 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 fa42 	bl	800aba0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009722:	2b01      	cmp	r3, #1
 8009724:	d11d      	bne.n	8009762 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff fe81 	bl	800942e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009734:	e015      	b.n	8009762 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00d      	beq.n	800975e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009748:	2b03      	cmp	r3, #3
 800974a:	d108      	bne.n	800975e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	7afa      	ldrb	r2, [r7, #11]
 8009756:	4611      	mov	r1, r2
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	4798      	blx	r3
 800975c:	e001      	b.n	8009762 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800975e:	2302      	movs	r3, #2
 8009760:	e000      	b.n	8009764 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f9cb 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2240      	movs	r2, #64	; 0x40
 800978c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	2200      	movs	r2, #0
 8009794:	2180      	movs	r1, #128	; 0x80
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f9bd 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2240      	movs	r2, #64	; 0x40
 80097a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6852      	ldr	r2, [r2, #4]
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	4611      	mov	r1, r2
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
  }

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	78fa      	ldrb	r2, [r7, #3]
 80097fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2204      	movs	r2, #4
 8009824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	bc80      	pop	{r7}
 8009832:	4770      	bx	lr

08009834 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	2b04      	cmp	r3, #4
 8009844:	d105      	bne.n	8009852 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr

0800985e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986c:	2b03      	cmp	r3, #3
 800986e:	d10b      	bne.n	8009888 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098aa:	2b40      	cmp	r3, #64	; 0x40
 80098ac:	d005      	beq.n	80098ba <USBD_StdDevReq+0x26>
 80098ae:	2b40      	cmp	r3, #64	; 0x40
 80098b0:	d84f      	bhi.n	8009952 <USBD_StdDevReq+0xbe>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <USBD_StdDevReq+0x36>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d14b      	bne.n	8009952 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
      break;
 80098c8:	e048      	b.n	800995c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d839      	bhi.n	8009946 <USBD_StdDevReq+0xb2>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBD_StdDevReq+0x44>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	08009929 	.word	0x08009929
 80098dc:	0800993d 	.word	0x0800993d
 80098e0:	08009947 	.word	0x08009947
 80098e4:	08009933 	.word	0x08009933
 80098e8:	08009947 	.word	0x08009947
 80098ec:	0800990b 	.word	0x0800990b
 80098f0:	08009901 	.word	0x08009901
 80098f4:	08009947 	.word	0x08009947
 80098f8:	0800991f 	.word	0x0800991f
 80098fc:	08009915 	.word	0x08009915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f9dc 	bl	8009cc0 <USBD_GetDescriptor>
          break;
 8009908:	e022      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fb3f 	bl	8009f90 <USBD_SetAddress>
          break;
 8009912:	e01d      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fb7e 	bl	800a018 <USBD_SetConfig>
          break;
 800991c:	e018      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fc07 	bl	800a134 <USBD_GetConfig>
          break;
 8009926:	e013      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fc37 	bl	800a19e <USBD_GetStatus>
          break;
 8009930:	e00e      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fc65 	bl	800a204 <USBD_SetFeature>
          break;
 800993a:	e009      	b.n	8009950 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fc74 	bl	800a22c <USBD_ClrFeature>
          break;
 8009944:	e004      	b.n	8009950 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fccc 	bl	800a2e6 <USBD_CtlError>
          break;
 800994e:	bf00      	nop
      }
      break;
 8009950:	e004      	b.n	800995c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fcc6 	bl	800a2e6 <USBD_CtlError>
      break;
 800995a:	bf00      	nop
  }

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop

08009968 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800997e:	2b40      	cmp	r3, #64	; 0x40
 8009980:	d005      	beq.n	800998e <USBD_StdItfReq+0x26>
 8009982:	2b40      	cmp	r3, #64	; 0x40
 8009984:	d82e      	bhi.n	80099e4 <USBD_StdItfReq+0x7c>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <USBD_StdItfReq+0x26>
 800998a:	2b20      	cmp	r3, #32
 800998c:	d12a      	bne.n	80099e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009994:	3b01      	subs	r3, #1
 8009996:	2b02      	cmp	r3, #2
 8009998:	d81d      	bhi.n	80099d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	889b      	ldrh	r3, [r3, #4]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d813      	bhi.n	80099cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4798      	blx	r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d110      	bne.n	80099e0 <USBD_StdItfReq+0x78>
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10d      	bne.n	80099e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fd56 	bl	800a476 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099ca:	e009      	b.n	80099e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fc89 	bl	800a2e6 <USBD_CtlError>
          break;
 80099d4:	e004      	b.n	80099e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fc84 	bl	800a2e6 <USBD_CtlError>
          break;
 80099de:	e000      	b.n	80099e2 <USBD_StdItfReq+0x7a>
          break;
 80099e0:	bf00      	nop
      }
      break;
 80099e2:	e004      	b.n	80099ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fc7d 	bl	800a2e6 <USBD_CtlError>
      break;
 80099ec:	bf00      	nop
  }

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	889b      	ldrh	r3, [r3, #4]
 8009a0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a14:	2b40      	cmp	r3, #64	; 0x40
 8009a16:	d007      	beq.n	8009a28 <USBD_StdEPReq+0x30>
 8009a18:	2b40      	cmp	r3, #64	; 0x40
 8009a1a:	f200 8146 	bhi.w	8009caa <USBD_StdEPReq+0x2b2>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <USBD_StdEPReq+0x40>
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	f040 8141 	bne.w	8009caa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
      break;
 8009a36:	e13d      	b.n	8009cb4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d10a      	bne.n	8009a5a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	e12d      	b.n	8009cb6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d007      	beq.n	8009a72 <USBD_StdEPReq+0x7a>
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	f300 811b 	bgt.w	8009c9e <USBD_StdEPReq+0x2a6>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d072      	beq.n	8009b52 <USBD_StdEPReq+0x15a>
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d03a      	beq.n	8009ae6 <USBD_StdEPReq+0xee>
 8009a70:	e115      	b.n	8009c9e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d002      	beq.n	8009a82 <USBD_StdEPReq+0x8a>
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d015      	beq.n	8009aac <USBD_StdEPReq+0xb4>
 8009a80:	e02b      	b.n	8009ada <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <USBD_StdEPReq+0xaa>
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d009      	beq.n	8009aa2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 f884 	bl	800aba0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 f880 	bl	800aba0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009aa0:	e020      	b.n	8009ae4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc1e 	bl	800a2e6 <USBD_CtlError>
              break;
 8009aaa:	e01b      	b.n	8009ae4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10e      	bne.n	8009ad2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <USBD_StdEPReq+0xda>
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b80      	cmp	r3, #128	; 0x80
 8009abe:	d008      	beq.n	8009ad2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	88db      	ldrh	r3, [r3, #6]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f867 	bl	800aba0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fccf 	bl	800a476 <USBD_CtlSendStatus>

              break;
 8009ad8:	e004      	b.n	8009ae4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fc02 	bl	800a2e6 <USBD_CtlError>
              break;
 8009ae2:	bf00      	nop
          }
          break;
 8009ae4:	e0e0      	b.n	8009ca8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d002      	beq.n	8009af6 <USBD_StdEPReq+0xfe>
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d015      	beq.n	8009b20 <USBD_StdEPReq+0x128>
 8009af4:	e026      	b.n	8009b44 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00c      	beq.n	8009b16 <USBD_StdEPReq+0x11e>
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d009      	beq.n	8009b16 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 f84a 	bl	800aba0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b0c:	2180      	movs	r1, #128	; 0x80
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 f846 	bl	800aba0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b14:	e01c      	b.n	8009b50 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fbe4 	bl	800a2e6 <USBD_CtlError>
              break;
 8009b1e:	e017      	b.n	8009b50 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d112      	bne.n	8009b4e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f851 	bl	800abde <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc9a 	bl	800a476 <USBD_CtlSendStatus>
              }
              break;
 8009b42:	e004      	b.n	8009b4e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fbcd 	bl	800a2e6 <USBD_CtlError>
              break;
 8009b4c:	e000      	b.n	8009b50 <USBD_StdEPReq+0x158>
              break;
 8009b4e:	bf00      	nop
          }
          break;
 8009b50:	e0aa      	b.n	8009ca8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d002      	beq.n	8009b62 <USBD_StdEPReq+0x16a>
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d032      	beq.n	8009bc6 <USBD_StdEPReq+0x1ce>
 8009b60:	e097      	b.n	8009c92 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <USBD_StdEPReq+0x180>
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b80      	cmp	r3, #128	; 0x80
 8009b6c:	d004      	beq.n	8009b78 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fbb8 	bl	800a2e6 <USBD_CtlError>
                break;
 8009b76:	e091      	b.n	8009c9c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da0b      	bge.n	8009b98 <USBD_StdEPReq+0x1a0>
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	3310      	adds	r3, #16
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	e00b      	b.n	8009bb0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	3304      	adds	r3, #4
 8009bb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbfb 	bl	800a3ba <USBD_CtlSendData>
              break;
 8009bc4:	e06a      	b.n	8009c9c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da11      	bge.n	8009bf2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	3318      	adds	r3, #24
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d117      	bne.n	8009c18 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fb7b 	bl	800a2e6 <USBD_CtlError>
                  break;
 8009bf0:	e054      	b.n	8009c9c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	f003 020f 	and.w	r2, r3, #15
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fb68 	bl	800a2e6 <USBD_CtlError>
                  break;
 8009c16:	e041      	b.n	8009c9c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da0b      	bge.n	8009c38 <USBD_StdEPReq+0x240>
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	3310      	adds	r3, #16
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4413      	add	r3, r2
 8009c34:	3304      	adds	r3, #4
 8009c36:	e00b      	b.n	8009c50 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3304      	adds	r3, #4
 8009c50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <USBD_StdEPReq+0x266>
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	2b80      	cmp	r3, #128	; 0x80
 8009c5c:	d103      	bne.n	8009c66 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e00e      	b.n	8009c84 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 ffd6 	bl	800ac1c <USBD_LL_IsStallEP>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	e002      	b.n	8009c84 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2202      	movs	r2, #2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fb95 	bl	800a3ba <USBD_CtlSendData>
              break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb26 	bl	800a2e6 <USBD_CtlError>
              break;
 8009c9a:	bf00      	nop
          }
          break;
 8009c9c:	e004      	b.n	8009ca8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fb20 	bl	800a2e6 <USBD_CtlError>
          break;
 8009ca6:	bf00      	nop
      }
      break;
 8009ca8:	e004      	b.n	8009cb4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fb1a 	bl	800a2e6 <USBD_CtlError>
      break;
 8009cb2:	bf00      	nop
  }

  return ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	885b      	ldrh	r3, [r3, #2]
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b06      	cmp	r3, #6
 8009ce2:	f200 8128 	bhi.w	8009f36 <USBD_GetDescriptor+0x276>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <USBD_GetDescriptor+0x2c>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d61 	.word	0x08009d61
 8009cf8:	08009f37 	.word	0x08009f37
 8009cfc:	08009f37 	.word	0x08009f37
 8009d00:	08009ed7 	.word	0x08009ed7
 8009d04:	08009f03 	.word	0x08009f03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	7c12      	ldrb	r2, [r2, #16]
 8009d14:	f107 0108 	add.w	r1, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
      break;
 8009d1e:	e112      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7c1b      	ldrb	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10d      	bne.n	8009d44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	f107 0208 	add.w	r2, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	2202      	movs	r2, #2
 8009d40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d42:	e100      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	f107 0208 	add.w	r2, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	701a      	strb	r2, [r3, #0]
      break;
 8009d5e:	e0f2      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	885b      	ldrh	r3, [r3, #2]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b05      	cmp	r3, #5
 8009d68:	f200 80ac 	bhi.w	8009ec4 <USBD_GetDescriptor+0x204>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <USBD_GetDescriptor+0xb4>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009d8d 	.word	0x08009d8d
 8009d78:	08009dc1 	.word	0x08009dc1
 8009d7c:	08009df5 	.word	0x08009df5
 8009d80:	08009e29 	.word	0x08009e29
 8009d84:	08009e5d 	.word	0x08009e5d
 8009d88:	08009e91 	.word	0x08009e91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dae:	e091      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa97 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dbe:	e089      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
 8009dd8:	f107 0108 	add.w	r1, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de2:	e077      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa7d 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	3301      	adds	r3, #1
 8009df0:	72fb      	strb	r3, [r7, #11]
          break;
 8009df2:	e06f      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7c12      	ldrb	r2, [r2, #16]
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e16:	e05d      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa63 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3301      	adds	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]
          break;
 8009e26:	e055      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	7c12      	ldrb	r2, [r2, #16]
 8009e40:	f107 0108 	add.w	r1, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4a:	e043      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa49 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	3301      	adds	r3, #1
 8009e58:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5a:	e03b      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7c12      	ldrb	r2, [r2, #16]
 8009e74:	f107 0108 	add.w	r1, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7e:	e029      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa2f 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8e:	e021      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	7c12      	ldrb	r2, [r2, #16]
 8009ea8:	f107 0108 	add.w	r1, r7, #8
 8009eac:	4610      	mov	r0, r2
 8009eae:	4798      	blx	r3
 8009eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb2:	e00f      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa15 	bl	800a2e6 <USBD_CtlError>
            err++;
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec2:	e007      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa0d 	bl	800a2e6 <USBD_CtlError>
          err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ed2:	e038      	b.n	8009f46 <USBD_GetDescriptor+0x286>
 8009ed4:	e037      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	7c1b      	ldrb	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	f107 0208 	add.w	r2, r7, #8
 8009eea:	4610      	mov	r0, r2
 8009eec:	4798      	blx	r3
 8009eee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ef0:	e029      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9f6 	bl	800a2e6 <USBD_CtlError>
        err++;
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	3301      	adds	r3, #1
 8009efe:	72fb      	strb	r3, [r7, #11]
      break;
 8009f00:	e021      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7c1b      	ldrb	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10d      	bne.n	8009f26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	f107 0208 	add.w	r2, r7, #8
 8009f16:	4610      	mov	r0, r2
 8009f18:	4798      	blx	r3
 8009f1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	2207      	movs	r2, #7
 8009f22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f24:	e00f      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f9dc 	bl	800a2e6 <USBD_CtlError>
        err++;
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	3301      	adds	r3, #1
 8009f32:	72fb      	strb	r3, [r7, #11]
      break;
 8009f34:	e007      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9d4 	bl	800a2e6 <USBD_CtlError>
      err++;
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	3301      	adds	r3, #1
 8009f42:	72fb      	strb	r3, [r7, #11]
      break;
 8009f44:	bf00      	nop
  }

  if (err != 0U)
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11c      	bne.n	8009f86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f4c:	893b      	ldrh	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d011      	beq.n	8009f76 <USBD_GetDescriptor+0x2b6>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00d      	beq.n	8009f76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88da      	ldrh	r2, [r3, #6]
 8009f5e:	893b      	ldrh	r3, [r7, #8]
 8009f60:	4293      	cmp	r3, r2
 8009f62:	bf28      	it	cs
 8009f64:	4613      	movcs	r3, r2
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f6a:	893b      	ldrh	r3, [r7, #8]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fa22 	bl	800a3ba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d104      	bne.n	8009f88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa79 	bl	800a476 <USBD_CtlSendStatus>
 8009f84:	e000      	b.n	8009f88 <USBD_GetDescriptor+0x2c8>
    return;
 8009f86:	bf00      	nop
    }
  }
}
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop

08009f90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	889b      	ldrh	r3, [r3, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d130      	bne.n	800a004 <USBD_SetAddress+0x74>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	88db      	ldrh	r3, [r3, #6]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d12c      	bne.n	800a004 <USBD_SetAddress+0x74>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	2b7f      	cmp	r3, #127	; 0x7f
 8009fb0:	d828      	bhi.n	800a004 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	885b      	ldrh	r3, [r3, #2]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d104      	bne.n	8009fd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f98b 	bl	800a2e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd0:	e01d      	b.n	800a00e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7bfa      	ldrb	r2, [r7, #15]
 8009fd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fe48 	bl	800ac74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fa46 	bl	800a476 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff8:	e009      	b.n	800a00e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a002:	e004      	b.n	800a00e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f96d 	bl	800a2e6 <USBD_CtlError>
  }
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	4b41      	ldr	r3, [pc, #260]	; (800a130 <USBD_SetConfig+0x118>)
 800a02a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a02c:	4b40      	ldr	r3, [pc, #256]	; (800a130 <USBD_SetConfig+0x118>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d904      	bls.n	800a03e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f955 	bl	800a2e6 <USBD_CtlError>
 800a03c:	e075      	b.n	800a12a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a044:	2b02      	cmp	r3, #2
 800a046:	d002      	beq.n	800a04e <USBD_SetConfig+0x36>
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d023      	beq.n	800a094 <USBD_SetConfig+0x7c>
 800a04c:	e062      	b.n	800a114 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a04e:	4b38      	ldr	r3, [pc, #224]	; (800a130 <USBD_SetConfig+0x118>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01a      	beq.n	800a08c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a056:	4b36      	ldr	r3, [pc, #216]	; (800a130 <USBD_SetConfig+0x118>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2203      	movs	r2, #3
 800a064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a068:	4b31      	ldr	r3, [pc, #196]	; (800a130 <USBD_SetConfig+0x118>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff f9e7 	bl	8009442 <USBD_SetClassConfig>
 800a074:	4603      	mov	r3, r0
 800a076:	2b02      	cmp	r3, #2
 800a078:	d104      	bne.n	800a084 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f932 	bl	800a2e6 <USBD_CtlError>
            return;
 800a082:	e052      	b.n	800a12a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f9f6 	bl	800a476 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a08a:	e04e      	b.n	800a12a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f9f2 	bl	800a476 <USBD_CtlSendStatus>
        break;
 800a092:	e04a      	b.n	800a12a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <USBD_SetConfig+0x118>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d112      	bne.n	800a0c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a0a4:	4b22      	ldr	r3, [pc, #136]	; (800a130 <USBD_SetConfig+0x118>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a0ae:	4b20      	ldr	r3, [pc, #128]	; (800a130 <USBD_SetConfig+0x118>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff f9e3 	bl	8009480 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f9db 	bl	800a476 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a0c0:	e033      	b.n	800a12a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a0c2:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <USBD_SetConfig+0x118>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d01d      	beq.n	800a10c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff f9d1 	bl	8009480 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a0de:	4b14      	ldr	r3, [pc, #80]	; (800a130 <USBD_SetConfig+0x118>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <USBD_SetConfig+0x118>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff f9a7 	bl	8009442 <USBD_SetClassConfig>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d104      	bne.n	800a104 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f8f2 	bl	800a2e6 <USBD_CtlError>
            return;
 800a102:	e012      	b.n	800a12a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9b6 	bl	800a476 <USBD_CtlSendStatus>
        break;
 800a10a:	e00e      	b.n	800a12a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f9b2 	bl	800a476 <USBD_CtlSendStatus>
        break;
 800a112:	e00a      	b.n	800a12a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f8e5 	bl	800a2e6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <USBD_SetConfig+0x118>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff f9ac 	bl	8009480 <USBD_ClrClassConfig>
        break;
 800a128:	bf00      	nop
    }
  }
}
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000488 	.word	0x20000488

0800a134 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	88db      	ldrh	r3, [r3, #6]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d004      	beq.n	800a150 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f8cc 	bl	800a2e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a14e:	e022      	b.n	800a196 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a156:	2b02      	cmp	r3, #2
 800a158:	dc02      	bgt.n	800a160 <USBD_GetConfig+0x2c>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dc03      	bgt.n	800a166 <USBD_GetConfig+0x32>
 800a15e:	e015      	b.n	800a18c <USBD_GetConfig+0x58>
 800a160:	2b03      	cmp	r3, #3
 800a162:	d00b      	beq.n	800a17c <USBD_GetConfig+0x48>
 800a164:	e012      	b.n	800a18c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3308      	adds	r3, #8
 800a170:	2201      	movs	r2, #1
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f920 	bl	800a3ba <USBD_CtlSendData>
        break;
 800a17a:	e00c      	b.n	800a196 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	2201      	movs	r2, #1
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f918 	bl	800a3ba <USBD_CtlSendData>
        break;
 800a18a:	e004      	b.n	800a196 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8a9 	bl	800a2e6 <USBD_CtlError>
        break;
 800a194:	bf00      	nop
}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d81e      	bhi.n	800a1f2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d004      	beq.n	800a1c6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f891 	bl	800a2e6 <USBD_CtlError>
        break;
 800a1c4:	e01a      	b.n	800a1fc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f043 0202 	orr.w	r2, r3, #2
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f8e5 	bl	800a3ba <USBD_CtlSendData>
      break;
 800a1f0:	e004      	b.n	800a1fc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f876 	bl	800a2e6 <USBD_CtlError>
      break;
 800a1fa:	bf00      	nop
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d106      	bne.n	800a224 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f929 	bl	800a476 <USBD_CtlSendStatus>
  }
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	3b01      	subs	r3, #1
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d80b      	bhi.n	800a25a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	885b      	ldrh	r3, [r3, #2]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d10c      	bne.n	800a264 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f90f 	bl	800a476 <USBD_CtlSendStatus>
      }
      break;
 800a258:	e004      	b.n	800a264 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f842 	bl	800a2e6 <USBD_CtlError>
      break;
 800a262:	e000      	b.n	800a266 <USBD_ClrFeature+0x3a>
      break;
 800a264:	bf00      	nop
  }
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781a      	ldrb	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	785a      	ldrb	r2, [r3, #1]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	3302      	adds	r3, #2
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b29a      	uxth	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	3303      	adds	r3, #3
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4413      	add	r3, r2
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	3305      	adds	r3, #5
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	3306      	adds	r3, #6
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	3307      	adds	r3, #7
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	80da      	strh	r2, [r3, #6]

}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr

0800a2e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a2f0:	2180      	movs	r1, #128	; 0x80
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fc54 	bl	800aba0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fc50 	bl	800aba0 <USBD_LL_StallEP>
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d032      	beq.n	800a384 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 f834 	bl	800a38c <USBD_GetLen>
 800a324:	4603      	mov	r3, r0
 800a326:	3301      	adds	r3, #1
 800a328:	b29b      	uxth	r3, r3
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	75fa      	strb	r2, [r7, #23]
 800a338:	461a      	mov	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	75fa      	strb	r2, [r7, #23]
 800a34a:	461a      	mov	r2, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4413      	add	r3, r2
 800a350:	2203      	movs	r2, #3
 800a352:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a354:	e012      	b.n	800a37c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	60fa      	str	r2, [r7, #12]
 800a35c:	7dfa      	ldrb	r2, [r7, #23]
 800a35e:	1c51      	adds	r1, r2, #1
 800a360:	75f9      	strb	r1, [r7, #23]
 800a362:	4611      	mov	r1, r2
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	440a      	add	r2, r1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	75fa      	strb	r2, [r7, #23]
 800a372:	461a      	mov	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4413      	add	r3, r2
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e8      	bne.n	800a356 <USBD_GetString+0x4e>
    }
  }
}
 800a384:	bf00      	nop
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a398:	e005      	b.n	800a3a6 <USBD_GetLen+0x1a>
  {
    len++;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	3301      	adds	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f5      	bne.n	800a39a <USBD_GetLen+0xe>
  }

  return len;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr

0800a3ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a3d0:	88fa      	ldrh	r2, [r7, #6]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a3d6:	88fa      	ldrh	r2, [r7, #6]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 fc65 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	2100      	movs	r1, #0
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 fc53 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	4613      	mov	r3, r2
 800a422:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2203      	movs	r2, #3
 800a428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a42c:	88fa      	ldrh	r2, [r7, #6]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a434:	88fa      	ldrh	r2, [r7, #6]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a43c:	88fb      	ldrh	r3, [r7, #6]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	2100      	movs	r1, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 fc58 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4613      	mov	r3, r2
 800a45e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	2100      	movs	r1, #0
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fc46 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2204      	movs	r2, #4
 800a482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a486:	2300      	movs	r3, #0
 800a488:	2200      	movs	r2, #0
 800a48a:	2100      	movs	r1, #0
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fc10 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fc20 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4912      	ldr	r1, [pc, #72]	; (800a514 <MX_USB_DEVICE_Init+0x50>)
 800a4cc:	4812      	ldr	r0, [pc, #72]	; (800a518 <MX_USB_DEVICE_Init+0x54>)
 800a4ce:	f7fe ff5e 	bl	800938e <USBD_Init>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4d8:	f7f7 f92c 	bl	8001734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4dc:	490f      	ldr	r1, [pc, #60]	; (800a51c <MX_USB_DEVICE_Init+0x58>)
 800a4de:	480e      	ldr	r0, [pc, #56]	; (800a518 <MX_USB_DEVICE_Init+0x54>)
 800a4e0:	f7fe ff80 	bl	80093e4 <USBD_RegisterClass>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4ea:	f7f7 f923 	bl	8001734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4ee:	490c      	ldr	r1, [pc, #48]	; (800a520 <MX_USB_DEVICE_Init+0x5c>)
 800a4f0:	4809      	ldr	r0, [pc, #36]	; (800a518 <MX_USB_DEVICE_Init+0x54>)
 800a4f2:	f7fe feb1 	bl	8009258 <USBD_CDC_RegisterInterface>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4fc:	f7f7 f91a 	bl	8001734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a500:	4805      	ldr	r0, [pc, #20]	; (800a518 <MX_USB_DEVICE_Init+0x54>)
 800a502:	f7fe ff88 	bl	8009416 <USBD_Start>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a50c:	f7f7 f912 	bl	8001734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a510:	bf00      	nop
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20000134 	.word	0x20000134
 800a518:	2000048c 	.word	0x2000048c
 800a51c:	20000020 	.word	0x20000020
 800a520:	20000124 	.word	0x20000124

0800a524 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a528:	2200      	movs	r2, #0
 800a52a:	4905      	ldr	r1, [pc, #20]	; (800a540 <CDC_Init_FS+0x1c>)
 800a52c:	4805      	ldr	r0, [pc, #20]	; (800a544 <CDC_Init_FS+0x20>)
 800a52e:	f7fe fea9 	bl	8009284 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a532:	4905      	ldr	r1, [pc, #20]	; (800a548 <CDC_Init_FS+0x24>)
 800a534:	4803      	ldr	r0, [pc, #12]	; (800a544 <CDC_Init_FS+0x20>)
 800a536:	f7fe febe 	bl	80092b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a53a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000b50 	.word	0x20000b50
 800a544:	2000048c 	.word	0x2000048c
 800a548:	20000750 	.word	0x20000750

0800a54c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a54c:	b480      	push	{r7}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a552:	4618      	mov	r0, r3
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
	...

0800a55c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
 800a568:	4613      	mov	r3, r2
 800a56a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b23      	cmp	r3, #35	; 0x23
 800a570:	d84a      	bhi.n	800a608 <CDC_Control_FS+0xac>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <CDC_Control_FS+0x1c>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a609 	.word	0x0800a609
 800a57c:	0800a609 	.word	0x0800a609
 800a580:	0800a609 	.word	0x0800a609
 800a584:	0800a609 	.word	0x0800a609
 800a588:	0800a609 	.word	0x0800a609
 800a58c:	0800a609 	.word	0x0800a609
 800a590:	0800a609 	.word	0x0800a609
 800a594:	0800a609 	.word	0x0800a609
 800a598:	0800a609 	.word	0x0800a609
 800a59c:	0800a609 	.word	0x0800a609
 800a5a0:	0800a609 	.word	0x0800a609
 800a5a4:	0800a609 	.word	0x0800a609
 800a5a8:	0800a609 	.word	0x0800a609
 800a5ac:	0800a609 	.word	0x0800a609
 800a5b0:	0800a609 	.word	0x0800a609
 800a5b4:	0800a609 	.word	0x0800a609
 800a5b8:	0800a609 	.word	0x0800a609
 800a5bc:	0800a609 	.word	0x0800a609
 800a5c0:	0800a609 	.word	0x0800a609
 800a5c4:	0800a609 	.word	0x0800a609
 800a5c8:	0800a609 	.word	0x0800a609
 800a5cc:	0800a609 	.word	0x0800a609
 800a5d0:	0800a609 	.word	0x0800a609
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a609 	.word	0x0800a609
 800a5dc:	0800a609 	.word	0x0800a609
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	0800a609 	.word	0x0800a609
 800a5f0:	0800a609 	.word	0x0800a609
 800a5f4:	0800a609 	.word	0x0800a609
 800a5f8:	0800a609 	.word	0x0800a609
 800a5fc:	0800a609 	.word	0x0800a609
 800a600:	0800a609 	.word	0x0800a609
 800a604:	0800a609 	.word	0x0800a609
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a608:	bf00      	nop
  }

  return (USBD_OK);
 800a60a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	4805      	ldr	r0, [pc, #20]	; (800a63c <CDC_Receive_FS+0x24>)
 800a626:	f7fe fe46 	bl	80092b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a62a:	4804      	ldr	r0, [pc, #16]	; (800a63c <CDC_Receive_FS+0x24>)
 800a62c:	f7fe fe85 	bl	800933a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2000048c 	.word	0x2000048c

0800a640 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a650:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <CDC_Transmit_FS+0x48>)
 800a652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a656:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a662:	2301      	movs	r3, #1
 800a664:	e00b      	b.n	800a67e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a666:	887b      	ldrh	r3, [r7, #2]
 800a668:	461a      	mov	r2, r3
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4806      	ldr	r0, [pc, #24]	; (800a688 <CDC_Transmit_FS+0x48>)
 800a66e:	f7fe fe09 	bl	8009284 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a672:	4805      	ldr	r0, [pc, #20]	; (800a688 <CDC_Transmit_FS+0x48>)
 800a674:	f7fe fe32 	bl	80092dc <USBD_CDC_TransmitPacket>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	2000048c 	.word	0x2000048c

0800a68c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2212      	movs	r2, #18
 800a69c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a69e:	4b03      	ldr	r3, [pc, #12]	; (800a6ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	20000150 	.word	0x20000150

0800a6b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6039      	str	r1, [r7, #0]
 800a6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6c2:	4b03      	ldr	r3, [pc, #12]	; (800a6d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	20000164 	.word	0x20000164

0800a6d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	6039      	str	r1, [r7, #0]
 800a6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d105      	bne.n	800a6f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	4907      	ldr	r1, [pc, #28]	; (800a708 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6ea:	4808      	ldr	r0, [pc, #32]	; (800a70c <USBD_FS_ProductStrDescriptor+0x38>)
 800a6ec:	f7ff fe0c 	bl	800a308 <USBD_GetString>
 800a6f0:	e004      	b.n	800a6fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	4904      	ldr	r1, [pc, #16]	; (800a708 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6f6:	4805      	ldr	r0, [pc, #20]	; (800a70c <USBD_FS_ProductStrDescriptor+0x38>)
 800a6f8:	f7ff fe06 	bl	800a308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6fc:	4b02      	ldr	r3, [pc, #8]	; (800a708 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20000f50 	.word	0x20000f50
 800a70c:	0800ef44 	.word	0x0800ef44

0800a710 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	6039      	str	r1, [r7, #0]
 800a71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	4904      	ldr	r1, [pc, #16]	; (800a730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a720:	4804      	ldr	r0, [pc, #16]	; (800a734 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a722:	f7ff fdf1 	bl	800a308 <USBD_GetString>
  return USBD_StrDesc;
 800a726:	4b02      	ldr	r3, [pc, #8]	; (800a730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20000f50 	.word	0x20000f50
 800a734:	0800ef5c 	.word	0x0800ef5c

0800a738 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	6039      	str	r1, [r7, #0]
 800a742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	221a      	movs	r2, #26
 800a748:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a74a:	f000 f843 	bl	800a7d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a74e:	4b02      	ldr	r3, [pc, #8]	; (800a758 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000168 	.word	0x20000168

0800a75c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	6039      	str	r1, [r7, #0]
 800a766:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d105      	bne.n	800a77a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4907      	ldr	r1, [pc, #28]	; (800a790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a772:	4808      	ldr	r0, [pc, #32]	; (800a794 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a774:	f7ff fdc8 	bl	800a308 <USBD_GetString>
 800a778:	e004      	b.n	800a784 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	4904      	ldr	r1, [pc, #16]	; (800a790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a77e:	4805      	ldr	r0, [pc, #20]	; (800a794 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a780:	f7ff fdc2 	bl	800a308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000f50 	.word	0x20000f50
 800a794:	0800ef70 	.word	0x0800ef70

0800a798 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4907      	ldr	r1, [pc, #28]	; (800a7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ae:	4808      	ldr	r0, [pc, #32]	; (800a7d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7b0:	f7ff fdaa 	bl	800a308 <USBD_GetString>
 800a7b4:	e004      	b.n	800a7c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4904      	ldr	r1, [pc, #16]	; (800a7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ba:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7bc:	f7ff fda4 	bl	800a308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000f50 	.word	0x20000f50
 800a7d0:	0800ef7c 	.word	0x0800ef7c

0800a7d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a7da:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <Get_SerialNum+0x44>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a7e0:	4b0e      	ldr	r3, [pc, #56]	; (800a81c <Get_SerialNum+0x48>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <Get_SerialNum+0x4c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d009      	beq.n	800a80e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7fa:	2208      	movs	r2, #8
 800a7fc:	4909      	ldr	r1, [pc, #36]	; (800a824 <Get_SerialNum+0x50>)
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 f814 	bl	800a82c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a804:	2204      	movs	r2, #4
 800a806:	4908      	ldr	r1, [pc, #32]	; (800a828 <Get_SerialNum+0x54>)
 800a808:	68b8      	ldr	r0, [r7, #8]
 800a80a:	f000 f80f 	bl	800a82c <IntToUnicode>
  }
}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	1ffff7e8 	.word	0x1ffff7e8
 800a81c:	1ffff7ec 	.word	0x1ffff7ec
 800a820:	1ffff7f0 	.word	0x1ffff7f0
 800a824:	2000016a 	.word	0x2000016a
 800a828:	2000017a 	.word	0x2000017a

0800a82c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a83e:	2300      	movs	r3, #0
 800a840:	75fb      	strb	r3, [r7, #23]
 800a842:	e027      	b.n	800a894 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	0f1b      	lsrs	r3, r3, #28
 800a848:	2b09      	cmp	r3, #9
 800a84a:	d80b      	bhi.n	800a864 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	0f1b      	lsrs	r3, r3, #28
 800a850:	b2da      	uxtb	r2, r3
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	4619      	mov	r1, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	440b      	add	r3, r1
 800a85c:	3230      	adds	r2, #48	; 0x30
 800a85e:	b2d2      	uxtb	r2, r2
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	e00a      	b.n	800a87a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	0f1b      	lsrs	r3, r3, #28
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	4619      	mov	r1, r3
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	440b      	add	r3, r1
 800a874:	3237      	adds	r2, #55	; 0x37
 800a876:	b2d2      	uxtb	r2, r2
 800a878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	3301      	adds	r3, #1
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	4413      	add	r3, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	3301      	adds	r3, #1
 800a892:	75fb      	strb	r3, [r7, #23]
 800a894:	7dfa      	ldrb	r2, [r7, #23]
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d3d3      	bcc.n	800a844 <IntToUnicode+0x18>
  }
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bc80      	pop	{r7}
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a0d      	ldr	r2, [pc, #52]	; (800a8ec <HAL_PCD_MspInit+0x44>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d113      	bne.n	800a8e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a8ba:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <HAL_PCD_MspInit+0x48>)
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	4a0c      	ldr	r2, [pc, #48]	; (800a8f0 <HAL_PCD_MspInit+0x48>)
 800a8c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8c4:	61d3      	str	r3, [r2, #28]
 800a8c6:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <HAL_PCD_MspInit+0x48>)
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	2014      	movs	r0, #20
 800a8d8:	f7f7 fd0d 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a8dc:	2014      	movs	r0, #20
 800a8de:	f7f7 fd26 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40005c00 	.word	0x40005c00
 800a8f0:	40021000 	.word	0x40021000

0800a8f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a908:	4619      	mov	r1, r3
 800a90a:	4610      	mov	r0, r2
 800a90c:	f7fe fdcb 	bl	80094a6 <USBD_LL_SetupStage>
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	440b      	add	r3, r1
 800a938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	4619      	mov	r1, r3
 800a942:	f7fe fdfd 	bl	8009540 <USBD_LL_DataOutStage>
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b082      	sub	sp, #8
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a960:	78fa      	ldrb	r2, [r7, #3]
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	440b      	add	r3, r1
 800a96e:	333c      	adds	r3, #60	; 0x3c
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	78fb      	ldrb	r3, [r7, #3]
 800a974:	4619      	mov	r1, r3
 800a976:	f7fe fe54 	bl	8009622 <USBD_LL_DataInStage>
}
 800a97a:	bf00      	nop
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a990:	4618      	mov	r0, r3
 800a992:	f7fe ff64 	bl	800985e <USBD_LL_SOF>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d001      	beq.n	800a9b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a9b2:	f7f6 febf 	bl	8001734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a9bc:	7bfa      	ldrb	r2, [r7, #15]
 800a9be:	4611      	mov	r1, r2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe ff14 	bl	80097ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fe fecd 	bl	800976c <USBD_LL_Reset>
}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe ff0e 	bl	800980c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d005      	beq.n	800aa04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <HAL_PCD_SuspendCallback+0x30>)
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	4a03      	ldr	r2, [pc, #12]	; (800aa0c <HAL_PCD_SuspendCallback+0x30>)
 800a9fe:	f043 0306 	orr.w	r3, r3, #6
 800aa02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa04:	bf00      	nop
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000ed00 	.word	0xe000ed00

0800aa10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe ff08 	bl	8009834 <USBD_LL_Resume>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aa34:	4a28      	ldr	r2, [pc, #160]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aa44:	4b24      	ldr	r3, [pc, #144]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa46:	4a25      	ldr	r2, [pc, #148]	; (800aadc <USBD_LL_Init+0xb0>)
 800aa48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aa4a:	4b23      	ldr	r3, [pc, #140]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aa50:	4b21      	ldr	r3, [pc, #132]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa52:	2202      	movs	r2, #2
 800aa54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aa56:	4b20      	ldr	r3, [pc, #128]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aa62:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aa68:	481b      	ldr	r0, [pc, #108]	; (800aad8 <USBD_LL_Init+0xac>)
 800aa6a:	f7f8 fe47 	bl	80036fc <HAL_PCD_Init>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aa74:	f7f6 fe5e 	bl	8001734 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa7e:	2318      	movs	r3, #24
 800aa80:	2200      	movs	r2, #0
 800aa82:	2100      	movs	r1, #0
 800aa84:	f7fa fabb 	bl	8004ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa8e:	2358      	movs	r3, #88	; 0x58
 800aa90:	2200      	movs	r2, #0
 800aa92:	2180      	movs	r1, #128	; 0x80
 800aa94:	f7fa fab3 	bl	8004ffe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa9e:	23c0      	movs	r3, #192	; 0xc0
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2181      	movs	r1, #129	; 0x81
 800aaa4:	f7fa faab 	bl	8004ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aab2:	2200      	movs	r2, #0
 800aab4:	2101      	movs	r1, #1
 800aab6:	f7fa faa2 	bl	8004ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aac4:	2200      	movs	r2, #0
 800aac6:	2182      	movs	r1, #130	; 0x82
 800aac8:	f7fa fa99 	bl	8004ffe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20001150 	.word	0x20001150
 800aadc:	40005c00 	.word	0x40005c00

0800aae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f8 ff0b 	bl	8003912 <HAL_PCD_Start>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 f94e 	bl	800ada4 <USBD_Get_USB_Status>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	461a      	mov	r2, r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	70fb      	strb	r3, [r7, #3]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70bb      	strb	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab3e:	78bb      	ldrb	r3, [r7, #2]
 800ab40:	883a      	ldrh	r2, [r7, #0]
 800ab42:	78f9      	ldrb	r1, [r7, #3]
 800ab44:	f7f9 f883 	bl	8003c4e <HAL_PCD_EP_Open>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 f928 	bl	800ada4 <USBD_Get_USB_Status>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f9 f8ca 	bl	8003d1a <HAL_PCD_EP_Close>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f909 	bl	800ada4 <USBD_Get_USB_Status>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abba:	78fa      	ldrb	r2, [r7, #3]
 800abbc:	4611      	mov	r1, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f9 f98a 	bl	8003ed8 <HAL_PCD_EP_SetStall>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f8ea 	bl	800ada4 <USBD_Get_USB_Status>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f9 f9cb 	bl	8003f98 <HAL_PCD_EP_ClrStall>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f8cb 	bl	800ada4 <USBD_Get_USB_Status>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	da0c      	bge.n	800ac52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	e00b      	b.n	800ac6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac52:	78fb      	ldrb	r3, [r7, #3]
 800ac54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac58:	68f9      	ldr	r1, [r7, #12]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	440b      	add	r3, r1
 800ac64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ac68:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bc80      	pop	{r7}
 800ac72:	4770      	bx	lr

0800ac74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f8 ffb6 	bl	8003c04 <HAL_PCD_SetAddress>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f880 	bl	800ada4 <USBD_Get_USB_Status>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	461a      	mov	r2, r3
 800acbe:	460b      	mov	r3, r1
 800acc0:	72fb      	strb	r3, [r7, #11]
 800acc2:	4613      	mov	r3, r2
 800acc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acd4:	893b      	ldrh	r3, [r7, #8]
 800acd6:	7af9      	ldrb	r1, [r7, #11]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	f7f9 f8ba 	bl	8003e52 <HAL_PCD_EP_Transmit>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f85d 	bl	800ada4 <USBD_Get_USB_Status>
 800acea:	4603      	mov	r3, r0
 800acec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acee:	7dbb      	ldrb	r3, [r7, #22]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	461a      	mov	r2, r3
 800ad04:	460b      	mov	r3, r1
 800ad06:	72fb      	strb	r3, [r7, #11]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad1a:	893b      	ldrh	r3, [r7, #8]
 800ad1c:	7af9      	ldrb	r1, [r7, #11]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	f7f9 f843 	bl	8003daa <HAL_PCD_EP_Receive>
 800ad24:	4603      	mov	r3, r0
 800ad26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f83a 	bl	800ada4 <USBD_Get_USB_Status>
 800ad30:	4603      	mov	r3, r0
 800ad32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 f865 	bl	8003e24 <HAL_PCD_EP_GetRxCount>
 800ad5a:	4603      	mov	r3, r0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad6c:	4b02      	ldr	r3, [pc, #8]	; (800ad78 <USBD_static_malloc+0x14>)
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr
 800ad78:	2000143c 	.word	0x2000143c

0800ad7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bc80      	pop	{r7}
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bc80      	pop	{r7}
 800ada2:	4770      	bx	lr

0800ada4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adb2:	79fb      	ldrb	r3, [r7, #7]
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d817      	bhi.n	800ade8 <USBD_Get_USB_Status+0x44>
 800adb8:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <USBD_Get_USB_Status+0x1c>)
 800adba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbe:	bf00      	nop
 800adc0:	0800add1 	.word	0x0800add1
 800adc4:	0800add7 	.word	0x0800add7
 800adc8:	0800addd 	.word	0x0800addd
 800adcc:	0800ade3 	.word	0x0800ade3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]
    break;
 800add4:	e00b      	b.n	800adee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800add6:	2302      	movs	r3, #2
 800add8:	73fb      	strb	r3, [r7, #15]
    break;
 800adda:	e008      	b.n	800adee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800addc:	2301      	movs	r3, #1
 800adde:	73fb      	strb	r3, [r7, #15]
    break;
 800ade0:	e005      	b.n	800adee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ade2:	2302      	movs	r3, #2
 800ade4:	73fb      	strb	r3, [r7, #15]
    break;
 800ade6:	e002      	b.n	800adee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ade8:	2302      	movs	r3, #2
 800adea:	73fb      	strb	r3, [r7, #15]
    break;
 800adec:	bf00      	nop
  }
  return usb_status;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop

0800adfc <__errno>:
 800adfc:	4b01      	ldr	r3, [pc, #4]	; (800ae04 <__errno+0x8>)
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	20000184 	.word	0x20000184

0800ae08 <__libc_init_array>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	2600      	movs	r6, #0
 800ae0c:	4d0c      	ldr	r5, [pc, #48]	; (800ae40 <__libc_init_array+0x38>)
 800ae0e:	4c0d      	ldr	r4, [pc, #52]	; (800ae44 <__libc_init_array+0x3c>)
 800ae10:	1b64      	subs	r4, r4, r5
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	42a6      	cmp	r6, r4
 800ae16:	d109      	bne.n	800ae2c <__libc_init_array+0x24>
 800ae18:	f004 f864 	bl	800eee4 <_init>
 800ae1c:	2600      	movs	r6, #0
 800ae1e:	4d0a      	ldr	r5, [pc, #40]	; (800ae48 <__libc_init_array+0x40>)
 800ae20:	4c0a      	ldr	r4, [pc, #40]	; (800ae4c <__libc_init_array+0x44>)
 800ae22:	1b64      	subs	r4, r4, r5
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	42a6      	cmp	r6, r4
 800ae28:	d105      	bne.n	800ae36 <__libc_init_array+0x2e>
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae30:	4798      	blx	r3
 800ae32:	3601      	adds	r6, #1
 800ae34:	e7ee      	b.n	800ae14 <__libc_init_array+0xc>
 800ae36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3a:	4798      	blx	r3
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	e7f2      	b.n	800ae26 <__libc_init_array+0x1e>
 800ae40:	0800f420 	.word	0x0800f420
 800ae44:	0800f420 	.word	0x0800f420
 800ae48:	0800f420 	.word	0x0800f420
 800ae4c:	0800f424 	.word	0x0800f424

0800ae50 <memset>:
 800ae50:	4603      	mov	r3, r0
 800ae52:	4402      	add	r2, r0
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d100      	bne.n	800ae5a <memset+0xa>
 800ae58:	4770      	bx	lr
 800ae5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5e:	e7f9      	b.n	800ae54 <memset+0x4>

0800ae60 <__cvt>:
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae66:	461f      	mov	r7, r3
 800ae68:	bfbb      	ittet	lt
 800ae6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ae6e:	461f      	movlt	r7, r3
 800ae70:	2300      	movge	r3, #0
 800ae72:	232d      	movlt	r3, #45	; 0x2d
 800ae74:	b088      	sub	sp, #32
 800ae76:	4614      	mov	r4, r2
 800ae78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ae7c:	7013      	strb	r3, [r2, #0]
 800ae7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ae84:	f023 0820 	bic.w	r8, r3, #32
 800ae88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae8c:	d005      	beq.n	800ae9a <__cvt+0x3a>
 800ae8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae92:	d100      	bne.n	800ae96 <__cvt+0x36>
 800ae94:	3501      	adds	r5, #1
 800ae96:	2302      	movs	r3, #2
 800ae98:	e000      	b.n	800ae9c <__cvt+0x3c>
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	aa07      	add	r2, sp, #28
 800ae9e:	9204      	str	r2, [sp, #16]
 800aea0:	aa06      	add	r2, sp, #24
 800aea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aea6:	e9cd 3500 	strd	r3, r5, [sp]
 800aeaa:	4622      	mov	r2, r4
 800aeac:	463b      	mov	r3, r7
 800aeae:	f000 fce3 	bl	800b878 <_dtoa_r>
 800aeb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	d102      	bne.n	800aec0 <__cvt+0x60>
 800aeba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aebc:	07db      	lsls	r3, r3, #31
 800aebe:	d522      	bpl.n	800af06 <__cvt+0xa6>
 800aec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aec4:	eb06 0905 	add.w	r9, r6, r5
 800aec8:	d110      	bne.n	800aeec <__cvt+0x8c>
 800aeca:	7833      	ldrb	r3, [r6, #0]
 800aecc:	2b30      	cmp	r3, #48	; 0x30
 800aece:	d10a      	bne.n	800aee6 <__cvt+0x86>
 800aed0:	2200      	movs	r2, #0
 800aed2:	2300      	movs	r3, #0
 800aed4:	4620      	mov	r0, r4
 800aed6:	4639      	mov	r1, r7
 800aed8:	f7f5 fd66 	bl	80009a8 <__aeabi_dcmpeq>
 800aedc:	b918      	cbnz	r0, 800aee6 <__cvt+0x86>
 800aede:	f1c5 0501 	rsb	r5, r5, #1
 800aee2:	f8ca 5000 	str.w	r5, [sl]
 800aee6:	f8da 3000 	ldr.w	r3, [sl]
 800aeea:	4499      	add	r9, r3
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	4620      	mov	r0, r4
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 fd58 	bl	80009a8 <__aeabi_dcmpeq>
 800aef8:	b108      	cbz	r0, 800aefe <__cvt+0x9e>
 800aefa:	f8cd 901c 	str.w	r9, [sp, #28]
 800aefe:	2230      	movs	r2, #48	; 0x30
 800af00:	9b07      	ldr	r3, [sp, #28]
 800af02:	454b      	cmp	r3, r9
 800af04:	d307      	bcc.n	800af16 <__cvt+0xb6>
 800af06:	4630      	mov	r0, r6
 800af08:	9b07      	ldr	r3, [sp, #28]
 800af0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af0c:	1b9b      	subs	r3, r3, r6
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	b008      	add	sp, #32
 800af12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af16:	1c59      	adds	r1, r3, #1
 800af18:	9107      	str	r1, [sp, #28]
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e7f0      	b.n	800af00 <__cvt+0xa0>

0800af1e <__exponent>:
 800af1e:	4603      	mov	r3, r0
 800af20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af22:	2900      	cmp	r1, #0
 800af24:	f803 2b02 	strb.w	r2, [r3], #2
 800af28:	bfb6      	itet	lt
 800af2a:	222d      	movlt	r2, #45	; 0x2d
 800af2c:	222b      	movge	r2, #43	; 0x2b
 800af2e:	4249      	neglt	r1, r1
 800af30:	2909      	cmp	r1, #9
 800af32:	7042      	strb	r2, [r0, #1]
 800af34:	dd2b      	ble.n	800af8e <__exponent+0x70>
 800af36:	f10d 0407 	add.w	r4, sp, #7
 800af3a:	46a4      	mov	ip, r4
 800af3c:	270a      	movs	r7, #10
 800af3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800af42:	460a      	mov	r2, r1
 800af44:	46a6      	mov	lr, r4
 800af46:	fb07 1516 	mls	r5, r7, r6, r1
 800af4a:	2a63      	cmp	r2, #99	; 0x63
 800af4c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800af50:	4631      	mov	r1, r6
 800af52:	f104 34ff 	add.w	r4, r4, #4294967295
 800af56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af5a:	dcf0      	bgt.n	800af3e <__exponent+0x20>
 800af5c:	3130      	adds	r1, #48	; 0x30
 800af5e:	f1ae 0502 	sub.w	r5, lr, #2
 800af62:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af66:	4629      	mov	r1, r5
 800af68:	1c44      	adds	r4, r0, #1
 800af6a:	4561      	cmp	r1, ip
 800af6c:	d30a      	bcc.n	800af84 <__exponent+0x66>
 800af6e:	f10d 0209 	add.w	r2, sp, #9
 800af72:	eba2 020e 	sub.w	r2, r2, lr
 800af76:	4565      	cmp	r5, ip
 800af78:	bf88      	it	hi
 800af7a:	2200      	movhi	r2, #0
 800af7c:	4413      	add	r3, r2
 800af7e:	1a18      	subs	r0, r3, r0
 800af80:	b003      	add	sp, #12
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af88:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af8c:	e7ed      	b.n	800af6a <__exponent+0x4c>
 800af8e:	2330      	movs	r3, #48	; 0x30
 800af90:	3130      	adds	r1, #48	; 0x30
 800af92:	7083      	strb	r3, [r0, #2]
 800af94:	70c1      	strb	r1, [r0, #3]
 800af96:	1d03      	adds	r3, r0, #4
 800af98:	e7f1      	b.n	800af7e <__exponent+0x60>
	...

0800af9c <_printf_float>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	b091      	sub	sp, #68	; 0x44
 800afa2:	460c      	mov	r4, r1
 800afa4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800afa8:	4616      	mov	r6, r2
 800afaa:	461f      	mov	r7, r3
 800afac:	4605      	mov	r5, r0
 800afae:	f001 fa51 	bl	800c454 <_localeconv_r>
 800afb2:	6803      	ldr	r3, [r0, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	9309      	str	r3, [sp, #36]	; 0x24
 800afb8:	f7f5 f8ca 	bl	8000150 <strlen>
 800afbc:	2300      	movs	r3, #0
 800afbe:	930e      	str	r3, [sp, #56]	; 0x38
 800afc0:	f8d8 3000 	ldr.w	r3, [r8]
 800afc4:	900a      	str	r0, [sp, #40]	; 0x28
 800afc6:	3307      	adds	r3, #7
 800afc8:	f023 0307 	bic.w	r3, r3, #7
 800afcc:	f103 0208 	add.w	r2, r3, #8
 800afd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800afd4:	f8d4 b000 	ldr.w	fp, [r4]
 800afd8:	f8c8 2000 	str.w	r2, [r8]
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afe4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800afe8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800afec:	930b      	str	r3, [sp, #44]	; 0x2c
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	4640      	mov	r0, r8
 800aff4:	4b9c      	ldr	r3, [pc, #624]	; (800b268 <_printf_float+0x2cc>)
 800aff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aff8:	f7f5 fd08 	bl	8000a0c <__aeabi_dcmpun>
 800affc:	bb70      	cbnz	r0, 800b05c <_printf_float+0xc0>
 800affe:	f04f 32ff 	mov.w	r2, #4294967295
 800b002:	4640      	mov	r0, r8
 800b004:	4b98      	ldr	r3, [pc, #608]	; (800b268 <_printf_float+0x2cc>)
 800b006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b008:	f7f5 fce2 	bl	80009d0 <__aeabi_dcmple>
 800b00c:	bb30      	cbnz	r0, 800b05c <_printf_float+0xc0>
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	4640      	mov	r0, r8
 800b014:	4651      	mov	r1, sl
 800b016:	f7f5 fcd1 	bl	80009bc <__aeabi_dcmplt>
 800b01a:	b110      	cbz	r0, 800b022 <_printf_float+0x86>
 800b01c:	232d      	movs	r3, #45	; 0x2d
 800b01e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b022:	4b92      	ldr	r3, [pc, #584]	; (800b26c <_printf_float+0x2d0>)
 800b024:	4892      	ldr	r0, [pc, #584]	; (800b270 <_printf_float+0x2d4>)
 800b026:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b02a:	bf94      	ite	ls
 800b02c:	4698      	movls	r8, r3
 800b02e:	4680      	movhi	r8, r0
 800b030:	2303      	movs	r3, #3
 800b032:	f04f 0a00 	mov.w	sl, #0
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	f02b 0304 	bic.w	r3, fp, #4
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	4633      	mov	r3, r6
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	9700      	str	r7, [sp, #0]
 800b046:	aa0f      	add	r2, sp, #60	; 0x3c
 800b048:	f000 f9d4 	bl	800b3f4 <_printf_common>
 800b04c:	3001      	adds	r0, #1
 800b04e:	f040 8090 	bne.w	800b172 <_printf_float+0x1d6>
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	b011      	add	sp, #68	; 0x44
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	4642      	mov	r2, r8
 800b05e:	4653      	mov	r3, sl
 800b060:	4640      	mov	r0, r8
 800b062:	4651      	mov	r1, sl
 800b064:	f7f5 fcd2 	bl	8000a0c <__aeabi_dcmpun>
 800b068:	b148      	cbz	r0, 800b07e <_printf_float+0xe2>
 800b06a:	f1ba 0f00 	cmp.w	sl, #0
 800b06e:	bfb8      	it	lt
 800b070:	232d      	movlt	r3, #45	; 0x2d
 800b072:	4880      	ldr	r0, [pc, #512]	; (800b274 <_printf_float+0x2d8>)
 800b074:	bfb8      	it	lt
 800b076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b07a:	4b7f      	ldr	r3, [pc, #508]	; (800b278 <_printf_float+0x2dc>)
 800b07c:	e7d3      	b.n	800b026 <_printf_float+0x8a>
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	d142      	bne.n	800b10e <_printf_float+0x172>
 800b088:	2306      	movs	r3, #6
 800b08a:	6063      	str	r3, [r4, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	9206      	str	r2, [sp, #24]
 800b090:	aa0e      	add	r2, sp, #56	; 0x38
 800b092:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b096:	aa0d      	add	r2, sp, #52	; 0x34
 800b098:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b09c:	9203      	str	r2, [sp, #12]
 800b09e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b0a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	4653      	mov	r3, sl
 800b0b2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0b4:	f7ff fed4 	bl	800ae60 <__cvt>
 800b0b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	2947      	cmp	r1, #71	; 0x47
 800b0be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0c0:	d108      	bne.n	800b0d4 <_printf_float+0x138>
 800b0c2:	1cc8      	adds	r0, r1, #3
 800b0c4:	db02      	blt.n	800b0cc <_printf_float+0x130>
 800b0c6:	6863      	ldr	r3, [r4, #4]
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	dd40      	ble.n	800b14e <_printf_float+0x1b2>
 800b0cc:	f1a9 0902 	sub.w	r9, r9, #2
 800b0d0:	fa5f f989 	uxtb.w	r9, r9
 800b0d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b0d8:	d81f      	bhi.n	800b11a <_printf_float+0x17e>
 800b0da:	464a      	mov	r2, r9
 800b0dc:	3901      	subs	r1, #1
 800b0de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b0e4:	f7ff ff1b 	bl	800af1e <__exponent>
 800b0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0ea:	4682      	mov	sl, r0
 800b0ec:	1813      	adds	r3, r2, r0
 800b0ee:	2a01      	cmp	r2, #1
 800b0f0:	6123      	str	r3, [r4, #16]
 800b0f2:	dc02      	bgt.n	800b0fa <_printf_float+0x15e>
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	07d2      	lsls	r2, r2, #31
 800b0f8:	d501      	bpl.n	800b0fe <_printf_float+0x162>
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b102:	2b00      	cmp	r3, #0
 800b104:	d09b      	beq.n	800b03e <_printf_float+0xa2>
 800b106:	232d      	movs	r3, #45	; 0x2d
 800b108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b10c:	e797      	b.n	800b03e <_printf_float+0xa2>
 800b10e:	2947      	cmp	r1, #71	; 0x47
 800b110:	d1bc      	bne.n	800b08c <_printf_float+0xf0>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1ba      	bne.n	800b08c <_printf_float+0xf0>
 800b116:	2301      	movs	r3, #1
 800b118:	e7b7      	b.n	800b08a <_printf_float+0xee>
 800b11a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b11e:	d118      	bne.n	800b152 <_printf_float+0x1b6>
 800b120:	2900      	cmp	r1, #0
 800b122:	6863      	ldr	r3, [r4, #4]
 800b124:	dd0b      	ble.n	800b13e <_printf_float+0x1a2>
 800b126:	6121      	str	r1, [r4, #16]
 800b128:	b913      	cbnz	r3, 800b130 <_printf_float+0x194>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	07d0      	lsls	r0, r2, #31
 800b12e:	d502      	bpl.n	800b136 <_printf_float+0x19a>
 800b130:	3301      	adds	r3, #1
 800b132:	440b      	add	r3, r1
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	f04f 0a00 	mov.w	sl, #0
 800b13a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b13c:	e7df      	b.n	800b0fe <_printf_float+0x162>
 800b13e:	b913      	cbnz	r3, 800b146 <_printf_float+0x1aa>
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	07d2      	lsls	r2, r2, #31
 800b144:	d501      	bpl.n	800b14a <_printf_float+0x1ae>
 800b146:	3302      	adds	r3, #2
 800b148:	e7f4      	b.n	800b134 <_printf_float+0x198>
 800b14a:	2301      	movs	r3, #1
 800b14c:	e7f2      	b.n	800b134 <_printf_float+0x198>
 800b14e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b154:	4299      	cmp	r1, r3
 800b156:	db05      	blt.n	800b164 <_printf_float+0x1c8>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	6121      	str	r1, [r4, #16]
 800b15c:	07d8      	lsls	r0, r3, #31
 800b15e:	d5ea      	bpl.n	800b136 <_printf_float+0x19a>
 800b160:	1c4b      	adds	r3, r1, #1
 800b162:	e7e7      	b.n	800b134 <_printf_float+0x198>
 800b164:	2900      	cmp	r1, #0
 800b166:	bfcc      	ite	gt
 800b168:	2201      	movgt	r2, #1
 800b16a:	f1c1 0202 	rsble	r2, r1, #2
 800b16e:	4413      	add	r3, r2
 800b170:	e7e0      	b.n	800b134 <_printf_float+0x198>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	055a      	lsls	r2, r3, #21
 800b176:	d407      	bmi.n	800b188 <_printf_float+0x1ec>
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	4642      	mov	r2, r8
 800b17c:	4631      	mov	r1, r6
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	d12b      	bne.n	800b1de <_printf_float+0x242>
 800b186:	e764      	b.n	800b052 <_printf_float+0xb6>
 800b188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b18c:	f240 80dd 	bls.w	800b34a <_printf_float+0x3ae>
 800b190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	f7f5 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d033      	beq.n	800b208 <_printf_float+0x26c>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	4a35      	ldr	r2, [pc, #212]	; (800b27c <_printf_float+0x2e0>)
 800b1a8:	47b8      	blx	r7
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	f43f af51 	beq.w	800b052 <_printf_float+0xb6>
 800b1b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	db02      	blt.n	800b1be <_printf_float+0x222>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	07d8      	lsls	r0, r3, #31
 800b1bc:	d50f      	bpl.n	800b1de <_printf_float+0x242>
 800b1be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b8      	blx	r7
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	f43f af42 	beq.w	800b052 <_printf_float+0xb6>
 800b1ce:	f04f 0800 	mov.w	r8, #0
 800b1d2:	f104 091a 	add.w	r9, r4, #26
 800b1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	4543      	cmp	r3, r8
 800b1dc:	dc09      	bgt.n	800b1f2 <_printf_float+0x256>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	079b      	lsls	r3, r3, #30
 800b1e2:	f100 8102 	bmi.w	800b3ea <_printf_float+0x44e>
 800b1e6:	68e0      	ldr	r0, [r4, #12]
 800b1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1ea:	4298      	cmp	r0, r3
 800b1ec:	bfb8      	it	lt
 800b1ee:	4618      	movlt	r0, r3
 800b1f0:	e731      	b.n	800b056 <_printf_float+0xba>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	464a      	mov	r2, r9
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f af28 	beq.w	800b052 <_printf_float+0xb6>
 800b202:	f108 0801 	add.w	r8, r8, #1
 800b206:	e7e6      	b.n	800b1d6 <_printf_float+0x23a>
 800b208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc38      	bgt.n	800b280 <_printf_float+0x2e4>
 800b20e:	2301      	movs	r3, #1
 800b210:	4631      	mov	r1, r6
 800b212:	4628      	mov	r0, r5
 800b214:	4a19      	ldr	r2, [pc, #100]	; (800b27c <_printf_float+0x2e0>)
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f af1a 	beq.w	800b052 <_printf_float+0xb6>
 800b21e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b222:	4313      	orrs	r3, r2
 800b224:	d102      	bne.n	800b22c <_printf_float+0x290>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	07d9      	lsls	r1, r3, #31
 800b22a:	d5d8      	bpl.n	800b1de <_printf_float+0x242>
 800b22c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	47b8      	blx	r7
 800b236:	3001      	adds	r0, #1
 800b238:	f43f af0b 	beq.w	800b052 <_printf_float+0xb6>
 800b23c:	f04f 0900 	mov.w	r9, #0
 800b240:	f104 0a1a 	add.w	sl, r4, #26
 800b244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b246:	425b      	negs	r3, r3
 800b248:	454b      	cmp	r3, r9
 800b24a:	dc01      	bgt.n	800b250 <_printf_float+0x2b4>
 800b24c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b24e:	e794      	b.n	800b17a <_printf_float+0x1de>
 800b250:	2301      	movs	r3, #1
 800b252:	4652      	mov	r2, sl
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	f43f aef9 	beq.w	800b052 <_printf_float+0xb6>
 800b260:	f109 0901 	add.w	r9, r9, #1
 800b264:	e7ee      	b.n	800b244 <_printf_float+0x2a8>
 800b266:	bf00      	nop
 800b268:	7fefffff 	.word	0x7fefffff
 800b26c:	0800efa8 	.word	0x0800efa8
 800b270:	0800efac 	.word	0x0800efac
 800b274:	0800efb4 	.word	0x0800efb4
 800b278:	0800efb0 	.word	0x0800efb0
 800b27c:	0800efb8 	.word	0x0800efb8
 800b280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b284:	429a      	cmp	r2, r3
 800b286:	bfa8      	it	ge
 800b288:	461a      	movge	r2, r3
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	4691      	mov	r9, r2
 800b28e:	dc37      	bgt.n	800b300 <_printf_float+0x364>
 800b290:	f04f 0b00 	mov.w	fp, #0
 800b294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b298:	f104 021a 	add.w	r2, r4, #26
 800b29c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b2a0:	ebaa 0309 	sub.w	r3, sl, r9
 800b2a4:	455b      	cmp	r3, fp
 800b2a6:	dc33      	bgt.n	800b310 <_printf_float+0x374>
 800b2a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	db3b      	blt.n	800b328 <_printf_float+0x38c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d438      	bmi.n	800b328 <_printf_float+0x38c>
 800b2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2ba:	eba3 020a 	sub.w	r2, r3, sl
 800b2be:	eba3 0901 	sub.w	r9, r3, r1
 800b2c2:	4591      	cmp	r9, r2
 800b2c4:	bfa8      	it	ge
 800b2c6:	4691      	movge	r9, r2
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	dc34      	bgt.n	800b338 <_printf_float+0x39c>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2d6:	f104 0a1a 	add.w	sl, r4, #26
 800b2da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b2de:	1a9b      	subs	r3, r3, r2
 800b2e0:	eba3 0309 	sub.w	r3, r3, r9
 800b2e4:	4543      	cmp	r3, r8
 800b2e6:	f77f af7a 	ble.w	800b1de <_printf_float+0x242>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f aeac 	beq.w	800b052 <_printf_float+0xb6>
 800b2fa:	f108 0801 	add.w	r8, r8, #1
 800b2fe:	e7ec      	b.n	800b2da <_printf_float+0x33e>
 800b300:	4613      	mov	r3, r2
 800b302:	4631      	mov	r1, r6
 800b304:	4642      	mov	r2, r8
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	d1c0      	bne.n	800b290 <_printf_float+0x2f4>
 800b30e:	e6a0      	b.n	800b052 <_printf_float+0xb6>
 800b310:	2301      	movs	r3, #1
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	920b      	str	r2, [sp, #44]	; 0x2c
 800b318:	47b8      	blx	r7
 800b31a:	3001      	adds	r0, #1
 800b31c:	f43f ae99 	beq.w	800b052 <_printf_float+0xb6>
 800b320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b322:	f10b 0b01 	add.w	fp, fp, #1
 800b326:	e7b9      	b.n	800b29c <_printf_float+0x300>
 800b328:	4631      	mov	r1, r6
 800b32a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b32e:	4628      	mov	r0, r5
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	d1bf      	bne.n	800b2b6 <_printf_float+0x31a>
 800b336:	e68c      	b.n	800b052 <_printf_float+0xb6>
 800b338:	464b      	mov	r3, r9
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	eb08 020a 	add.w	r2, r8, sl
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	d1c2      	bne.n	800b2ce <_printf_float+0x332>
 800b348:	e683      	b.n	800b052 <_printf_float+0xb6>
 800b34a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b34c:	2a01      	cmp	r2, #1
 800b34e:	dc01      	bgt.n	800b354 <_printf_float+0x3b8>
 800b350:	07db      	lsls	r3, r3, #31
 800b352:	d537      	bpl.n	800b3c4 <_printf_float+0x428>
 800b354:	2301      	movs	r3, #1
 800b356:	4642      	mov	r2, r8
 800b358:	4631      	mov	r1, r6
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b8      	blx	r7
 800b35e:	3001      	adds	r0, #1
 800b360:	f43f ae77 	beq.w	800b052 <_printf_float+0xb6>
 800b364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	f43f ae6f 	beq.w	800b052 <_printf_float+0xb6>
 800b374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b378:	2200      	movs	r2, #0
 800b37a:	2300      	movs	r3, #0
 800b37c:	f7f5 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 800b380:	b9d8      	cbnz	r0, 800b3ba <_printf_float+0x41e>
 800b382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b384:	f108 0201 	add.w	r2, r8, #1
 800b388:	3b01      	subs	r3, #1
 800b38a:	4631      	mov	r1, r6
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b8      	blx	r7
 800b390:	3001      	adds	r0, #1
 800b392:	d10e      	bne.n	800b3b2 <_printf_float+0x416>
 800b394:	e65d      	b.n	800b052 <_printf_float+0xb6>
 800b396:	2301      	movs	r3, #1
 800b398:	464a      	mov	r2, r9
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f43f ae56 	beq.w	800b052 <_printf_float+0xb6>
 800b3a6:	f108 0801 	add.w	r8, r8, #1
 800b3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4543      	cmp	r3, r8
 800b3b0:	dcf1      	bgt.n	800b396 <_printf_float+0x3fa>
 800b3b2:	4653      	mov	r3, sl
 800b3b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3b8:	e6e0      	b.n	800b17c <_printf_float+0x1e0>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	f104 091a 	add.w	r9, r4, #26
 800b3c2:	e7f2      	b.n	800b3aa <_printf_float+0x40e>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	4642      	mov	r2, r8
 800b3c8:	e7df      	b.n	800b38a <_printf_float+0x3ee>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f ae3c 	beq.w	800b052 <_printf_float+0xb6>
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	68e3      	ldr	r3, [r4, #12]
 800b3e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3e2:	1a5b      	subs	r3, r3, r1
 800b3e4:	4543      	cmp	r3, r8
 800b3e6:	dcf0      	bgt.n	800b3ca <_printf_float+0x42e>
 800b3e8:	e6fd      	b.n	800b1e6 <_printf_float+0x24a>
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	f104 0919 	add.w	r9, r4, #25
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x442>

0800b3f4 <_printf_common>:
 800b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	4699      	mov	r9, r3
 800b3fc:	688a      	ldr	r2, [r1, #8]
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4607      	mov	r7, r0
 800b402:	4293      	cmp	r3, r2
 800b404:	bfb8      	it	lt
 800b406:	4613      	movlt	r3, r2
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b40e:	460c      	mov	r4, r1
 800b410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b414:	b10a      	cbz	r2, 800b41a <_printf_common+0x26>
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	0699      	lsls	r1, r3, #26
 800b41e:	bf42      	ittt	mi
 800b420:	6833      	ldrmi	r3, [r6, #0]
 800b422:	3302      	addmi	r3, #2
 800b424:	6033      	strmi	r3, [r6, #0]
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	f015 0506 	ands.w	r5, r5, #6
 800b42c:	d106      	bne.n	800b43c <_printf_common+0x48>
 800b42e:	f104 0a19 	add.w	sl, r4, #25
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc28      	bgt.n	800b48e <_printf_common+0x9a>
 800b43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b440:	1e13      	subs	r3, r2, #0
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	bf18      	it	ne
 800b446:	2301      	movne	r3, #1
 800b448:	0692      	lsls	r2, r2, #26
 800b44a:	d42d      	bmi.n	800b4a8 <_printf_common+0xb4>
 800b44c:	4649      	mov	r1, r9
 800b44e:	4638      	mov	r0, r7
 800b450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b454:	47c0      	blx	r8
 800b456:	3001      	adds	r0, #1
 800b458:	d020      	beq.n	800b49c <_printf_common+0xa8>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	68e5      	ldr	r5, [r4, #12]
 800b45e:	f003 0306 	and.w	r3, r3, #6
 800b462:	2b04      	cmp	r3, #4
 800b464:	bf18      	it	ne
 800b466:	2500      	movne	r5, #0
 800b468:	6832      	ldr	r2, [r6, #0]
 800b46a:	f04f 0600 	mov.w	r6, #0
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	bf08      	it	eq
 800b472:	1aad      	subeq	r5, r5, r2
 800b474:	6922      	ldr	r2, [r4, #16]
 800b476:	bf08      	it	eq
 800b478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bfc4      	itt	gt
 800b480:	1a9b      	subgt	r3, r3, r2
 800b482:	18ed      	addgt	r5, r5, r3
 800b484:	341a      	adds	r4, #26
 800b486:	42b5      	cmp	r5, r6
 800b488:	d11a      	bne.n	800b4c0 <_printf_common+0xcc>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e008      	b.n	800b4a0 <_printf_common+0xac>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4649      	mov	r1, r9
 800b494:	4638      	mov	r0, r7
 800b496:	47c0      	blx	r8
 800b498:	3001      	adds	r0, #1
 800b49a:	d103      	bne.n	800b4a4 <_printf_common+0xb0>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	e7c4      	b.n	800b432 <_printf_common+0x3e>
 800b4a8:	2030      	movs	r0, #48	; 0x30
 800b4aa:	18e1      	adds	r1, r4, r3
 800b4ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b6:	4422      	add	r2, r4
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4be:	e7c5      	b.n	800b44c <_printf_common+0x58>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d0e6      	beq.n	800b49c <_printf_common+0xa8>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7d9      	b.n	800b486 <_printf_common+0x92>
	...

0800b4d4 <_printf_i>:
 800b4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	7e0f      	ldrb	r7, [r1, #24]
 800b4da:	4691      	mov	r9, r2
 800b4dc:	2f78      	cmp	r7, #120	; 0x78
 800b4de:	4680      	mov	r8, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	469a      	mov	sl, r3
 800b4e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ea:	d807      	bhi.n	800b4fc <_printf_i+0x28>
 800b4ec:	2f62      	cmp	r7, #98	; 0x62
 800b4ee:	d80a      	bhi.n	800b506 <_printf_i+0x32>
 800b4f0:	2f00      	cmp	r7, #0
 800b4f2:	f000 80d9 	beq.w	800b6a8 <_printf_i+0x1d4>
 800b4f6:	2f58      	cmp	r7, #88	; 0x58
 800b4f8:	f000 80a4 	beq.w	800b644 <_printf_i+0x170>
 800b4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b504:	e03a      	b.n	800b57c <_printf_i+0xa8>
 800b506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50a:	2b15      	cmp	r3, #21
 800b50c:	d8f6      	bhi.n	800b4fc <_printf_i+0x28>
 800b50e:	a101      	add	r1, pc, #4	; (adr r1, 800b514 <_printf_i+0x40>)
 800b510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b514:	0800b56d 	.word	0x0800b56d
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b4fd 	.word	0x0800b4fd
 800b520:	0800b4fd 	.word	0x0800b4fd
 800b524:	0800b4fd 	.word	0x0800b4fd
 800b528:	0800b4fd 	.word	0x0800b4fd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4fd 	.word	0x0800b4fd
 800b534:	0800b4fd 	.word	0x0800b4fd
 800b538:	0800b4fd 	.word	0x0800b4fd
 800b53c:	0800b4fd 	.word	0x0800b4fd
 800b540:	0800b68f 	.word	0x0800b68f
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b671 	.word	0x0800b671
 800b54c:	0800b4fd 	.word	0x0800b4fd
 800b550:	0800b4fd 	.word	0x0800b4fd
 800b554:	0800b6b1 	.word	0x0800b6b1
 800b558:	0800b4fd 	.word	0x0800b4fd
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b4fd 	.word	0x0800b4fd
 800b564:	0800b4fd 	.word	0x0800b4fd
 800b568:	0800b679 	.word	0x0800b679
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0a4      	b.n	800b6ca <_printf_i+0x1f6>
 800b580:	6820      	ldr	r0, [r4, #0]
 800b582:	6829      	ldr	r1, [r5, #0]
 800b584:	0606      	lsls	r6, r0, #24
 800b586:	f101 0304 	add.w	r3, r1, #4
 800b58a:	d50a      	bpl.n	800b5a2 <_printf_i+0xce>
 800b58c:	680e      	ldr	r6, [r1, #0]
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	2e00      	cmp	r6, #0
 800b592:	da03      	bge.n	800b59c <_printf_i+0xc8>
 800b594:	232d      	movs	r3, #45	; 0x2d
 800b596:	4276      	negs	r6, r6
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b59c:	230a      	movs	r3, #10
 800b59e:	485e      	ldr	r0, [pc, #376]	; (800b718 <_printf_i+0x244>)
 800b5a0:	e019      	b.n	800b5d6 <_printf_i+0x102>
 800b5a2:	680e      	ldr	r6, [r1, #0]
 800b5a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	bf18      	it	ne
 800b5ac:	b236      	sxthne	r6, r6
 800b5ae:	e7ef      	b.n	800b590 <_printf_i+0xbc>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	1d19      	adds	r1, r3, #4
 800b5b6:	6029      	str	r1, [r5, #0]
 800b5b8:	0601      	lsls	r1, r0, #24
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0xec>
 800b5bc:	681e      	ldr	r6, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <_printf_i+0xf2>
 800b5c0:	0646      	lsls	r6, r0, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0xe8>
 800b5c4:	881e      	ldrh	r6, [r3, #0]
 800b5c6:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c8:	bf0c      	ite	eq
 800b5ca:	2308      	moveq	r3, #8
 800b5cc:	230a      	movne	r3, #10
 800b5ce:	4852      	ldr	r0, [pc, #328]	; (800b718 <_printf_i+0x244>)
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d6:	6865      	ldr	r5, [r4, #4]
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	bfa8      	it	ge
 800b5dc:	6821      	ldrge	r1, [r4, #0]
 800b5de:	60a5      	str	r5, [r4, #8]
 800b5e0:	bfa4      	itt	ge
 800b5e2:	f021 0104 	bicge.w	r1, r1, #4
 800b5e6:	6021      	strge	r1, [r4, #0]
 800b5e8:	b90e      	cbnz	r6, 800b5ee <_printf_i+0x11a>
 800b5ea:	2d00      	cmp	r5, #0
 800b5ec:	d04d      	beq.n	800b68a <_printf_i+0x1b6>
 800b5ee:	4615      	mov	r5, r2
 800b5f0:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5f4:	fb03 6711 	mls	r7, r3, r1, r6
 800b5f8:	5dc7      	ldrb	r7, [r0, r7]
 800b5fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5fe:	4637      	mov	r7, r6
 800b600:	42bb      	cmp	r3, r7
 800b602:	460e      	mov	r6, r1
 800b604:	d9f4      	bls.n	800b5f0 <_printf_i+0x11c>
 800b606:	2b08      	cmp	r3, #8
 800b608:	d10b      	bne.n	800b622 <_printf_i+0x14e>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	07de      	lsls	r6, r3, #31
 800b60e:	d508      	bpl.n	800b622 <_printf_i+0x14e>
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	6861      	ldr	r1, [r4, #4]
 800b614:	4299      	cmp	r1, r3
 800b616:	bfde      	ittt	le
 800b618:	2330      	movle	r3, #48	; 0x30
 800b61a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b61e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b622:	1b52      	subs	r2, r2, r5
 800b624:	6122      	str	r2, [r4, #16]
 800b626:	464b      	mov	r3, r9
 800b628:	4621      	mov	r1, r4
 800b62a:	4640      	mov	r0, r8
 800b62c:	f8cd a000 	str.w	sl, [sp]
 800b630:	aa03      	add	r2, sp, #12
 800b632:	f7ff fedf 	bl	800b3f4 <_printf_common>
 800b636:	3001      	adds	r0, #1
 800b638:	d14c      	bne.n	800b6d4 <_printf_i+0x200>
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295
 800b63e:	b004      	add	sp, #16
 800b640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b644:	4834      	ldr	r0, [pc, #208]	; (800b718 <_printf_i+0x244>)
 800b646:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b64a:	6829      	ldr	r1, [r5, #0]
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b652:	6029      	str	r1, [r5, #0]
 800b654:	061d      	lsls	r5, r3, #24
 800b656:	d514      	bpl.n	800b682 <_printf_i+0x1ae>
 800b658:	07df      	lsls	r7, r3, #31
 800b65a:	bf44      	itt	mi
 800b65c:	f043 0320 	orrmi.w	r3, r3, #32
 800b660:	6023      	strmi	r3, [r4, #0]
 800b662:	b91e      	cbnz	r6, 800b66c <_printf_i+0x198>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	f023 0320 	bic.w	r3, r3, #32
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	2310      	movs	r3, #16
 800b66e:	e7af      	b.n	800b5d0 <_printf_i+0xfc>
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	f043 0320 	orr.w	r3, r3, #32
 800b676:	6023      	str	r3, [r4, #0]
 800b678:	2378      	movs	r3, #120	; 0x78
 800b67a:	4828      	ldr	r0, [pc, #160]	; (800b71c <_printf_i+0x248>)
 800b67c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b680:	e7e3      	b.n	800b64a <_printf_i+0x176>
 800b682:	0659      	lsls	r1, r3, #25
 800b684:	bf48      	it	mi
 800b686:	b2b6      	uxthmi	r6, r6
 800b688:	e7e6      	b.n	800b658 <_printf_i+0x184>
 800b68a:	4615      	mov	r5, r2
 800b68c:	e7bb      	b.n	800b606 <_printf_i+0x132>
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	6826      	ldr	r6, [r4, #0]
 800b692:	1d18      	adds	r0, r3, #4
 800b694:	6961      	ldr	r1, [r4, #20]
 800b696:	6028      	str	r0, [r5, #0]
 800b698:	0635      	lsls	r5, r6, #24
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	d501      	bpl.n	800b6a2 <_printf_i+0x1ce>
 800b69e:	6019      	str	r1, [r3, #0]
 800b6a0:	e002      	b.n	800b6a8 <_printf_i+0x1d4>
 800b6a2:	0670      	lsls	r0, r6, #25
 800b6a4:	d5fb      	bpl.n	800b69e <_printf_i+0x1ca>
 800b6a6:	8019      	strh	r1, [r3, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4615      	mov	r5, r2
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	e7ba      	b.n	800b626 <_printf_i+0x152>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	1d1a      	adds	r2, r3, #4
 800b6b6:	602a      	str	r2, [r5, #0]
 800b6b8:	681d      	ldr	r5, [r3, #0]
 800b6ba:	6862      	ldr	r2, [r4, #4]
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f000 fed5 	bl	800c46c <memchr>
 800b6c2:	b108      	cbz	r0, 800b6c8 <_printf_i+0x1f4>
 800b6c4:	1b40      	subs	r0, r0, r5
 800b6c6:	6060      	str	r0, [r4, #4]
 800b6c8:	6863      	ldr	r3, [r4, #4]
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d2:	e7a8      	b.n	800b626 <_printf_i+0x152>
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	47d0      	blx	sl
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d0ab      	beq.n	800b63a <_printf_i+0x166>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	079b      	lsls	r3, r3, #30
 800b6e6:	d413      	bmi.n	800b710 <_printf_i+0x23c>
 800b6e8:	68e0      	ldr	r0, [r4, #12]
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	4298      	cmp	r0, r3
 800b6ee:	bfb8      	it	lt
 800b6f0:	4618      	movlt	r0, r3
 800b6f2:	e7a4      	b.n	800b63e <_printf_i+0x16a>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	47d0      	blx	sl
 800b6fe:	3001      	adds	r0, #1
 800b700:	d09b      	beq.n	800b63a <_printf_i+0x166>
 800b702:	3501      	adds	r5, #1
 800b704:	68e3      	ldr	r3, [r4, #12]
 800b706:	9903      	ldr	r1, [sp, #12]
 800b708:	1a5b      	subs	r3, r3, r1
 800b70a:	42ab      	cmp	r3, r5
 800b70c:	dcf2      	bgt.n	800b6f4 <_printf_i+0x220>
 800b70e:	e7eb      	b.n	800b6e8 <_printf_i+0x214>
 800b710:	2500      	movs	r5, #0
 800b712:	f104 0619 	add.w	r6, r4, #25
 800b716:	e7f5      	b.n	800b704 <_printf_i+0x230>
 800b718:	0800efba 	.word	0x0800efba
 800b71c:	0800efcb 	.word	0x0800efcb

0800b720 <siprintf>:
 800b720:	b40e      	push	{r1, r2, r3}
 800b722:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b726:	b500      	push	{lr}
 800b728:	b09c      	sub	sp, #112	; 0x70
 800b72a:	ab1d      	add	r3, sp, #116	; 0x74
 800b72c:	9002      	str	r0, [sp, #8]
 800b72e:	9006      	str	r0, [sp, #24]
 800b730:	9107      	str	r1, [sp, #28]
 800b732:	9104      	str	r1, [sp, #16]
 800b734:	4808      	ldr	r0, [pc, #32]	; (800b758 <siprintf+0x38>)
 800b736:	4909      	ldr	r1, [pc, #36]	; (800b75c <siprintf+0x3c>)
 800b738:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73c:	9105      	str	r1, [sp, #20]
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	a902      	add	r1, sp, #8
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	f001 fb7c 	bl	800ce40 <_svfiprintf_r>
 800b748:	2200      	movs	r2, #0
 800b74a:	9b02      	ldr	r3, [sp, #8]
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	b01c      	add	sp, #112	; 0x70
 800b750:	f85d eb04 	ldr.w	lr, [sp], #4
 800b754:	b003      	add	sp, #12
 800b756:	4770      	bx	lr
 800b758:	20000184 	.word	0x20000184
 800b75c:	ffff0208 	.word	0xffff0208

0800b760 <quorem>:
 800b760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	6903      	ldr	r3, [r0, #16]
 800b766:	690c      	ldr	r4, [r1, #16]
 800b768:	4607      	mov	r7, r0
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	f2c0 8082 	blt.w	800b874 <quorem+0x114>
 800b770:	3c01      	subs	r4, #1
 800b772:	f100 0514 	add.w	r5, r0, #20
 800b776:	f101 0814 	add.w	r8, r1, #20
 800b77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b788:	3301      	adds	r3, #1
 800b78a:	429a      	cmp	r2, r3
 800b78c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b798:	d331      	bcc.n	800b7fe <quorem+0x9e>
 800b79a:	f04f 0e00 	mov.w	lr, #0
 800b79e:	4640      	mov	r0, r8
 800b7a0:	46ac      	mov	ip, r5
 800b7a2:	46f2      	mov	sl, lr
 800b7a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7a8:	b293      	uxth	r3, r2
 800b7aa:	fb06 e303 	mla	r3, r6, r3, lr
 800b7ae:	0c12      	lsrs	r2, r2, #16
 800b7b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	fb06 e202 	mla	r2, r6, r2, lr
 800b7ba:	ebaa 0303 	sub.w	r3, sl, r3
 800b7be:	f8dc a000 	ldr.w	sl, [ip]
 800b7c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7c6:	fa1f fa8a 	uxth.w	sl, sl
 800b7ca:	4453      	add	r3, sl
 800b7cc:	f8dc a000 	ldr.w	sl, [ip]
 800b7d0:	b292      	uxth	r2, r2
 800b7d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7e0:	4581      	cmp	r9, r0
 800b7e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7e6:	f84c 3b04 	str.w	r3, [ip], #4
 800b7ea:	d2db      	bcs.n	800b7a4 <quorem+0x44>
 800b7ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7f0:	b92b      	cbnz	r3, 800b7fe <quorem+0x9e>
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	429d      	cmp	r5, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	d32f      	bcc.n	800b85c <quorem+0xfc>
 800b7fc:	613c      	str	r4, [r7, #16]
 800b7fe:	4638      	mov	r0, r7
 800b800:	f001 f8ce 	bl	800c9a0 <__mcmp>
 800b804:	2800      	cmp	r0, #0
 800b806:	db25      	blt.n	800b854 <quorem+0xf4>
 800b808:	4628      	mov	r0, r5
 800b80a:	f04f 0c00 	mov.w	ip, #0
 800b80e:	3601      	adds	r6, #1
 800b810:	f858 1b04 	ldr.w	r1, [r8], #4
 800b814:	f8d0 e000 	ldr.w	lr, [r0]
 800b818:	b28b      	uxth	r3, r1
 800b81a:	ebac 0303 	sub.w	r3, ip, r3
 800b81e:	fa1f f28e 	uxth.w	r2, lr
 800b822:	4413      	add	r3, r2
 800b824:	0c0a      	lsrs	r2, r1, #16
 800b826:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b82a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b82e:	b29b      	uxth	r3, r3
 800b830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b834:	45c1      	cmp	r9, r8
 800b836:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b83a:	f840 3b04 	str.w	r3, [r0], #4
 800b83e:	d2e7      	bcs.n	800b810 <quorem+0xb0>
 800b840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b848:	b922      	cbnz	r2, 800b854 <quorem+0xf4>
 800b84a:	3b04      	subs	r3, #4
 800b84c:	429d      	cmp	r5, r3
 800b84e:	461a      	mov	r2, r3
 800b850:	d30a      	bcc.n	800b868 <quorem+0x108>
 800b852:	613c      	str	r4, [r7, #16]
 800b854:	4630      	mov	r0, r6
 800b856:	b003      	add	sp, #12
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	6812      	ldr	r2, [r2, #0]
 800b85e:	3b04      	subs	r3, #4
 800b860:	2a00      	cmp	r2, #0
 800b862:	d1cb      	bne.n	800b7fc <quorem+0x9c>
 800b864:	3c01      	subs	r4, #1
 800b866:	e7c6      	b.n	800b7f6 <quorem+0x96>
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	3b04      	subs	r3, #4
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	d1f0      	bne.n	800b852 <quorem+0xf2>
 800b870:	3c01      	subs	r4, #1
 800b872:	e7eb      	b.n	800b84c <quorem+0xec>
 800b874:	2000      	movs	r0, #0
 800b876:	e7ee      	b.n	800b856 <quorem+0xf6>

0800b878 <_dtoa_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	4616      	mov	r6, r2
 800b87e:	461f      	mov	r7, r3
 800b880:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b882:	b099      	sub	sp, #100	; 0x64
 800b884:	4605      	mov	r5, r0
 800b886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b88a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b88e:	b974      	cbnz	r4, 800b8ae <_dtoa_r+0x36>
 800b890:	2010      	movs	r0, #16
 800b892:	f000 fde3 	bl	800c45c <malloc>
 800b896:	4602      	mov	r2, r0
 800b898:	6268      	str	r0, [r5, #36]	; 0x24
 800b89a:	b920      	cbnz	r0, 800b8a6 <_dtoa_r+0x2e>
 800b89c:	21ea      	movs	r1, #234	; 0xea
 800b89e:	4ba8      	ldr	r3, [pc, #672]	; (800bb40 <_dtoa_r+0x2c8>)
 800b8a0:	48a8      	ldr	r0, [pc, #672]	; (800bb44 <_dtoa_r+0x2cc>)
 800b8a2:	f001 fbdd 	bl	800d060 <__assert_func>
 800b8a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8aa:	6004      	str	r4, [r0, #0]
 800b8ac:	60c4      	str	r4, [r0, #12]
 800b8ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8b0:	6819      	ldr	r1, [r3, #0]
 800b8b2:	b151      	cbz	r1, 800b8ca <_dtoa_r+0x52>
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	4093      	lsls	r3, r2
 800b8ba:	604a      	str	r2, [r1, #4]
 800b8bc:	608b      	str	r3, [r1, #8]
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 fe30 	bl	800c524 <_Bfree>
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	1e3b      	subs	r3, r7, #0
 800b8cc:	bfaf      	iteee	ge
 800b8ce:	2300      	movge	r3, #0
 800b8d0:	2201      	movlt	r2, #1
 800b8d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8d6:	9305      	strlt	r3, [sp, #20]
 800b8d8:	bfa8      	it	ge
 800b8da:	f8c8 3000 	strge.w	r3, [r8]
 800b8de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b8e2:	4b99      	ldr	r3, [pc, #612]	; (800bb48 <_dtoa_r+0x2d0>)
 800b8e4:	bfb8      	it	lt
 800b8e6:	f8c8 2000 	strlt.w	r2, [r8]
 800b8ea:	ea33 0309 	bics.w	r3, r3, r9
 800b8ee:	d119      	bne.n	800b924 <_dtoa_r+0xac>
 800b8f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8fc:	4333      	orrs	r3, r6
 800b8fe:	f000 857f 	beq.w	800c400 <_dtoa_r+0xb88>
 800b902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b904:	b953      	cbnz	r3, 800b91c <_dtoa_r+0xa4>
 800b906:	4b91      	ldr	r3, [pc, #580]	; (800bb4c <_dtoa_r+0x2d4>)
 800b908:	e022      	b.n	800b950 <_dtoa_r+0xd8>
 800b90a:	4b91      	ldr	r3, [pc, #580]	; (800bb50 <_dtoa_r+0x2d8>)
 800b90c:	9303      	str	r3, [sp, #12]
 800b90e:	3308      	adds	r3, #8
 800b910:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	9803      	ldr	r0, [sp, #12]
 800b916:	b019      	add	sp, #100	; 0x64
 800b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91c:	4b8b      	ldr	r3, [pc, #556]	; (800bb4c <_dtoa_r+0x2d4>)
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	3303      	adds	r3, #3
 800b922:	e7f5      	b.n	800b910 <_dtoa_r+0x98>
 800b924:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b928:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b92c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b930:	2200      	movs	r2, #0
 800b932:	2300      	movs	r3, #0
 800b934:	f7f5 f838 	bl	80009a8 <__aeabi_dcmpeq>
 800b938:	4680      	mov	r8, r0
 800b93a:	b158      	cbz	r0, 800b954 <_dtoa_r+0xdc>
 800b93c:	2301      	movs	r3, #1
 800b93e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8558 	beq.w	800c3fa <_dtoa_r+0xb82>
 800b94a:	4882      	ldr	r0, [pc, #520]	; (800bb54 <_dtoa_r+0x2dc>)
 800b94c:	6018      	str	r0, [r3, #0]
 800b94e:	1e43      	subs	r3, r0, #1
 800b950:	9303      	str	r3, [sp, #12]
 800b952:	e7df      	b.n	800b914 <_dtoa_r+0x9c>
 800b954:	ab16      	add	r3, sp, #88	; 0x58
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	ab17      	add	r3, sp, #92	; 0x5c
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4628      	mov	r0, r5
 800b95e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b962:	f001 f8c5 	bl	800caf0 <__d2b>
 800b966:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b96a:	4683      	mov	fp, r0
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	d07f      	beq.n	800ba70 <_dtoa_r+0x1f8>
 800b970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b976:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b97a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b97e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b982:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b986:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b98a:	2200      	movs	r2, #0
 800b98c:	4b72      	ldr	r3, [pc, #456]	; (800bb58 <_dtoa_r+0x2e0>)
 800b98e:	f7f4 fbeb 	bl	8000168 <__aeabi_dsub>
 800b992:	a365      	add	r3, pc, #404	; (adr r3, 800bb28 <_dtoa_r+0x2b0>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fd9e 	bl	80004d8 <__aeabi_dmul>
 800b99c:	a364      	add	r3, pc, #400	; (adr r3, 800bb30 <_dtoa_r+0x2b8>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fbe3 	bl	800016c <__adddf3>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	460f      	mov	r7, r1
 800b9ac:	f7f4 fd2a 	bl	8000404 <__aeabi_i2d>
 800b9b0:	a361      	add	r3, pc, #388	; (adr r3, 800bb38 <_dtoa_r+0x2c0>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f7f4 fd8f 	bl	80004d8 <__aeabi_dmul>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7f4 fbd3 	bl	800016c <__adddf3>
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	f7f5 f835 	bl	8000a38 <__aeabi_d2iz>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4682      	mov	sl, r0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	4639      	mov	r1, r7
 800b9d8:	f7f4 fff0 	bl	80009bc <__aeabi_dcmplt>
 800b9dc:	b148      	cbz	r0, 800b9f2 <_dtoa_r+0x17a>
 800b9de:	4650      	mov	r0, sl
 800b9e0:	f7f4 fd10 	bl	8000404 <__aeabi_i2d>
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	f7f4 ffde 	bl	80009a8 <__aeabi_dcmpeq>
 800b9ec:	b908      	cbnz	r0, 800b9f2 <_dtoa_r+0x17a>
 800b9ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9f2:	f1ba 0f16 	cmp.w	sl, #22
 800b9f6:	d858      	bhi.n	800baaa <_dtoa_r+0x232>
 800b9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9fc:	4b57      	ldr	r3, [pc, #348]	; (800bb5c <_dtoa_r+0x2e4>)
 800b9fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 ffd9 	bl	80009bc <__aeabi_dcmplt>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d04f      	beq.n	800baae <_dtoa_r+0x236>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba18:	1b1c      	subs	r4, r3, r4
 800ba1a:	1e63      	subs	r3, r4, #1
 800ba1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1e:	bf49      	itett	mi
 800ba20:	f1c4 0301 	rsbmi	r3, r4, #1
 800ba24:	2300      	movpl	r3, #0
 800ba26:	9306      	strmi	r3, [sp, #24]
 800ba28:	2300      	movmi	r3, #0
 800ba2a:	bf54      	ite	pl
 800ba2c:	9306      	strpl	r3, [sp, #24]
 800ba2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba30:	f1ba 0f00 	cmp.w	sl, #0
 800ba34:	db3d      	blt.n	800bab2 <_dtoa_r+0x23a>
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ba3c:	4453      	add	r3, sl
 800ba3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba40:	2300      	movs	r3, #0
 800ba42:	930a      	str	r3, [sp, #40]	; 0x28
 800ba44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba46:	2b09      	cmp	r3, #9
 800ba48:	f200 808c 	bhi.w	800bb64 <_dtoa_r+0x2ec>
 800ba4c:	2b05      	cmp	r3, #5
 800ba4e:	bfc4      	itt	gt
 800ba50:	3b04      	subgt	r3, #4
 800ba52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ba54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba56:	bfc8      	it	gt
 800ba58:	2400      	movgt	r4, #0
 800ba5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ba5e:	bfd8      	it	le
 800ba60:	2401      	movle	r4, #1
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	f200 808a 	bhi.w	800bb7c <_dtoa_r+0x304>
 800ba68:	e8df f003 	tbb	[pc, r3]
 800ba6c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ba70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ba74:	441c      	add	r4, r3
 800ba76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ba7a:	2b20      	cmp	r3, #32
 800ba7c:	bfc3      	ittte	gt
 800ba7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ba86:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba8a:	f1c3 0320 	rsble	r3, r3, #32
 800ba8e:	bfc6      	itte	gt
 800ba90:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba94:	4318      	orrgt	r0, r3
 800ba96:	fa06 f003 	lslle.w	r0, r6, r3
 800ba9a:	f7f4 fca3 	bl	80003e4 <__aeabi_ui2d>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800baa4:	3c01      	subs	r4, #1
 800baa6:	9313      	str	r3, [sp, #76]	; 0x4c
 800baa8:	e76f      	b.n	800b98a <_dtoa_r+0x112>
 800baaa:	2301      	movs	r3, #1
 800baac:	e7b2      	b.n	800ba14 <_dtoa_r+0x19c>
 800baae:	900f      	str	r0, [sp, #60]	; 0x3c
 800bab0:	e7b1      	b.n	800ba16 <_dtoa_r+0x19e>
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	eba3 030a 	sub.w	r3, r3, sl
 800bab8:	9306      	str	r3, [sp, #24]
 800baba:	f1ca 0300 	rsb	r3, sl, #0
 800babe:	930a      	str	r3, [sp, #40]	; 0x28
 800bac0:	2300      	movs	r3, #0
 800bac2:	930e      	str	r3, [sp, #56]	; 0x38
 800bac4:	e7be      	b.n	800ba44 <_dtoa_r+0x1cc>
 800bac6:	2300      	movs	r3, #0
 800bac8:	930b      	str	r3, [sp, #44]	; 0x2c
 800baca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dc58      	bgt.n	800bb82 <_dtoa_r+0x30a>
 800bad0:	f04f 0901 	mov.w	r9, #1
 800bad4:	464b      	mov	r3, r9
 800bad6:	f8cd 9020 	str.w	r9, [sp, #32]
 800bada:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bade:	2200      	movs	r2, #0
 800bae0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bae2:	6042      	str	r2, [r0, #4]
 800bae4:	2204      	movs	r2, #4
 800bae6:	f102 0614 	add.w	r6, r2, #20
 800baea:	429e      	cmp	r6, r3
 800baec:	6841      	ldr	r1, [r0, #4]
 800baee:	d94e      	bls.n	800bb8e <_dtoa_r+0x316>
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 fcd7 	bl	800c4a4 <_Balloc>
 800baf6:	9003      	str	r0, [sp, #12]
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d14c      	bne.n	800bb96 <_dtoa_r+0x31e>
 800bafc:	4602      	mov	r2, r0
 800bafe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb02:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <_dtoa_r+0x2e8>)
 800bb04:	e6cc      	b.n	800b8a0 <_dtoa_r+0x28>
 800bb06:	2301      	movs	r3, #1
 800bb08:	e7de      	b.n	800bac8 <_dtoa_r+0x250>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb10:	eb0a 0903 	add.w	r9, sl, r3
 800bb14:	f109 0301 	add.w	r3, r9, #1
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	bfb8      	it	lt
 800bb1e:	2301      	movlt	r3, #1
 800bb20:	e7dd      	b.n	800bade <_dtoa_r+0x266>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e7f2      	b.n	800bb0c <_dtoa_r+0x294>
 800bb26:	bf00      	nop
 800bb28:	636f4361 	.word	0x636f4361
 800bb2c:	3fd287a7 	.word	0x3fd287a7
 800bb30:	8b60c8b3 	.word	0x8b60c8b3
 800bb34:	3fc68a28 	.word	0x3fc68a28
 800bb38:	509f79fb 	.word	0x509f79fb
 800bb3c:	3fd34413 	.word	0x3fd34413
 800bb40:	0800efe9 	.word	0x0800efe9
 800bb44:	0800f000 	.word	0x0800f000
 800bb48:	7ff00000 	.word	0x7ff00000
 800bb4c:	0800efe5 	.word	0x0800efe5
 800bb50:	0800efdc 	.word	0x0800efdc
 800bb54:	0800efb9 	.word	0x0800efb9
 800bb58:	3ff80000 	.word	0x3ff80000
 800bb5c:	0800f0f0 	.word	0x0800f0f0
 800bb60:	0800f05b 	.word	0x0800f05b
 800bb64:	2401      	movs	r4, #1
 800bb66:	2300      	movs	r3, #0
 800bb68:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb6a:	9322      	str	r3, [sp, #136]	; 0x88
 800bb6c:	f04f 39ff 	mov.w	r9, #4294967295
 800bb70:	2200      	movs	r2, #0
 800bb72:	2312      	movs	r3, #18
 800bb74:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb78:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb7a:	e7b0      	b.n	800bade <_dtoa_r+0x266>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb80:	e7f4      	b.n	800bb6c <_dtoa_r+0x2f4>
 800bb82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bb86:	464b      	mov	r3, r9
 800bb88:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb8c:	e7a7      	b.n	800bade <_dtoa_r+0x266>
 800bb8e:	3101      	adds	r1, #1
 800bb90:	6041      	str	r1, [r0, #4]
 800bb92:	0052      	lsls	r2, r2, #1
 800bb94:	e7a7      	b.n	800bae6 <_dtoa_r+0x26e>
 800bb96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb98:	9a03      	ldr	r2, [sp, #12]
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b0e      	cmp	r3, #14
 800bba0:	f200 80a8 	bhi.w	800bcf4 <_dtoa_r+0x47c>
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	f000 80a5 	beq.w	800bcf4 <_dtoa_r+0x47c>
 800bbaa:	f1ba 0f00 	cmp.w	sl, #0
 800bbae:	dd34      	ble.n	800bc1a <_dtoa_r+0x3a2>
 800bbb0:	4a9a      	ldr	r2, [pc, #616]	; (800be1c <_dtoa_r+0x5a4>)
 800bbb2:	f00a 030f 	and.w	r3, sl, #15
 800bbb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bbbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bbc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bbca:	d016      	beq.n	800bbfa <_dtoa_r+0x382>
 800bbcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbd0:	4b93      	ldr	r3, [pc, #588]	; (800be20 <_dtoa_r+0x5a8>)
 800bbd2:	2703      	movs	r7, #3
 800bbd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbd8:	f7f4 fda8 	bl	800072c <__aeabi_ddiv>
 800bbdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbe0:	f004 040f 	and.w	r4, r4, #15
 800bbe4:	4e8e      	ldr	r6, [pc, #568]	; (800be20 <_dtoa_r+0x5a8>)
 800bbe6:	b954      	cbnz	r4, 800bbfe <_dtoa_r+0x386>
 800bbe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbf0:	f7f4 fd9c 	bl	800072c <__aeabi_ddiv>
 800bbf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbf8:	e029      	b.n	800bc4e <_dtoa_r+0x3d6>
 800bbfa:	2702      	movs	r7, #2
 800bbfc:	e7f2      	b.n	800bbe4 <_dtoa_r+0x36c>
 800bbfe:	07e1      	lsls	r1, r4, #31
 800bc00:	d508      	bpl.n	800bc14 <_dtoa_r+0x39c>
 800bc02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc0a:	f7f4 fc65 	bl	80004d8 <__aeabi_dmul>
 800bc0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc12:	3701      	adds	r7, #1
 800bc14:	1064      	asrs	r4, r4, #1
 800bc16:	3608      	adds	r6, #8
 800bc18:	e7e5      	b.n	800bbe6 <_dtoa_r+0x36e>
 800bc1a:	f000 80a5 	beq.w	800bd68 <_dtoa_r+0x4f0>
 800bc1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc22:	f1ca 0400 	rsb	r4, sl, #0
 800bc26:	4b7d      	ldr	r3, [pc, #500]	; (800be1c <_dtoa_r+0x5a4>)
 800bc28:	f004 020f 	and.w	r2, r4, #15
 800bc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fc50 	bl	80004d8 <__aeabi_dmul>
 800bc38:	2702      	movs	r7, #2
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc40:	4e77      	ldr	r6, [pc, #476]	; (800be20 <_dtoa_r+0x5a8>)
 800bc42:	1124      	asrs	r4, r4, #4
 800bc44:	2c00      	cmp	r4, #0
 800bc46:	f040 8084 	bne.w	800bd52 <_dtoa_r+0x4da>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1d2      	bne.n	800bbf4 <_dtoa_r+0x37c>
 800bc4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 808b 	beq.w	800bd6c <_dtoa_r+0x4f4>
 800bc56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	4b6f      	ldr	r3, [pc, #444]	; (800be24 <_dtoa_r+0x5ac>)
 800bc66:	f7f4 fea9 	bl	80009bc <__aeabi_dcmplt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d07e      	beq.n	800bd6c <_dtoa_r+0x4f4>
 800bc6e:	9b08      	ldr	r3, [sp, #32]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d07b      	beq.n	800bd6c <_dtoa_r+0x4f4>
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	dd38      	ble.n	800bcec <_dtoa_r+0x474>
 800bc7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4b69      	ldr	r3, [pc, #420]	; (800be28 <_dtoa_r+0x5b0>)
 800bc82:	f7f4 fc29 	bl	80004d8 <__aeabi_dmul>
 800bc86:	464c      	mov	r4, r9
 800bc88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bc90:	3701      	adds	r7, #1
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7f4 fbb6 	bl	8000404 <__aeabi_i2d>
 800bc98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc9c:	f7f4 fc1c 	bl	80004d8 <__aeabi_dmul>
 800bca0:	2200      	movs	r2, #0
 800bca2:	4b62      	ldr	r3, [pc, #392]	; (800be2c <_dtoa_r+0x5b4>)
 800bca4:	f7f4 fa62 	bl	800016c <__adddf3>
 800bca8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bcac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bcb0:	9611      	str	r6, [sp, #68]	; 0x44
 800bcb2:	2c00      	cmp	r4, #0
 800bcb4:	d15d      	bne.n	800bd72 <_dtoa_r+0x4fa>
 800bcb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4b5c      	ldr	r3, [pc, #368]	; (800be30 <_dtoa_r+0x5b8>)
 800bcbe:	f7f4 fa53 	bl	8000168 <__aeabi_dsub>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcca:	4633      	mov	r3, r6
 800bccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcce:	f7f4 fe93 	bl	80009f8 <__aeabi_dcmpgt>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	f040 829c 	bne.w	800c210 <_dtoa_r+0x998>
 800bcd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bce2:	f7f4 fe6b 	bl	80009bc <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f040 8290 	bne.w	800c20c <_dtoa_r+0x994>
 800bcec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bcf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f2c0 8152 	blt.w	800bfa0 <_dtoa_r+0x728>
 800bcfc:	f1ba 0f0e 	cmp.w	sl, #14
 800bd00:	f300 814e 	bgt.w	800bfa0 <_dtoa_r+0x728>
 800bd04:	4b45      	ldr	r3, [pc, #276]	; (800be1c <_dtoa_r+0x5a4>)
 800bd06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f280 80db 	bge.w	800bed0 <_dtoa_r+0x658>
 800bd1a:	9b08      	ldr	r3, [sp, #32]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f300 80d7 	bgt.w	800bed0 <_dtoa_r+0x658>
 800bd22:	f040 8272 	bne.w	800c20a <_dtoa_r+0x992>
 800bd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	4b40      	ldr	r3, [pc, #256]	; (800be30 <_dtoa_r+0x5b8>)
 800bd2e:	f7f4 fbd3 	bl	80004d8 <__aeabi_dmul>
 800bd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd36:	f7f4 fe55 	bl	80009e4 <__aeabi_dcmpge>
 800bd3a:	9c08      	ldr	r4, [sp, #32]
 800bd3c:	4626      	mov	r6, r4
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f040 8248 	bne.w	800c1d4 <_dtoa_r+0x95c>
 800bd44:	2331      	movs	r3, #49	; 0x31
 800bd46:	9f03      	ldr	r7, [sp, #12]
 800bd48:	f10a 0a01 	add.w	sl, sl, #1
 800bd4c:	f807 3b01 	strb.w	r3, [r7], #1
 800bd50:	e244      	b.n	800c1dc <_dtoa_r+0x964>
 800bd52:	07e2      	lsls	r2, r4, #31
 800bd54:	d505      	bpl.n	800bd62 <_dtoa_r+0x4ea>
 800bd56:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd5a:	f7f4 fbbd 	bl	80004d8 <__aeabi_dmul>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	3701      	adds	r7, #1
 800bd62:	1064      	asrs	r4, r4, #1
 800bd64:	3608      	adds	r6, #8
 800bd66:	e76d      	b.n	800bc44 <_dtoa_r+0x3cc>
 800bd68:	2702      	movs	r7, #2
 800bd6a:	e770      	b.n	800bc4e <_dtoa_r+0x3d6>
 800bd6c:	46d0      	mov	r8, sl
 800bd6e:	9c08      	ldr	r4, [sp, #32]
 800bd70:	e78f      	b.n	800bc92 <_dtoa_r+0x41a>
 800bd72:	9903      	ldr	r1, [sp, #12]
 800bd74:	4b29      	ldr	r3, [pc, #164]	; (800be1c <_dtoa_r+0x5a4>)
 800bd76:	4421      	add	r1, r4
 800bd78:	9112      	str	r1, [sp, #72]	; 0x48
 800bd7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bd84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	d055      	beq.n	800be38 <_dtoa_r+0x5c0>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	4929      	ldr	r1, [pc, #164]	; (800be34 <_dtoa_r+0x5bc>)
 800bd90:	f7f4 fccc 	bl	800072c <__aeabi_ddiv>
 800bd94:	463b      	mov	r3, r7
 800bd96:	4632      	mov	r2, r6
 800bd98:	f7f4 f9e6 	bl	8000168 <__aeabi_dsub>
 800bd9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bda0:	9f03      	ldr	r7, [sp, #12]
 800bda2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda6:	f7f4 fe47 	bl	8000a38 <__aeabi_d2iz>
 800bdaa:	4604      	mov	r4, r0
 800bdac:	f7f4 fb2a 	bl	8000404 <__aeabi_i2d>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdb8:	f7f4 f9d6 	bl	8000168 <__aeabi_dsub>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	3430      	adds	r4, #48	; 0x30
 800bdc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdca:	f807 4b01 	strb.w	r4, [r7], #1
 800bdce:	f7f4 fdf5 	bl	80009bc <__aeabi_dcmplt>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d174      	bne.n	800bec0 <_dtoa_r+0x648>
 800bdd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdda:	2000      	movs	r0, #0
 800bddc:	4911      	ldr	r1, [pc, #68]	; (800be24 <_dtoa_r+0x5ac>)
 800bdde:	f7f4 f9c3 	bl	8000168 <__aeabi_dsub>
 800bde2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bde6:	f7f4 fde9 	bl	80009bc <__aeabi_dcmplt>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f040 80b7 	bne.w	800bf5e <_dtoa_r+0x6e6>
 800bdf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdf2:	429f      	cmp	r7, r3
 800bdf4:	f43f af7a 	beq.w	800bcec <_dtoa_r+0x474>
 800bdf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <_dtoa_r+0x5b0>)
 800be00:	f7f4 fb6a 	bl	80004d8 <__aeabi_dmul>
 800be04:	2200      	movs	r2, #0
 800be06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <_dtoa_r+0x5b0>)
 800be10:	f7f4 fb62 	bl	80004d8 <__aeabi_dmul>
 800be14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be18:	e7c3      	b.n	800bda2 <_dtoa_r+0x52a>
 800be1a:	bf00      	nop
 800be1c:	0800f0f0 	.word	0x0800f0f0
 800be20:	0800f0c8 	.word	0x0800f0c8
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	40240000 	.word	0x40240000
 800be2c:	401c0000 	.word	0x401c0000
 800be30:	40140000 	.word	0x40140000
 800be34:	3fe00000 	.word	0x3fe00000
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fb4c 	bl	80004d8 <__aeabi_dmul>
 800be40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be46:	9c03      	ldr	r4, [sp, #12]
 800be48:	9314      	str	r3, [sp, #80]	; 0x50
 800be4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be4e:	f7f4 fdf3 	bl	8000a38 <__aeabi_d2iz>
 800be52:	9015      	str	r0, [sp, #84]	; 0x54
 800be54:	f7f4 fad6 	bl	8000404 <__aeabi_i2d>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be60:	f7f4 f982 	bl	8000168 <__aeabi_dsub>
 800be64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be66:	4606      	mov	r6, r0
 800be68:	3330      	adds	r3, #48	; 0x30
 800be6a:	f804 3b01 	strb.w	r3, [r4], #1
 800be6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be70:	460f      	mov	r7, r1
 800be72:	429c      	cmp	r4, r3
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	d124      	bne.n	800bec4 <_dtoa_r+0x64c>
 800be7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be7e:	4bb0      	ldr	r3, [pc, #704]	; (800c140 <_dtoa_r+0x8c8>)
 800be80:	f7f4 f974 	bl	800016c <__adddf3>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fdb4 	bl	80009f8 <__aeabi_dcmpgt>
 800be90:	2800      	cmp	r0, #0
 800be92:	d163      	bne.n	800bf5c <_dtoa_r+0x6e4>
 800be94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be98:	2000      	movs	r0, #0
 800be9a:	49a9      	ldr	r1, [pc, #676]	; (800c140 <_dtoa_r+0x8c8>)
 800be9c:	f7f4 f964 	bl	8000168 <__aeabi_dsub>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 fd88 	bl	80009bc <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	f43f af1d 	beq.w	800bcec <_dtoa_r+0x474>
 800beb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800beb4:	1e7b      	subs	r3, r7, #1
 800beb6:	9314      	str	r3, [sp, #80]	; 0x50
 800beb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bebc:	2b30      	cmp	r3, #48	; 0x30
 800bebe:	d0f8      	beq.n	800beb2 <_dtoa_r+0x63a>
 800bec0:	46c2      	mov	sl, r8
 800bec2:	e03b      	b.n	800bf3c <_dtoa_r+0x6c4>
 800bec4:	4b9f      	ldr	r3, [pc, #636]	; (800c144 <_dtoa_r+0x8cc>)
 800bec6:	f7f4 fb07 	bl	80004d8 <__aeabi_dmul>
 800beca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bece:	e7bc      	b.n	800be4a <_dtoa_r+0x5d2>
 800bed0:	9f03      	ldr	r7, [sp, #12]
 800bed2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 fc25 	bl	800072c <__aeabi_ddiv>
 800bee2:	f7f4 fda9 	bl	8000a38 <__aeabi_d2iz>
 800bee6:	4604      	mov	r4, r0
 800bee8:	f7f4 fa8c 	bl	8000404 <__aeabi_i2d>
 800beec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bef0:	f7f4 faf2 	bl	80004d8 <__aeabi_dmul>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 f934 	bl	8000168 <__aeabi_dsub>
 800bf00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bf04:	f807 6b01 	strb.w	r6, [r7], #1
 800bf08:	9e03      	ldr	r6, [sp, #12]
 800bf0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bf0e:	1bbe      	subs	r6, r7, r6
 800bf10:	45b4      	cmp	ip, r6
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	d136      	bne.n	800bf86 <_dtoa_r+0x70e>
 800bf18:	f7f4 f928 	bl	800016c <__adddf3>
 800bf1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf20:	4680      	mov	r8, r0
 800bf22:	4689      	mov	r9, r1
 800bf24:	f7f4 fd68 	bl	80009f8 <__aeabi_dcmpgt>
 800bf28:	bb58      	cbnz	r0, 800bf82 <_dtoa_r+0x70a>
 800bf2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	f7f4 fd39 	bl	80009a8 <__aeabi_dcmpeq>
 800bf36:	b108      	cbz	r0, 800bf3c <_dtoa_r+0x6c4>
 800bf38:	07e1      	lsls	r1, r4, #31
 800bf3a:	d422      	bmi.n	800bf82 <_dtoa_r+0x70a>
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	4659      	mov	r1, fp
 800bf40:	f000 faf0 	bl	800c524 <_Bfree>
 800bf44:	2300      	movs	r3, #0
 800bf46:	703b      	strb	r3, [r7, #0]
 800bf48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf4a:	f10a 0001 	add.w	r0, sl, #1
 800bf4e:	6018      	str	r0, [r3, #0]
 800bf50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f43f acde 	beq.w	800b914 <_dtoa_r+0x9c>
 800bf58:	601f      	str	r7, [r3, #0]
 800bf5a:	e4db      	b.n	800b914 <_dtoa_r+0x9c>
 800bf5c:	4627      	mov	r7, r4
 800bf5e:	463b      	mov	r3, r7
 800bf60:	461f      	mov	r7, r3
 800bf62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf66:	2a39      	cmp	r2, #57	; 0x39
 800bf68:	d107      	bne.n	800bf7a <_dtoa_r+0x702>
 800bf6a:	9a03      	ldr	r2, [sp, #12]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d1f7      	bne.n	800bf60 <_dtoa_r+0x6e8>
 800bf70:	2230      	movs	r2, #48	; 0x30
 800bf72:	9903      	ldr	r1, [sp, #12]
 800bf74:	f108 0801 	add.w	r8, r8, #1
 800bf78:	700a      	strb	r2, [r1, #0]
 800bf7a:	781a      	ldrb	r2, [r3, #0]
 800bf7c:	3201      	adds	r2, #1
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e79e      	b.n	800bec0 <_dtoa_r+0x648>
 800bf82:	46d0      	mov	r8, sl
 800bf84:	e7eb      	b.n	800bf5e <_dtoa_r+0x6e6>
 800bf86:	2200      	movs	r2, #0
 800bf88:	4b6e      	ldr	r3, [pc, #440]	; (800c144 <_dtoa_r+0x8cc>)
 800bf8a:	f7f4 faa5 	bl	80004d8 <__aeabi_dmul>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2300      	movs	r3, #0
 800bf92:	4680      	mov	r8, r0
 800bf94:	4689      	mov	r9, r1
 800bf96:	f7f4 fd07 	bl	80009a8 <__aeabi_dcmpeq>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d09b      	beq.n	800bed6 <_dtoa_r+0x65e>
 800bf9e:	e7cd      	b.n	800bf3c <_dtoa_r+0x6c4>
 800bfa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	f000 80d0 	beq.w	800c148 <_dtoa_r+0x8d0>
 800bfa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bfaa:	2a01      	cmp	r2, #1
 800bfac:	f300 80ae 	bgt.w	800c10c <_dtoa_r+0x894>
 800bfb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	f000 80a6 	beq.w	800c104 <_dtoa_r+0x88c>
 800bfb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bfbe:	9f06      	ldr	r7, [sp, #24]
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	441a      	add	r2, r3
 800bfc6:	9206      	str	r2, [sp, #24]
 800bfc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfca:	4628      	mov	r0, r5
 800bfcc:	441a      	add	r2, r3
 800bfce:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd0:	f000 fb5e 	bl	800c690 <__i2b>
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	2f00      	cmp	r7, #0
 800bfd8:	dd0c      	ble.n	800bff4 <_dtoa_r+0x77c>
 800bfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd09      	ble.n	800bff4 <_dtoa_r+0x77c>
 800bfe0:	42bb      	cmp	r3, r7
 800bfe2:	bfa8      	it	ge
 800bfe4:	463b      	movge	r3, r7
 800bfe6:	9a06      	ldr	r2, [sp, #24]
 800bfe8:	1aff      	subs	r7, r7, r3
 800bfea:	1ad2      	subs	r2, r2, r3
 800bfec:	9206      	str	r2, [sp, #24]
 800bfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	9309      	str	r3, [sp, #36]	; 0x24
 800bff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff6:	b1f3      	cbz	r3, 800c036 <_dtoa_r+0x7be>
 800bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 80a8 	beq.w	800c150 <_dtoa_r+0x8d8>
 800c000:	2c00      	cmp	r4, #0
 800c002:	dd10      	ble.n	800c026 <_dtoa_r+0x7ae>
 800c004:	4631      	mov	r1, r6
 800c006:	4622      	mov	r2, r4
 800c008:	4628      	mov	r0, r5
 800c00a:	f000 fbff 	bl	800c80c <__pow5mult>
 800c00e:	465a      	mov	r2, fp
 800c010:	4601      	mov	r1, r0
 800c012:	4606      	mov	r6, r0
 800c014:	4628      	mov	r0, r5
 800c016:	f000 fb51 	bl	800c6bc <__multiply>
 800c01a:	4680      	mov	r8, r0
 800c01c:	4659      	mov	r1, fp
 800c01e:	4628      	mov	r0, r5
 800c020:	f000 fa80 	bl	800c524 <_Bfree>
 800c024:	46c3      	mov	fp, r8
 800c026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c028:	1b1a      	subs	r2, r3, r4
 800c02a:	d004      	beq.n	800c036 <_dtoa_r+0x7be>
 800c02c:	4659      	mov	r1, fp
 800c02e:	4628      	mov	r0, r5
 800c030:	f000 fbec 	bl	800c80c <__pow5mult>
 800c034:	4683      	mov	fp, r0
 800c036:	2101      	movs	r1, #1
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 fb29 	bl	800c690 <__i2b>
 800c03e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c040:	4604      	mov	r4, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	f340 8086 	ble.w	800c154 <_dtoa_r+0x8dc>
 800c048:	461a      	mov	r2, r3
 800c04a:	4601      	mov	r1, r0
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 fbdd 	bl	800c80c <__pow5mult>
 800c052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c054:	4604      	mov	r4, r0
 800c056:	2b01      	cmp	r3, #1
 800c058:	dd7f      	ble.n	800c15a <_dtoa_r+0x8e2>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c064:	6918      	ldr	r0, [r3, #16]
 800c066:	f000 fac5 	bl	800c5f4 <__hi0bits>
 800c06a:	f1c0 0020 	rsb	r0, r0, #32
 800c06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c070:	4418      	add	r0, r3
 800c072:	f010 001f 	ands.w	r0, r0, #31
 800c076:	f000 8092 	beq.w	800c19e <_dtoa_r+0x926>
 800c07a:	f1c0 0320 	rsb	r3, r0, #32
 800c07e:	2b04      	cmp	r3, #4
 800c080:	f340 808a 	ble.w	800c198 <_dtoa_r+0x920>
 800c084:	f1c0 001c 	rsb	r0, r0, #28
 800c088:	9b06      	ldr	r3, [sp, #24]
 800c08a:	4407      	add	r7, r0
 800c08c:	4403      	add	r3, r0
 800c08e:	9306      	str	r3, [sp, #24]
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	4403      	add	r3, r0
 800c094:	9309      	str	r3, [sp, #36]	; 0x24
 800c096:	9b06      	ldr	r3, [sp, #24]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dd05      	ble.n	800c0a8 <_dtoa_r+0x830>
 800c09c:	4659      	mov	r1, fp
 800c09e:	461a      	mov	r2, r3
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f000 fc0d 	bl	800c8c0 <__lshift>
 800c0a6:	4683      	mov	fp, r0
 800c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	dd05      	ble.n	800c0ba <_dtoa_r+0x842>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 fc04 	bl	800c8c0 <__lshift>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d070      	beq.n	800c1a2 <_dtoa_r+0x92a>
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4658      	mov	r0, fp
 800c0c4:	f000 fc6c 	bl	800c9a0 <__mcmp>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	da6a      	bge.n	800c1a2 <_dtoa_r+0x92a>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 fa48 	bl	800c568 <__multadd>
 800c0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0da:	4683      	mov	fp, r0
 800c0dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8194 	beq.w	800c40e <_dtoa_r+0xb96>
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 fa3b 	bl	800c568 <__multadd>
 800c0f2:	f1b9 0f00 	cmp.w	r9, #0
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	f300 8093 	bgt.w	800c222 <_dtoa_r+0x9aa>
 800c0fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	dc57      	bgt.n	800c1b2 <_dtoa_r+0x93a>
 800c102:	e08e      	b.n	800c222 <_dtoa_r+0x9aa>
 800c104:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c10a:	e757      	b.n	800bfbc <_dtoa_r+0x744>
 800c10c:	9b08      	ldr	r3, [sp, #32]
 800c10e:	1e5c      	subs	r4, r3, #1
 800c110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c112:	42a3      	cmp	r3, r4
 800c114:	bfb7      	itett	lt
 800c116:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c118:	1b1c      	subge	r4, r3, r4
 800c11a:	1ae2      	sublt	r2, r4, r3
 800c11c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c11e:	bfbe      	ittt	lt
 800c120:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c122:	189b      	addlt	r3, r3, r2
 800c124:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c126:	9b08      	ldr	r3, [sp, #32]
 800c128:	bfb8      	it	lt
 800c12a:	2400      	movlt	r4, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfbb      	ittet	lt
 800c130:	9b06      	ldrlt	r3, [sp, #24]
 800c132:	9a08      	ldrlt	r2, [sp, #32]
 800c134:	9f06      	ldrge	r7, [sp, #24]
 800c136:	1a9f      	sublt	r7, r3, r2
 800c138:	bfac      	ite	ge
 800c13a:	9b08      	ldrge	r3, [sp, #32]
 800c13c:	2300      	movlt	r3, #0
 800c13e:	e73f      	b.n	800bfc0 <_dtoa_r+0x748>
 800c140:	3fe00000 	.word	0x3fe00000
 800c144:	40240000 	.word	0x40240000
 800c148:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c14a:	9f06      	ldr	r7, [sp, #24]
 800c14c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c14e:	e742      	b.n	800bfd6 <_dtoa_r+0x75e>
 800c150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c152:	e76b      	b.n	800c02c <_dtoa_r+0x7b4>
 800c154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c156:	2b01      	cmp	r3, #1
 800c158:	dc19      	bgt.n	800c18e <_dtoa_r+0x916>
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	b9bb      	cbnz	r3, 800c18e <_dtoa_r+0x916>
 800c15e:	9b05      	ldr	r3, [sp, #20]
 800c160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c164:	b99b      	cbnz	r3, 800c18e <_dtoa_r+0x916>
 800c166:	9b05      	ldr	r3, [sp, #20]
 800c168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c16c:	0d1b      	lsrs	r3, r3, #20
 800c16e:	051b      	lsls	r3, r3, #20
 800c170:	b183      	cbz	r3, 800c194 <_dtoa_r+0x91c>
 800c172:	f04f 0801 	mov.w	r8, #1
 800c176:	9b06      	ldr	r3, [sp, #24]
 800c178:	3301      	adds	r3, #1
 800c17a:	9306      	str	r3, [sp, #24]
 800c17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17e:	3301      	adds	r3, #1
 800c180:	9309      	str	r3, [sp, #36]	; 0x24
 800c182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c184:	2b00      	cmp	r3, #0
 800c186:	f47f af6a 	bne.w	800c05e <_dtoa_r+0x7e6>
 800c18a:	2001      	movs	r0, #1
 800c18c:	e76f      	b.n	800c06e <_dtoa_r+0x7f6>
 800c18e:	f04f 0800 	mov.w	r8, #0
 800c192:	e7f6      	b.n	800c182 <_dtoa_r+0x90a>
 800c194:	4698      	mov	r8, r3
 800c196:	e7f4      	b.n	800c182 <_dtoa_r+0x90a>
 800c198:	f43f af7d 	beq.w	800c096 <_dtoa_r+0x81e>
 800c19c:	4618      	mov	r0, r3
 800c19e:	301c      	adds	r0, #28
 800c1a0:	e772      	b.n	800c088 <_dtoa_r+0x810>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dc36      	bgt.n	800c216 <_dtoa_r+0x99e>
 800c1a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	dd33      	ble.n	800c216 <_dtoa_r+0x99e>
 800c1ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1b2:	f1b9 0f00 	cmp.w	r9, #0
 800c1b6:	d10d      	bne.n	800c1d4 <_dtoa_r+0x95c>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	464b      	mov	r3, r9
 800c1bc:	2205      	movs	r2, #5
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f000 f9d2 	bl	800c568 <__multadd>
 800c1c4:	4601      	mov	r1, r0
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4658      	mov	r0, fp
 800c1ca:	f000 fbe9 	bl	800c9a0 <__mcmp>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f73f adb8 	bgt.w	800bd44 <_dtoa_r+0x4cc>
 800c1d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1d6:	9f03      	ldr	r7, [sp, #12]
 800c1d8:	ea6f 0a03 	mvn.w	sl, r3
 800c1dc:	f04f 0800 	mov.w	r8, #0
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 f99e 	bl	800c524 <_Bfree>
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	f43f aea7 	beq.w	800bf3c <_dtoa_r+0x6c4>
 800c1ee:	f1b8 0f00 	cmp.w	r8, #0
 800c1f2:	d005      	beq.n	800c200 <_dtoa_r+0x988>
 800c1f4:	45b0      	cmp	r8, r6
 800c1f6:	d003      	beq.n	800c200 <_dtoa_r+0x988>
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f000 f992 	bl	800c524 <_Bfree>
 800c200:	4631      	mov	r1, r6
 800c202:	4628      	mov	r0, r5
 800c204:	f000 f98e 	bl	800c524 <_Bfree>
 800c208:	e698      	b.n	800bf3c <_dtoa_r+0x6c4>
 800c20a:	2400      	movs	r4, #0
 800c20c:	4626      	mov	r6, r4
 800c20e:	e7e1      	b.n	800c1d4 <_dtoa_r+0x95c>
 800c210:	46c2      	mov	sl, r8
 800c212:	4626      	mov	r6, r4
 800c214:	e596      	b.n	800bd44 <_dtoa_r+0x4cc>
 800c216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 80fd 	beq.w	800c41c <_dtoa_r+0xba4>
 800c222:	2f00      	cmp	r7, #0
 800c224:	dd05      	ble.n	800c232 <_dtoa_r+0x9ba>
 800c226:	4631      	mov	r1, r6
 800c228:	463a      	mov	r2, r7
 800c22a:	4628      	mov	r0, r5
 800c22c:	f000 fb48 	bl	800c8c0 <__lshift>
 800c230:	4606      	mov	r6, r0
 800c232:	f1b8 0f00 	cmp.w	r8, #0
 800c236:	d05c      	beq.n	800c2f2 <_dtoa_r+0xa7a>
 800c238:	4628      	mov	r0, r5
 800c23a:	6871      	ldr	r1, [r6, #4]
 800c23c:	f000 f932 	bl	800c4a4 <_Balloc>
 800c240:	4607      	mov	r7, r0
 800c242:	b928      	cbnz	r0, 800c250 <_dtoa_r+0x9d8>
 800c244:	4602      	mov	r2, r0
 800c246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c24a:	4b7f      	ldr	r3, [pc, #508]	; (800c448 <_dtoa_r+0xbd0>)
 800c24c:	f7ff bb28 	b.w	800b8a0 <_dtoa_r+0x28>
 800c250:	6932      	ldr	r2, [r6, #16]
 800c252:	f106 010c 	add.w	r1, r6, #12
 800c256:	3202      	adds	r2, #2
 800c258:	0092      	lsls	r2, r2, #2
 800c25a:	300c      	adds	r0, #12
 800c25c:	f000 f914 	bl	800c488 <memcpy>
 800c260:	2201      	movs	r2, #1
 800c262:	4639      	mov	r1, r7
 800c264:	4628      	mov	r0, r5
 800c266:	f000 fb2b 	bl	800c8c0 <__lshift>
 800c26a:	46b0      	mov	r8, r6
 800c26c:	4606      	mov	r6, r0
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	9308      	str	r3, [sp, #32]
 800c274:	9b03      	ldr	r3, [sp, #12]
 800c276:	444b      	add	r3, r9
 800c278:	930a      	str	r3, [sp, #40]	; 0x28
 800c27a:	9b04      	ldr	r3, [sp, #16]
 800c27c:	f003 0301 	and.w	r3, r3, #1
 800c280:	9309      	str	r3, [sp, #36]	; 0x24
 800c282:	9b08      	ldr	r3, [sp, #32]
 800c284:	4621      	mov	r1, r4
 800c286:	3b01      	subs	r3, #1
 800c288:	4658      	mov	r0, fp
 800c28a:	9304      	str	r3, [sp, #16]
 800c28c:	f7ff fa68 	bl	800b760 <quorem>
 800c290:	4603      	mov	r3, r0
 800c292:	4641      	mov	r1, r8
 800c294:	3330      	adds	r3, #48	; 0x30
 800c296:	9006      	str	r0, [sp, #24]
 800c298:	4658      	mov	r0, fp
 800c29a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c29c:	f000 fb80 	bl	800c9a0 <__mcmp>
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	4681      	mov	r9, r0
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 fb96 	bl	800c9d8 <__mdiff>
 800c2ac:	68c2      	ldr	r2, [r0, #12]
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2b2:	bb02      	cbnz	r2, 800c2f6 <_dtoa_r+0xa7e>
 800c2b4:	4601      	mov	r1, r0
 800c2b6:	4658      	mov	r0, fp
 800c2b8:	f000 fb72 	bl	800c9a0 <__mcmp>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c2c8:	f000 f92c 	bl	800c524 <_Bfree>
 800c2cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2d0:	9f08      	ldr	r7, [sp, #32]
 800c2d2:	ea43 0102 	orr.w	r1, r3, r2
 800c2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2dc:	d10d      	bne.n	800c2fa <_dtoa_r+0xa82>
 800c2de:	2b39      	cmp	r3, #57	; 0x39
 800c2e0:	d029      	beq.n	800c336 <_dtoa_r+0xabe>
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	dd01      	ble.n	800c2ec <_dtoa_r+0xa74>
 800c2e8:	9b06      	ldr	r3, [sp, #24]
 800c2ea:	3331      	adds	r3, #49	; 0x31
 800c2ec:	9a04      	ldr	r2, [sp, #16]
 800c2ee:	7013      	strb	r3, [r2, #0]
 800c2f0:	e776      	b.n	800c1e0 <_dtoa_r+0x968>
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	e7b9      	b.n	800c26a <_dtoa_r+0x9f2>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	e7e2      	b.n	800c2c0 <_dtoa_r+0xa48>
 800c2fa:	f1b9 0f00 	cmp.w	r9, #0
 800c2fe:	db06      	blt.n	800c30e <_dtoa_r+0xa96>
 800c300:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c302:	ea41 0909 	orr.w	r9, r1, r9
 800c306:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c308:	ea59 0101 	orrs.w	r1, r9, r1
 800c30c:	d120      	bne.n	800c350 <_dtoa_r+0xad8>
 800c30e:	2a00      	cmp	r2, #0
 800c310:	ddec      	ble.n	800c2ec <_dtoa_r+0xa74>
 800c312:	4659      	mov	r1, fp
 800c314:	2201      	movs	r2, #1
 800c316:	4628      	mov	r0, r5
 800c318:	9308      	str	r3, [sp, #32]
 800c31a:	f000 fad1 	bl	800c8c0 <__lshift>
 800c31e:	4621      	mov	r1, r4
 800c320:	4683      	mov	fp, r0
 800c322:	f000 fb3d 	bl	800c9a0 <__mcmp>
 800c326:	2800      	cmp	r0, #0
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	dc02      	bgt.n	800c332 <_dtoa_r+0xaba>
 800c32c:	d1de      	bne.n	800c2ec <_dtoa_r+0xa74>
 800c32e:	07da      	lsls	r2, r3, #31
 800c330:	d5dc      	bpl.n	800c2ec <_dtoa_r+0xa74>
 800c332:	2b39      	cmp	r3, #57	; 0x39
 800c334:	d1d8      	bne.n	800c2e8 <_dtoa_r+0xa70>
 800c336:	2339      	movs	r3, #57	; 0x39
 800c338:	9a04      	ldr	r2, [sp, #16]
 800c33a:	7013      	strb	r3, [r2, #0]
 800c33c:	463b      	mov	r3, r7
 800c33e:	461f      	mov	r7, r3
 800c340:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c344:	3b01      	subs	r3, #1
 800c346:	2a39      	cmp	r2, #57	; 0x39
 800c348:	d050      	beq.n	800c3ec <_dtoa_r+0xb74>
 800c34a:	3201      	adds	r2, #1
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	e747      	b.n	800c1e0 <_dtoa_r+0x968>
 800c350:	2a00      	cmp	r2, #0
 800c352:	dd03      	ble.n	800c35c <_dtoa_r+0xae4>
 800c354:	2b39      	cmp	r3, #57	; 0x39
 800c356:	d0ee      	beq.n	800c336 <_dtoa_r+0xabe>
 800c358:	3301      	adds	r3, #1
 800c35a:	e7c7      	b.n	800c2ec <_dtoa_r+0xa74>
 800c35c:	9a08      	ldr	r2, [sp, #32]
 800c35e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c360:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c364:	428a      	cmp	r2, r1
 800c366:	d02a      	beq.n	800c3be <_dtoa_r+0xb46>
 800c368:	4659      	mov	r1, fp
 800c36a:	2300      	movs	r3, #0
 800c36c:	220a      	movs	r2, #10
 800c36e:	4628      	mov	r0, r5
 800c370:	f000 f8fa 	bl	800c568 <__multadd>
 800c374:	45b0      	cmp	r8, r6
 800c376:	4683      	mov	fp, r0
 800c378:	f04f 0300 	mov.w	r3, #0
 800c37c:	f04f 020a 	mov.w	r2, #10
 800c380:	4641      	mov	r1, r8
 800c382:	4628      	mov	r0, r5
 800c384:	d107      	bne.n	800c396 <_dtoa_r+0xb1e>
 800c386:	f000 f8ef 	bl	800c568 <__multadd>
 800c38a:	4680      	mov	r8, r0
 800c38c:	4606      	mov	r6, r0
 800c38e:	9b08      	ldr	r3, [sp, #32]
 800c390:	3301      	adds	r3, #1
 800c392:	9308      	str	r3, [sp, #32]
 800c394:	e775      	b.n	800c282 <_dtoa_r+0xa0a>
 800c396:	f000 f8e7 	bl	800c568 <__multadd>
 800c39a:	4631      	mov	r1, r6
 800c39c:	4680      	mov	r8, r0
 800c39e:	2300      	movs	r3, #0
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f000 f8e0 	bl	800c568 <__multadd>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e7f0      	b.n	800c38e <_dtoa_r+0xb16>
 800c3ac:	f1b9 0f00 	cmp.w	r9, #0
 800c3b0:	bfcc      	ite	gt
 800c3b2:	464f      	movgt	r7, r9
 800c3b4:	2701      	movle	r7, #1
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	9a03      	ldr	r2, [sp, #12]
 800c3bc:	4417      	add	r7, r2
 800c3be:	4659      	mov	r1, fp
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	9308      	str	r3, [sp, #32]
 800c3c6:	f000 fa7b 	bl	800c8c0 <__lshift>
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4683      	mov	fp, r0
 800c3ce:	f000 fae7 	bl	800c9a0 <__mcmp>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dcb2      	bgt.n	800c33c <_dtoa_r+0xac4>
 800c3d6:	d102      	bne.n	800c3de <_dtoa_r+0xb66>
 800c3d8:	9b08      	ldr	r3, [sp, #32]
 800c3da:	07db      	lsls	r3, r3, #31
 800c3dc:	d4ae      	bmi.n	800c33c <_dtoa_r+0xac4>
 800c3de:	463b      	mov	r3, r7
 800c3e0:	461f      	mov	r7, r3
 800c3e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3e6:	2a30      	cmp	r2, #48	; 0x30
 800c3e8:	d0fa      	beq.n	800c3e0 <_dtoa_r+0xb68>
 800c3ea:	e6f9      	b.n	800c1e0 <_dtoa_r+0x968>
 800c3ec:	9a03      	ldr	r2, [sp, #12]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d1a5      	bne.n	800c33e <_dtoa_r+0xac6>
 800c3f2:	2331      	movs	r3, #49	; 0x31
 800c3f4:	f10a 0a01 	add.w	sl, sl, #1
 800c3f8:	e779      	b.n	800c2ee <_dtoa_r+0xa76>
 800c3fa:	4b14      	ldr	r3, [pc, #80]	; (800c44c <_dtoa_r+0xbd4>)
 800c3fc:	f7ff baa8 	b.w	800b950 <_dtoa_r+0xd8>
 800c400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c402:	2b00      	cmp	r3, #0
 800c404:	f47f aa81 	bne.w	800b90a <_dtoa_r+0x92>
 800c408:	4b11      	ldr	r3, [pc, #68]	; (800c450 <_dtoa_r+0xbd8>)
 800c40a:	f7ff baa1 	b.w	800b950 <_dtoa_r+0xd8>
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	dc03      	bgt.n	800c41c <_dtoa_r+0xba4>
 800c414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c416:	2b02      	cmp	r3, #2
 800c418:	f73f aecb 	bgt.w	800c1b2 <_dtoa_r+0x93a>
 800c41c:	9f03      	ldr	r7, [sp, #12]
 800c41e:	4621      	mov	r1, r4
 800c420:	4658      	mov	r0, fp
 800c422:	f7ff f99d 	bl	800b760 <quorem>
 800c426:	9a03      	ldr	r2, [sp, #12]
 800c428:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c42c:	f807 3b01 	strb.w	r3, [r7], #1
 800c430:	1aba      	subs	r2, r7, r2
 800c432:	4591      	cmp	r9, r2
 800c434:	ddba      	ble.n	800c3ac <_dtoa_r+0xb34>
 800c436:	4659      	mov	r1, fp
 800c438:	2300      	movs	r3, #0
 800c43a:	220a      	movs	r2, #10
 800c43c:	4628      	mov	r0, r5
 800c43e:	f000 f893 	bl	800c568 <__multadd>
 800c442:	4683      	mov	fp, r0
 800c444:	e7eb      	b.n	800c41e <_dtoa_r+0xba6>
 800c446:	bf00      	nop
 800c448:	0800f05b 	.word	0x0800f05b
 800c44c:	0800efb8 	.word	0x0800efb8
 800c450:	0800efdc 	.word	0x0800efdc

0800c454 <_localeconv_r>:
 800c454:	4800      	ldr	r0, [pc, #0]	; (800c458 <_localeconv_r+0x4>)
 800c456:	4770      	bx	lr
 800c458:	200002d8 	.word	0x200002d8

0800c45c <malloc>:
 800c45c:	4b02      	ldr	r3, [pc, #8]	; (800c468 <malloc+0xc>)
 800c45e:	4601      	mov	r1, r0
 800c460:	6818      	ldr	r0, [r3, #0]
 800c462:	f000 bc1d 	b.w	800cca0 <_malloc_r>
 800c466:	bf00      	nop
 800c468:	20000184 	.word	0x20000184

0800c46c <memchr>:
 800c46c:	4603      	mov	r3, r0
 800c46e:	b510      	push	{r4, lr}
 800c470:	b2c9      	uxtb	r1, r1
 800c472:	4402      	add	r2, r0
 800c474:	4293      	cmp	r3, r2
 800c476:	4618      	mov	r0, r3
 800c478:	d101      	bne.n	800c47e <memchr+0x12>
 800c47a:	2000      	movs	r0, #0
 800c47c:	e003      	b.n	800c486 <memchr+0x1a>
 800c47e:	7804      	ldrb	r4, [r0, #0]
 800c480:	3301      	adds	r3, #1
 800c482:	428c      	cmp	r4, r1
 800c484:	d1f6      	bne.n	800c474 <memchr+0x8>
 800c486:	bd10      	pop	{r4, pc}

0800c488 <memcpy>:
 800c488:	440a      	add	r2, r1
 800c48a:	4291      	cmp	r1, r2
 800c48c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c490:	d100      	bne.n	800c494 <memcpy+0xc>
 800c492:	4770      	bx	lr
 800c494:	b510      	push	{r4, lr}
 800c496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c49a:	4291      	cmp	r1, r2
 800c49c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a0:	d1f9      	bne.n	800c496 <memcpy+0xe>
 800c4a2:	bd10      	pop	{r4, pc}

0800c4a4 <_Balloc>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	b976      	cbnz	r6, 800c4cc <_Balloc+0x28>
 800c4ae:	2010      	movs	r0, #16
 800c4b0:	f7ff ffd4 	bl	800c45c <malloc>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6260      	str	r0, [r4, #36]	; 0x24
 800c4b8:	b920      	cbnz	r0, 800c4c4 <_Balloc+0x20>
 800c4ba:	2166      	movs	r1, #102	; 0x66
 800c4bc:	4b17      	ldr	r3, [pc, #92]	; (800c51c <_Balloc+0x78>)
 800c4be:	4818      	ldr	r0, [pc, #96]	; (800c520 <_Balloc+0x7c>)
 800c4c0:	f000 fdce 	bl	800d060 <__assert_func>
 800c4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c8:	6006      	str	r6, [r0, #0]
 800c4ca:	60c6      	str	r6, [r0, #12]
 800c4cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4ce:	68f3      	ldr	r3, [r6, #12]
 800c4d0:	b183      	cbz	r3, 800c4f4 <_Balloc+0x50>
 800c4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4da:	b9b8      	cbnz	r0, 800c50c <_Balloc+0x68>
 800c4dc:	2101      	movs	r1, #1
 800c4de:	fa01 f605 	lsl.w	r6, r1, r5
 800c4e2:	1d72      	adds	r2, r6, #5
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	0092      	lsls	r2, r2, #2
 800c4e8:	f000 fb5e 	bl	800cba8 <_calloc_r>
 800c4ec:	b160      	cbz	r0, 800c508 <_Balloc+0x64>
 800c4ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4f2:	e00e      	b.n	800c512 <_Balloc+0x6e>
 800c4f4:	2221      	movs	r2, #33	; 0x21
 800c4f6:	2104      	movs	r1, #4
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f000 fb55 	bl	800cba8 <_calloc_r>
 800c4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c500:	60f0      	str	r0, [r6, #12]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e4      	bne.n	800c4d2 <_Balloc+0x2e>
 800c508:	2000      	movs	r0, #0
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	6802      	ldr	r2, [r0, #0]
 800c50e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c512:	2300      	movs	r3, #0
 800c514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c518:	e7f7      	b.n	800c50a <_Balloc+0x66>
 800c51a:	bf00      	nop
 800c51c:	0800efe9 	.word	0x0800efe9
 800c520:	0800f06c 	.word	0x0800f06c

0800c524 <_Bfree>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c528:	4605      	mov	r5, r0
 800c52a:	460c      	mov	r4, r1
 800c52c:	b976      	cbnz	r6, 800c54c <_Bfree+0x28>
 800c52e:	2010      	movs	r0, #16
 800c530:	f7ff ff94 	bl	800c45c <malloc>
 800c534:	4602      	mov	r2, r0
 800c536:	6268      	str	r0, [r5, #36]	; 0x24
 800c538:	b920      	cbnz	r0, 800c544 <_Bfree+0x20>
 800c53a:	218a      	movs	r1, #138	; 0x8a
 800c53c:	4b08      	ldr	r3, [pc, #32]	; (800c560 <_Bfree+0x3c>)
 800c53e:	4809      	ldr	r0, [pc, #36]	; (800c564 <_Bfree+0x40>)
 800c540:	f000 fd8e 	bl	800d060 <__assert_func>
 800c544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c548:	6006      	str	r6, [r0, #0]
 800c54a:	60c6      	str	r6, [r0, #12]
 800c54c:	b13c      	cbz	r4, 800c55e <_Bfree+0x3a>
 800c54e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c550:	6862      	ldr	r2, [r4, #4]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c558:	6021      	str	r1, [r4, #0]
 800c55a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	0800efe9 	.word	0x0800efe9
 800c564:	0800f06c 	.word	0x0800f06c

0800c568 <__multadd>:
 800c568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c56c:	4607      	mov	r7, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	461e      	mov	r6, r3
 800c572:	2000      	movs	r0, #0
 800c574:	690d      	ldr	r5, [r1, #16]
 800c576:	f101 0c14 	add.w	ip, r1, #20
 800c57a:	f8dc 3000 	ldr.w	r3, [ip]
 800c57e:	3001      	adds	r0, #1
 800c580:	b299      	uxth	r1, r3
 800c582:	fb02 6101 	mla	r1, r2, r1, r6
 800c586:	0c1e      	lsrs	r6, r3, #16
 800c588:	0c0b      	lsrs	r3, r1, #16
 800c58a:	fb02 3306 	mla	r3, r2, r6, r3
 800c58e:	b289      	uxth	r1, r1
 800c590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c594:	4285      	cmp	r5, r0
 800c596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c59a:	f84c 1b04 	str.w	r1, [ip], #4
 800c59e:	dcec      	bgt.n	800c57a <__multadd+0x12>
 800c5a0:	b30e      	cbz	r6, 800c5e6 <__multadd+0x7e>
 800c5a2:	68a3      	ldr	r3, [r4, #8]
 800c5a4:	42ab      	cmp	r3, r5
 800c5a6:	dc19      	bgt.n	800c5dc <__multadd+0x74>
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	3101      	adds	r1, #1
 800c5ae:	f7ff ff79 	bl	800c4a4 <_Balloc>
 800c5b2:	4680      	mov	r8, r0
 800c5b4:	b928      	cbnz	r0, 800c5c2 <__multadd+0x5a>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	21b5      	movs	r1, #181	; 0xb5
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <__multadd+0x84>)
 800c5bc:	480c      	ldr	r0, [pc, #48]	; (800c5f0 <__multadd+0x88>)
 800c5be:	f000 fd4f 	bl	800d060 <__assert_func>
 800c5c2:	6922      	ldr	r2, [r4, #16]
 800c5c4:	f104 010c 	add.w	r1, r4, #12
 800c5c8:	3202      	adds	r2, #2
 800c5ca:	0092      	lsls	r2, r2, #2
 800c5cc:	300c      	adds	r0, #12
 800c5ce:	f7ff ff5b 	bl	800c488 <memcpy>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7ff ffa5 	bl	800c524 <_Bfree>
 800c5da:	4644      	mov	r4, r8
 800c5dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5e0:	3501      	adds	r5, #1
 800c5e2:	615e      	str	r6, [r3, #20]
 800c5e4:	6125      	str	r5, [r4, #16]
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ec:	0800f05b 	.word	0x0800f05b
 800c5f0:	0800f06c 	.word	0x0800f06c

0800c5f4 <__hi0bits>:
 800c5f4:	0c02      	lsrs	r2, r0, #16
 800c5f6:	0412      	lsls	r2, r2, #16
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	b9ca      	cbnz	r2, 800c630 <__hi0bits+0x3c>
 800c5fc:	0403      	lsls	r3, r0, #16
 800c5fe:	2010      	movs	r0, #16
 800c600:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c604:	bf04      	itt	eq
 800c606:	021b      	lsleq	r3, r3, #8
 800c608:	3008      	addeq	r0, #8
 800c60a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c60e:	bf04      	itt	eq
 800c610:	011b      	lsleq	r3, r3, #4
 800c612:	3004      	addeq	r0, #4
 800c614:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c618:	bf04      	itt	eq
 800c61a:	009b      	lsleq	r3, r3, #2
 800c61c:	3002      	addeq	r0, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	db05      	blt.n	800c62e <__hi0bits+0x3a>
 800c622:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c626:	f100 0001 	add.w	r0, r0, #1
 800c62a:	bf08      	it	eq
 800c62c:	2020      	moveq	r0, #32
 800c62e:	4770      	bx	lr
 800c630:	2000      	movs	r0, #0
 800c632:	e7e5      	b.n	800c600 <__hi0bits+0xc>

0800c634 <__lo0bits>:
 800c634:	6803      	ldr	r3, [r0, #0]
 800c636:	4602      	mov	r2, r0
 800c638:	f013 0007 	ands.w	r0, r3, #7
 800c63c:	d00b      	beq.n	800c656 <__lo0bits+0x22>
 800c63e:	07d9      	lsls	r1, r3, #31
 800c640:	d421      	bmi.n	800c686 <__lo0bits+0x52>
 800c642:	0798      	lsls	r0, r3, #30
 800c644:	bf49      	itett	mi
 800c646:	085b      	lsrmi	r3, r3, #1
 800c648:	089b      	lsrpl	r3, r3, #2
 800c64a:	2001      	movmi	r0, #1
 800c64c:	6013      	strmi	r3, [r2, #0]
 800c64e:	bf5c      	itt	pl
 800c650:	2002      	movpl	r0, #2
 800c652:	6013      	strpl	r3, [r2, #0]
 800c654:	4770      	bx	lr
 800c656:	b299      	uxth	r1, r3
 800c658:	b909      	cbnz	r1, 800c65e <__lo0bits+0x2a>
 800c65a:	2010      	movs	r0, #16
 800c65c:	0c1b      	lsrs	r3, r3, #16
 800c65e:	b2d9      	uxtb	r1, r3
 800c660:	b909      	cbnz	r1, 800c666 <__lo0bits+0x32>
 800c662:	3008      	adds	r0, #8
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	0719      	lsls	r1, r3, #28
 800c668:	bf04      	itt	eq
 800c66a:	091b      	lsreq	r3, r3, #4
 800c66c:	3004      	addeq	r0, #4
 800c66e:	0799      	lsls	r1, r3, #30
 800c670:	bf04      	itt	eq
 800c672:	089b      	lsreq	r3, r3, #2
 800c674:	3002      	addeq	r0, #2
 800c676:	07d9      	lsls	r1, r3, #31
 800c678:	d403      	bmi.n	800c682 <__lo0bits+0x4e>
 800c67a:	085b      	lsrs	r3, r3, #1
 800c67c:	f100 0001 	add.w	r0, r0, #1
 800c680:	d003      	beq.n	800c68a <__lo0bits+0x56>
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	4770      	bx	lr
 800c686:	2000      	movs	r0, #0
 800c688:	4770      	bx	lr
 800c68a:	2020      	movs	r0, #32
 800c68c:	4770      	bx	lr
	...

0800c690 <__i2b>:
 800c690:	b510      	push	{r4, lr}
 800c692:	460c      	mov	r4, r1
 800c694:	2101      	movs	r1, #1
 800c696:	f7ff ff05 	bl	800c4a4 <_Balloc>
 800c69a:	4602      	mov	r2, r0
 800c69c:	b928      	cbnz	r0, 800c6aa <__i2b+0x1a>
 800c69e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6a2:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <__i2b+0x24>)
 800c6a4:	4804      	ldr	r0, [pc, #16]	; (800c6b8 <__i2b+0x28>)
 800c6a6:	f000 fcdb 	bl	800d060 <__assert_func>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	6144      	str	r4, [r0, #20]
 800c6ae:	6103      	str	r3, [r0, #16]
 800c6b0:	bd10      	pop	{r4, pc}
 800c6b2:	bf00      	nop
 800c6b4:	0800f05b 	.word	0x0800f05b
 800c6b8:	0800f06c 	.word	0x0800f06c

0800c6bc <__multiply>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	4691      	mov	r9, r2
 800c6c2:	690a      	ldr	r2, [r1, #16]
 800c6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	bfbe      	ittt	lt
 800c6ce:	460b      	movlt	r3, r1
 800c6d0:	464c      	movlt	r4, r9
 800c6d2:	4699      	movlt	r9, r3
 800c6d4:	6927      	ldr	r7, [r4, #16]
 800c6d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6da:	68a3      	ldr	r3, [r4, #8]
 800c6dc:	6861      	ldr	r1, [r4, #4]
 800c6de:	eb07 060a 	add.w	r6, r7, sl
 800c6e2:	42b3      	cmp	r3, r6
 800c6e4:	b085      	sub	sp, #20
 800c6e6:	bfb8      	it	lt
 800c6e8:	3101      	addlt	r1, #1
 800c6ea:	f7ff fedb 	bl	800c4a4 <_Balloc>
 800c6ee:	b930      	cbnz	r0, 800c6fe <__multiply+0x42>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	f240 115d 	movw	r1, #349	; 0x15d
 800c6f6:	4b43      	ldr	r3, [pc, #268]	; (800c804 <__multiply+0x148>)
 800c6f8:	4843      	ldr	r0, [pc, #268]	; (800c808 <__multiply+0x14c>)
 800c6fa:	f000 fcb1 	bl	800d060 <__assert_func>
 800c6fe:	f100 0514 	add.w	r5, r0, #20
 800c702:	462b      	mov	r3, r5
 800c704:	2200      	movs	r2, #0
 800c706:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c70a:	4543      	cmp	r3, r8
 800c70c:	d321      	bcc.n	800c752 <__multiply+0x96>
 800c70e:	f104 0314 	add.w	r3, r4, #20
 800c712:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c716:	f109 0314 	add.w	r3, r9, #20
 800c71a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c71e:	9202      	str	r2, [sp, #8]
 800c720:	1b3a      	subs	r2, r7, r4
 800c722:	3a15      	subs	r2, #21
 800c724:	f022 0203 	bic.w	r2, r2, #3
 800c728:	3204      	adds	r2, #4
 800c72a:	f104 0115 	add.w	r1, r4, #21
 800c72e:	428f      	cmp	r7, r1
 800c730:	bf38      	it	cc
 800c732:	2204      	movcc	r2, #4
 800c734:	9201      	str	r2, [sp, #4]
 800c736:	9a02      	ldr	r2, [sp, #8]
 800c738:	9303      	str	r3, [sp, #12]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d80c      	bhi.n	800c758 <__multiply+0x9c>
 800c73e:	2e00      	cmp	r6, #0
 800c740:	dd03      	ble.n	800c74a <__multiply+0x8e>
 800c742:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c746:	2b00      	cmp	r3, #0
 800c748:	d059      	beq.n	800c7fe <__multiply+0x142>
 800c74a:	6106      	str	r6, [r0, #16]
 800c74c:	b005      	add	sp, #20
 800c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c752:	f843 2b04 	str.w	r2, [r3], #4
 800c756:	e7d8      	b.n	800c70a <__multiply+0x4e>
 800c758:	f8b3 a000 	ldrh.w	sl, [r3]
 800c75c:	f1ba 0f00 	cmp.w	sl, #0
 800c760:	d023      	beq.n	800c7aa <__multiply+0xee>
 800c762:	46a9      	mov	r9, r5
 800c764:	f04f 0c00 	mov.w	ip, #0
 800c768:	f104 0e14 	add.w	lr, r4, #20
 800c76c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c770:	f8d9 1000 	ldr.w	r1, [r9]
 800c774:	fa1f fb82 	uxth.w	fp, r2
 800c778:	b289      	uxth	r1, r1
 800c77a:	fb0a 110b 	mla	r1, sl, fp, r1
 800c77e:	4461      	add	r1, ip
 800c780:	f8d9 c000 	ldr.w	ip, [r9]
 800c784:	0c12      	lsrs	r2, r2, #16
 800c786:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c78a:	fb0a c202 	mla	r2, sl, r2, ip
 800c78e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c792:	b289      	uxth	r1, r1
 800c794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c798:	4577      	cmp	r7, lr
 800c79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c79e:	f849 1b04 	str.w	r1, [r9], #4
 800c7a2:	d8e3      	bhi.n	800c76c <__multiply+0xb0>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	f845 c002 	str.w	ip, [r5, r2]
 800c7aa:	9a03      	ldr	r2, [sp, #12]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7b2:	f1b9 0f00 	cmp.w	r9, #0
 800c7b6:	d020      	beq.n	800c7fa <__multiply+0x13e>
 800c7b8:	46ae      	mov	lr, r5
 800c7ba:	f04f 0a00 	mov.w	sl, #0
 800c7be:	6829      	ldr	r1, [r5, #0]
 800c7c0:	f104 0c14 	add.w	ip, r4, #20
 800c7c4:	f8bc b000 	ldrh.w	fp, [ip]
 800c7c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7cc:	b289      	uxth	r1, r1
 800c7ce:	fb09 220b 	mla	r2, r9, fp, r2
 800c7d2:	4492      	add	sl, r2
 800c7d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c7d8:	f84e 1b04 	str.w	r1, [lr], #4
 800c7dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7e0:	f8be 1000 	ldrh.w	r1, [lr]
 800c7e4:	0c12      	lsrs	r2, r2, #16
 800c7e6:	fb09 1102 	mla	r1, r9, r2, r1
 800c7ea:	4567      	cmp	r7, ip
 800c7ec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f4:	d8e6      	bhi.n	800c7c4 <__multiply+0x108>
 800c7f6:	9a01      	ldr	r2, [sp, #4]
 800c7f8:	50a9      	str	r1, [r5, r2]
 800c7fa:	3504      	adds	r5, #4
 800c7fc:	e79b      	b.n	800c736 <__multiply+0x7a>
 800c7fe:	3e01      	subs	r6, #1
 800c800:	e79d      	b.n	800c73e <__multiply+0x82>
 800c802:	bf00      	nop
 800c804:	0800f05b 	.word	0x0800f05b
 800c808:	0800f06c 	.word	0x0800f06c

0800c80c <__pow5mult>:
 800c80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c810:	4615      	mov	r5, r2
 800c812:	f012 0203 	ands.w	r2, r2, #3
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	d007      	beq.n	800c82c <__pow5mult+0x20>
 800c81c:	4c25      	ldr	r4, [pc, #148]	; (800c8b4 <__pow5mult+0xa8>)
 800c81e:	3a01      	subs	r2, #1
 800c820:	2300      	movs	r3, #0
 800c822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c826:	f7ff fe9f 	bl	800c568 <__multadd>
 800c82a:	4607      	mov	r7, r0
 800c82c:	10ad      	asrs	r5, r5, #2
 800c82e:	d03d      	beq.n	800c8ac <__pow5mult+0xa0>
 800c830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c832:	b97c      	cbnz	r4, 800c854 <__pow5mult+0x48>
 800c834:	2010      	movs	r0, #16
 800c836:	f7ff fe11 	bl	800c45c <malloc>
 800c83a:	4602      	mov	r2, r0
 800c83c:	6270      	str	r0, [r6, #36]	; 0x24
 800c83e:	b928      	cbnz	r0, 800c84c <__pow5mult+0x40>
 800c840:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c844:	4b1c      	ldr	r3, [pc, #112]	; (800c8b8 <__pow5mult+0xac>)
 800c846:	481d      	ldr	r0, [pc, #116]	; (800c8bc <__pow5mult+0xb0>)
 800c848:	f000 fc0a 	bl	800d060 <__assert_func>
 800c84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c850:	6004      	str	r4, [r0, #0]
 800c852:	60c4      	str	r4, [r0, #12]
 800c854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c85c:	b94c      	cbnz	r4, 800c872 <__pow5mult+0x66>
 800c85e:	f240 2171 	movw	r1, #625	; 0x271
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ff14 	bl	800c690 <__i2b>
 800c868:	2300      	movs	r3, #0
 800c86a:	4604      	mov	r4, r0
 800c86c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c870:	6003      	str	r3, [r0, #0]
 800c872:	f04f 0900 	mov.w	r9, #0
 800c876:	07eb      	lsls	r3, r5, #31
 800c878:	d50a      	bpl.n	800c890 <__pow5mult+0x84>
 800c87a:	4639      	mov	r1, r7
 800c87c:	4622      	mov	r2, r4
 800c87e:	4630      	mov	r0, r6
 800c880:	f7ff ff1c 	bl	800c6bc <__multiply>
 800c884:	4680      	mov	r8, r0
 800c886:	4639      	mov	r1, r7
 800c888:	4630      	mov	r0, r6
 800c88a:	f7ff fe4b 	bl	800c524 <_Bfree>
 800c88e:	4647      	mov	r7, r8
 800c890:	106d      	asrs	r5, r5, #1
 800c892:	d00b      	beq.n	800c8ac <__pow5mult+0xa0>
 800c894:	6820      	ldr	r0, [r4, #0]
 800c896:	b938      	cbnz	r0, 800c8a8 <__pow5mult+0x9c>
 800c898:	4622      	mov	r2, r4
 800c89a:	4621      	mov	r1, r4
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff ff0d 	bl	800c6bc <__multiply>
 800c8a2:	6020      	str	r0, [r4, #0]
 800c8a4:	f8c0 9000 	str.w	r9, [r0]
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	e7e4      	b.n	800c876 <__pow5mult+0x6a>
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800f1b8 	.word	0x0800f1b8
 800c8b8:	0800efe9 	.word	0x0800efe9
 800c8bc:	0800f06c 	.word	0x0800f06c

0800c8c0 <__lshift>:
 800c8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	4607      	mov	r7, r0
 800c8c8:	4691      	mov	r9, r2
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	6849      	ldr	r1, [r1, #4]
 800c8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8d2:	68a3      	ldr	r3, [r4, #8]
 800c8d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8d8:	f108 0601 	add.w	r6, r8, #1
 800c8dc:	42b3      	cmp	r3, r6
 800c8de:	db0b      	blt.n	800c8f8 <__lshift+0x38>
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f7ff fddf 	bl	800c4a4 <_Balloc>
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	b948      	cbnz	r0, 800c8fe <__lshift+0x3e>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <__lshift+0xd8>)
 800c8f2:	482a      	ldr	r0, [pc, #168]	; (800c99c <__lshift+0xdc>)
 800c8f4:	f000 fbb4 	bl	800d060 <__assert_func>
 800c8f8:	3101      	adds	r1, #1
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	e7ee      	b.n	800c8dc <__lshift+0x1c>
 800c8fe:	2300      	movs	r3, #0
 800c900:	f100 0114 	add.w	r1, r0, #20
 800c904:	f100 0210 	add.w	r2, r0, #16
 800c908:	4618      	mov	r0, r3
 800c90a:	4553      	cmp	r3, sl
 800c90c:	db37      	blt.n	800c97e <__lshift+0xbe>
 800c90e:	6920      	ldr	r0, [r4, #16]
 800c910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c914:	f104 0314 	add.w	r3, r4, #20
 800c918:	f019 091f 	ands.w	r9, r9, #31
 800c91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c924:	d02f      	beq.n	800c986 <__lshift+0xc6>
 800c926:	468a      	mov	sl, r1
 800c928:	f04f 0c00 	mov.w	ip, #0
 800c92c:	f1c9 0e20 	rsb	lr, r9, #32
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	fa02 f209 	lsl.w	r2, r2, r9
 800c936:	ea42 020c 	orr.w	r2, r2, ip
 800c93a:	f84a 2b04 	str.w	r2, [sl], #4
 800c93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c942:	4298      	cmp	r0, r3
 800c944:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c948:	d8f2      	bhi.n	800c930 <__lshift+0x70>
 800c94a:	1b03      	subs	r3, r0, r4
 800c94c:	3b15      	subs	r3, #21
 800c94e:	f023 0303 	bic.w	r3, r3, #3
 800c952:	3304      	adds	r3, #4
 800c954:	f104 0215 	add.w	r2, r4, #21
 800c958:	4290      	cmp	r0, r2
 800c95a:	bf38      	it	cc
 800c95c:	2304      	movcc	r3, #4
 800c95e:	f841 c003 	str.w	ip, [r1, r3]
 800c962:	f1bc 0f00 	cmp.w	ip, #0
 800c966:	d001      	beq.n	800c96c <__lshift+0xac>
 800c968:	f108 0602 	add.w	r6, r8, #2
 800c96c:	3e01      	subs	r6, #1
 800c96e:	4638      	mov	r0, r7
 800c970:	4621      	mov	r1, r4
 800c972:	612e      	str	r6, [r5, #16]
 800c974:	f7ff fdd6 	bl	800c524 <_Bfree>
 800c978:	4628      	mov	r0, r5
 800c97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c982:	3301      	adds	r3, #1
 800c984:	e7c1      	b.n	800c90a <__lshift+0x4a>
 800c986:	3904      	subs	r1, #4
 800c988:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98c:	4298      	cmp	r0, r3
 800c98e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c992:	d8f9      	bhi.n	800c988 <__lshift+0xc8>
 800c994:	e7ea      	b.n	800c96c <__lshift+0xac>
 800c996:	bf00      	nop
 800c998:	0800f05b 	.word	0x0800f05b
 800c99c:	0800f06c 	.word	0x0800f06c

0800c9a0 <__mcmp>:
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	690a      	ldr	r2, [r1, #16]
 800c9a4:	6900      	ldr	r0, [r0, #16]
 800c9a6:	b530      	push	{r4, r5, lr}
 800c9a8:	1a80      	subs	r0, r0, r2
 800c9aa:	d10d      	bne.n	800c9c8 <__mcmp+0x28>
 800c9ac:	3314      	adds	r3, #20
 800c9ae:	3114      	adds	r1, #20
 800c9b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c9b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9c0:	4295      	cmp	r5, r2
 800c9c2:	d002      	beq.n	800c9ca <__mcmp+0x2a>
 800c9c4:	d304      	bcc.n	800c9d0 <__mcmp+0x30>
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	bd30      	pop	{r4, r5, pc}
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	d3f4      	bcc.n	800c9b8 <__mcmp+0x18>
 800c9ce:	e7fb      	b.n	800c9c8 <__mcmp+0x28>
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	e7f8      	b.n	800c9c8 <__mcmp+0x28>
	...

0800c9d8 <__mdiff>:
 800c9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9dc:	460d      	mov	r5, r1
 800c9de:	4607      	mov	r7, r0
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	4614      	mov	r4, r2
 800c9e6:	f7ff ffdb 	bl	800c9a0 <__mcmp>
 800c9ea:	1e06      	subs	r6, r0, #0
 800c9ec:	d111      	bne.n	800ca12 <__mdiff+0x3a>
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff fd57 	bl	800c4a4 <_Balloc>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	b928      	cbnz	r0, 800ca06 <__mdiff+0x2e>
 800c9fa:	f240 2132 	movw	r1, #562	; 0x232
 800c9fe:	4b3a      	ldr	r3, [pc, #232]	; (800cae8 <__mdiff+0x110>)
 800ca00:	483a      	ldr	r0, [pc, #232]	; (800caec <__mdiff+0x114>)
 800ca02:	f000 fb2d 	bl	800d060 <__assert_func>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	bfa4      	itt	ge
 800ca14:	4623      	movge	r3, r4
 800ca16:	462c      	movge	r4, r5
 800ca18:	4638      	mov	r0, r7
 800ca1a:	6861      	ldr	r1, [r4, #4]
 800ca1c:	bfa6      	itte	ge
 800ca1e:	461d      	movge	r5, r3
 800ca20:	2600      	movge	r6, #0
 800ca22:	2601      	movlt	r6, #1
 800ca24:	f7ff fd3e 	bl	800c4a4 <_Balloc>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	b918      	cbnz	r0, 800ca34 <__mdiff+0x5c>
 800ca2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca30:	4b2d      	ldr	r3, [pc, #180]	; (800cae8 <__mdiff+0x110>)
 800ca32:	e7e5      	b.n	800ca00 <__mdiff+0x28>
 800ca34:	f102 0814 	add.w	r8, r2, #20
 800ca38:	46c2      	mov	sl, r8
 800ca3a:	f04f 0c00 	mov.w	ip, #0
 800ca3e:	6927      	ldr	r7, [r4, #16]
 800ca40:	60c6      	str	r6, [r0, #12]
 800ca42:	692e      	ldr	r6, [r5, #16]
 800ca44:	f104 0014 	add.w	r0, r4, #20
 800ca48:	f105 0914 	add.w	r9, r5, #20
 800ca4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ca50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca54:	3410      	adds	r4, #16
 800ca56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ca5a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca5e:	fa1f f18b 	uxth.w	r1, fp
 800ca62:	448c      	add	ip, r1
 800ca64:	b299      	uxth	r1, r3
 800ca66:	0c1b      	lsrs	r3, r3, #16
 800ca68:	ebac 0101 	sub.w	r1, ip, r1
 800ca6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca74:	b289      	uxth	r1, r1
 800ca76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ca7a:	454e      	cmp	r6, r9
 800ca7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca80:	f84a 3b04 	str.w	r3, [sl], #4
 800ca84:	d8e7      	bhi.n	800ca56 <__mdiff+0x7e>
 800ca86:	1b73      	subs	r3, r6, r5
 800ca88:	3b15      	subs	r3, #21
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	3515      	adds	r5, #21
 800ca90:	3304      	adds	r3, #4
 800ca92:	42ae      	cmp	r6, r5
 800ca94:	bf38      	it	cc
 800ca96:	2304      	movcc	r3, #4
 800ca98:	4418      	add	r0, r3
 800ca9a:	4443      	add	r3, r8
 800ca9c:	461e      	mov	r6, r3
 800ca9e:	4605      	mov	r5, r0
 800caa0:	4575      	cmp	r5, lr
 800caa2:	d30e      	bcc.n	800cac2 <__mdiff+0xea>
 800caa4:	f10e 0103 	add.w	r1, lr, #3
 800caa8:	1a09      	subs	r1, r1, r0
 800caaa:	f021 0103 	bic.w	r1, r1, #3
 800caae:	3803      	subs	r0, #3
 800cab0:	4586      	cmp	lr, r0
 800cab2:	bf38      	it	cc
 800cab4:	2100      	movcc	r1, #0
 800cab6:	4419      	add	r1, r3
 800cab8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cabc:	b18b      	cbz	r3, 800cae2 <__mdiff+0x10a>
 800cabe:	6117      	str	r7, [r2, #16]
 800cac0:	e7a4      	b.n	800ca0c <__mdiff+0x34>
 800cac2:	f855 8b04 	ldr.w	r8, [r5], #4
 800cac6:	fa1f f188 	uxth.w	r1, r8
 800caca:	4461      	add	r1, ip
 800cacc:	140c      	asrs	r4, r1, #16
 800cace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cad2:	b289      	uxth	r1, r1
 800cad4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cad8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cadc:	f846 1b04 	str.w	r1, [r6], #4
 800cae0:	e7de      	b.n	800caa0 <__mdiff+0xc8>
 800cae2:	3f01      	subs	r7, #1
 800cae4:	e7e8      	b.n	800cab8 <__mdiff+0xe0>
 800cae6:	bf00      	nop
 800cae8:	0800f05b 	.word	0x0800f05b
 800caec:	0800f06c 	.word	0x0800f06c

0800caf0 <__d2b>:
 800caf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800caf4:	2101      	movs	r1, #1
 800caf6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cafa:	4690      	mov	r8, r2
 800cafc:	461d      	mov	r5, r3
 800cafe:	f7ff fcd1 	bl	800c4a4 <_Balloc>
 800cb02:	4604      	mov	r4, r0
 800cb04:	b930      	cbnz	r0, 800cb14 <__d2b+0x24>
 800cb06:	4602      	mov	r2, r0
 800cb08:	f240 310a 	movw	r1, #778	; 0x30a
 800cb0c:	4b24      	ldr	r3, [pc, #144]	; (800cba0 <__d2b+0xb0>)
 800cb0e:	4825      	ldr	r0, [pc, #148]	; (800cba4 <__d2b+0xb4>)
 800cb10:	f000 faa6 	bl	800d060 <__assert_func>
 800cb14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cb18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cb1c:	bb2d      	cbnz	r5, 800cb6a <__d2b+0x7a>
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	f1b8 0300 	subs.w	r3, r8, #0
 800cb24:	d026      	beq.n	800cb74 <__d2b+0x84>
 800cb26:	4668      	mov	r0, sp
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	f7ff fd83 	bl	800c634 <__lo0bits>
 800cb2e:	9900      	ldr	r1, [sp, #0]
 800cb30:	b1f0      	cbz	r0, 800cb70 <__d2b+0x80>
 800cb32:	9a01      	ldr	r2, [sp, #4]
 800cb34:	f1c0 0320 	rsb	r3, r0, #32
 800cb38:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3c:	430b      	orrs	r3, r1
 800cb3e:	40c2      	lsrs	r2, r0
 800cb40:	6163      	str	r3, [r4, #20]
 800cb42:	9201      	str	r2, [sp, #4]
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bf14      	ite	ne
 800cb4a:	2102      	movne	r1, #2
 800cb4c:	2101      	moveq	r1, #1
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	6121      	str	r1, [r4, #16]
 800cb52:	b1c5      	cbz	r5, 800cb86 <__d2b+0x96>
 800cb54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb58:	4405      	add	r5, r0
 800cb5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb5e:	603d      	str	r5, [r7, #0]
 800cb60:	6030      	str	r0, [r6, #0]
 800cb62:	4620      	mov	r0, r4
 800cb64:	b002      	add	sp, #8
 800cb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb6e:	e7d6      	b.n	800cb1e <__d2b+0x2e>
 800cb70:	6161      	str	r1, [r4, #20]
 800cb72:	e7e7      	b.n	800cb44 <__d2b+0x54>
 800cb74:	a801      	add	r0, sp, #4
 800cb76:	f7ff fd5d 	bl	800c634 <__lo0bits>
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	6121      	str	r1, [r4, #16]
 800cb80:	6163      	str	r3, [r4, #20]
 800cb82:	3020      	adds	r0, #32
 800cb84:	e7e5      	b.n	800cb52 <__d2b+0x62>
 800cb86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb8e:	6038      	str	r0, [r7, #0]
 800cb90:	6918      	ldr	r0, [r3, #16]
 800cb92:	f7ff fd2f 	bl	800c5f4 <__hi0bits>
 800cb96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb9a:	6031      	str	r1, [r6, #0]
 800cb9c:	e7e1      	b.n	800cb62 <__d2b+0x72>
 800cb9e:	bf00      	nop
 800cba0:	0800f05b 	.word	0x0800f05b
 800cba4:	0800f06c 	.word	0x0800f06c

0800cba8 <_calloc_r>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	fba1 5402 	umull	r5, r4, r1, r2
 800cbae:	b934      	cbnz	r4, 800cbbe <_calloc_r+0x16>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f000 f875 	bl	800cca0 <_malloc_r>
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	b928      	cbnz	r0, 800cbc6 <_calloc_r+0x1e>
 800cbba:	4630      	mov	r0, r6
 800cbbc:	bd70      	pop	{r4, r5, r6, pc}
 800cbbe:	220c      	movs	r2, #12
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	6002      	str	r2, [r0, #0]
 800cbc4:	e7f9      	b.n	800cbba <_calloc_r+0x12>
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	4621      	mov	r1, r4
 800cbca:	f7fe f941 	bl	800ae50 <memset>
 800cbce:	e7f4      	b.n	800cbba <_calloc_r+0x12>

0800cbd0 <_free_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	d040      	beq.n	800cc5a <_free_r+0x8a>
 800cbd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbdc:	1f0c      	subs	r4, r1, #4
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	bfb8      	it	lt
 800cbe2:	18e4      	addlt	r4, r4, r3
 800cbe4:	f000 fa98 	bl	800d118 <__malloc_lock>
 800cbe8:	4a1c      	ldr	r2, [pc, #112]	; (800cc5c <_free_r+0x8c>)
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	b933      	cbnz	r3, 800cbfc <_free_r+0x2c>
 800cbee:	6063      	str	r3, [r4, #4]
 800cbf0:	6014      	str	r4, [r2, #0]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbf8:	f000 ba94 	b.w	800d124 <__malloc_unlock>
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	d908      	bls.n	800cc12 <_free_r+0x42>
 800cc00:	6820      	ldr	r0, [r4, #0]
 800cc02:	1821      	adds	r1, r4, r0
 800cc04:	428b      	cmp	r3, r1
 800cc06:	bf01      	itttt	eq
 800cc08:	6819      	ldreq	r1, [r3, #0]
 800cc0a:	685b      	ldreq	r3, [r3, #4]
 800cc0c:	1809      	addeq	r1, r1, r0
 800cc0e:	6021      	streq	r1, [r4, #0]
 800cc10:	e7ed      	b.n	800cbee <_free_r+0x1e>
 800cc12:	461a      	mov	r2, r3
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	b10b      	cbz	r3, 800cc1c <_free_r+0x4c>
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	d9fa      	bls.n	800cc12 <_free_r+0x42>
 800cc1c:	6811      	ldr	r1, [r2, #0]
 800cc1e:	1850      	adds	r0, r2, r1
 800cc20:	42a0      	cmp	r0, r4
 800cc22:	d10b      	bne.n	800cc3c <_free_r+0x6c>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	4401      	add	r1, r0
 800cc28:	1850      	adds	r0, r2, r1
 800cc2a:	4283      	cmp	r3, r0
 800cc2c:	6011      	str	r1, [r2, #0]
 800cc2e:	d1e0      	bne.n	800cbf2 <_free_r+0x22>
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4401      	add	r1, r0
 800cc36:	6011      	str	r1, [r2, #0]
 800cc38:	6053      	str	r3, [r2, #4]
 800cc3a:	e7da      	b.n	800cbf2 <_free_r+0x22>
 800cc3c:	d902      	bls.n	800cc44 <_free_r+0x74>
 800cc3e:	230c      	movs	r3, #12
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	e7d6      	b.n	800cbf2 <_free_r+0x22>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	1821      	adds	r1, r4, r0
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	bf01      	itttt	eq
 800cc4c:	6819      	ldreq	r1, [r3, #0]
 800cc4e:	685b      	ldreq	r3, [r3, #4]
 800cc50:	1809      	addeq	r1, r1, r0
 800cc52:	6021      	streq	r1, [r4, #0]
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	6054      	str	r4, [r2, #4]
 800cc58:	e7cb      	b.n	800cbf2 <_free_r+0x22>
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	2000165c 	.word	0x2000165c

0800cc60 <sbrk_aligned>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	4e0e      	ldr	r6, [pc, #56]	; (800cc9c <sbrk_aligned+0x3c>)
 800cc64:	460c      	mov	r4, r1
 800cc66:	6831      	ldr	r1, [r6, #0]
 800cc68:	4605      	mov	r5, r0
 800cc6a:	b911      	cbnz	r1, 800cc72 <sbrk_aligned+0x12>
 800cc6c:	f000 f9e8 	bl	800d040 <_sbrk_r>
 800cc70:	6030      	str	r0, [r6, #0]
 800cc72:	4621      	mov	r1, r4
 800cc74:	4628      	mov	r0, r5
 800cc76:	f000 f9e3 	bl	800d040 <_sbrk_r>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	d00a      	beq.n	800cc94 <sbrk_aligned+0x34>
 800cc7e:	1cc4      	adds	r4, r0, #3
 800cc80:	f024 0403 	bic.w	r4, r4, #3
 800cc84:	42a0      	cmp	r0, r4
 800cc86:	d007      	beq.n	800cc98 <sbrk_aligned+0x38>
 800cc88:	1a21      	subs	r1, r4, r0
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f000 f9d8 	bl	800d040 <_sbrk_r>
 800cc90:	3001      	adds	r0, #1
 800cc92:	d101      	bne.n	800cc98 <sbrk_aligned+0x38>
 800cc94:	f04f 34ff 	mov.w	r4, #4294967295
 800cc98:	4620      	mov	r0, r4
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	20001660 	.word	0x20001660

0800cca0 <_malloc_r>:
 800cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca4:	1ccd      	adds	r5, r1, #3
 800cca6:	f025 0503 	bic.w	r5, r5, #3
 800ccaa:	3508      	adds	r5, #8
 800ccac:	2d0c      	cmp	r5, #12
 800ccae:	bf38      	it	cc
 800ccb0:	250c      	movcc	r5, #12
 800ccb2:	2d00      	cmp	r5, #0
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	db01      	blt.n	800ccbc <_malloc_r+0x1c>
 800ccb8:	42a9      	cmp	r1, r5
 800ccba:	d905      	bls.n	800ccc8 <_malloc_r+0x28>
 800ccbc:	230c      	movs	r3, #12
 800ccbe:	2600      	movs	r6, #0
 800ccc0:	603b      	str	r3, [r7, #0]
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc8:	4e2e      	ldr	r6, [pc, #184]	; (800cd84 <_malloc_r+0xe4>)
 800ccca:	f000 fa25 	bl	800d118 <__malloc_lock>
 800ccce:	6833      	ldr	r3, [r6, #0]
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	bb34      	cbnz	r4, 800cd22 <_malloc_r+0x82>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7ff ffc2 	bl	800cc60 <sbrk_aligned>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	4604      	mov	r4, r0
 800cce0:	d14d      	bne.n	800cd7e <_malloc_r+0xde>
 800cce2:	6834      	ldr	r4, [r6, #0]
 800cce4:	4626      	mov	r6, r4
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	d140      	bne.n	800cd6c <_malloc_r+0xcc>
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4631      	mov	r1, r6
 800ccee:	4638      	mov	r0, r7
 800ccf0:	eb04 0803 	add.w	r8, r4, r3
 800ccf4:	f000 f9a4 	bl	800d040 <_sbrk_r>
 800ccf8:	4580      	cmp	r8, r0
 800ccfa:	d13a      	bne.n	800cd72 <_malloc_r+0xd2>
 800ccfc:	6821      	ldr	r1, [r4, #0]
 800ccfe:	3503      	adds	r5, #3
 800cd00:	1a6d      	subs	r5, r5, r1
 800cd02:	f025 0503 	bic.w	r5, r5, #3
 800cd06:	3508      	adds	r5, #8
 800cd08:	2d0c      	cmp	r5, #12
 800cd0a:	bf38      	it	cc
 800cd0c:	250c      	movcc	r5, #12
 800cd0e:	4638      	mov	r0, r7
 800cd10:	4629      	mov	r1, r5
 800cd12:	f7ff ffa5 	bl	800cc60 <sbrk_aligned>
 800cd16:	3001      	adds	r0, #1
 800cd18:	d02b      	beq.n	800cd72 <_malloc_r+0xd2>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	442b      	add	r3, r5
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	e00e      	b.n	800cd40 <_malloc_r+0xa0>
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	1b52      	subs	r2, r2, r5
 800cd26:	d41e      	bmi.n	800cd66 <_malloc_r+0xc6>
 800cd28:	2a0b      	cmp	r2, #11
 800cd2a:	d916      	bls.n	800cd5a <_malloc_r+0xba>
 800cd2c:	1961      	adds	r1, r4, r5
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	6025      	str	r5, [r4, #0]
 800cd32:	bf18      	it	ne
 800cd34:	6059      	strne	r1, [r3, #4]
 800cd36:	6863      	ldr	r3, [r4, #4]
 800cd38:	bf08      	it	eq
 800cd3a:	6031      	streq	r1, [r6, #0]
 800cd3c:	5162      	str	r2, [r4, r5]
 800cd3e:	604b      	str	r3, [r1, #4]
 800cd40:	4638      	mov	r0, r7
 800cd42:	f104 060b 	add.w	r6, r4, #11
 800cd46:	f000 f9ed 	bl	800d124 <__malloc_unlock>
 800cd4a:	f026 0607 	bic.w	r6, r6, #7
 800cd4e:	1d23      	adds	r3, r4, #4
 800cd50:	1af2      	subs	r2, r6, r3
 800cd52:	d0b6      	beq.n	800ccc2 <_malloc_r+0x22>
 800cd54:	1b9b      	subs	r3, r3, r6
 800cd56:	50a3      	str	r3, [r4, r2]
 800cd58:	e7b3      	b.n	800ccc2 <_malloc_r+0x22>
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	bf0c      	ite	eq
 800cd60:	6032      	streq	r2, [r6, #0]
 800cd62:	605a      	strne	r2, [r3, #4]
 800cd64:	e7ec      	b.n	800cd40 <_malloc_r+0xa0>
 800cd66:	4623      	mov	r3, r4
 800cd68:	6864      	ldr	r4, [r4, #4]
 800cd6a:	e7b2      	b.n	800ccd2 <_malloc_r+0x32>
 800cd6c:	4634      	mov	r4, r6
 800cd6e:	6876      	ldr	r6, [r6, #4]
 800cd70:	e7b9      	b.n	800cce6 <_malloc_r+0x46>
 800cd72:	230c      	movs	r3, #12
 800cd74:	4638      	mov	r0, r7
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	f000 f9d4 	bl	800d124 <__malloc_unlock>
 800cd7c:	e7a1      	b.n	800ccc2 <_malloc_r+0x22>
 800cd7e:	6025      	str	r5, [r4, #0]
 800cd80:	e7de      	b.n	800cd40 <_malloc_r+0xa0>
 800cd82:	bf00      	nop
 800cd84:	2000165c 	.word	0x2000165c

0800cd88 <__ssputs_r>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	688e      	ldr	r6, [r1, #8]
 800cd8e:	4682      	mov	sl, r0
 800cd90:	429e      	cmp	r6, r3
 800cd92:	460c      	mov	r4, r1
 800cd94:	4690      	mov	r8, r2
 800cd96:	461f      	mov	r7, r3
 800cd98:	d838      	bhi.n	800ce0c <__ssputs_r+0x84>
 800cd9a:	898a      	ldrh	r2, [r1, #12]
 800cd9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cda0:	d032      	beq.n	800ce08 <__ssputs_r+0x80>
 800cda2:	6825      	ldr	r5, [r4, #0]
 800cda4:	6909      	ldr	r1, [r1, #16]
 800cda6:	3301      	adds	r3, #1
 800cda8:	eba5 0901 	sub.w	r9, r5, r1
 800cdac:	6965      	ldr	r5, [r4, #20]
 800cdae:	444b      	add	r3, r9
 800cdb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdb8:	106d      	asrs	r5, r5, #1
 800cdba:	429d      	cmp	r5, r3
 800cdbc:	bf38      	it	cc
 800cdbe:	461d      	movcc	r5, r3
 800cdc0:	0553      	lsls	r3, r2, #21
 800cdc2:	d531      	bpl.n	800ce28 <__ssputs_r+0xa0>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	f7ff ff6b 	bl	800cca0 <_malloc_r>
 800cdca:	4606      	mov	r6, r0
 800cdcc:	b950      	cbnz	r0, 800cde4 <__ssputs_r+0x5c>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	f8ca 3000 	str.w	r3, [sl]
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde4:	464a      	mov	r2, r9
 800cde6:	6921      	ldr	r1, [r4, #16]
 800cde8:	f7ff fb4e 	bl	800c488 <memcpy>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	6126      	str	r6, [r4, #16]
 800cdfa:	444e      	add	r6, r9
 800cdfc:	6026      	str	r6, [r4, #0]
 800cdfe:	463e      	mov	r6, r7
 800ce00:	6165      	str	r5, [r4, #20]
 800ce02:	eba5 0509 	sub.w	r5, r5, r9
 800ce06:	60a5      	str	r5, [r4, #8]
 800ce08:	42be      	cmp	r6, r7
 800ce0a:	d900      	bls.n	800ce0e <__ssputs_r+0x86>
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	4632      	mov	r2, r6
 800ce10:	4641      	mov	r1, r8
 800ce12:	6820      	ldr	r0, [r4, #0]
 800ce14:	f000 f966 	bl	800d0e4 <memmove>
 800ce18:	68a3      	ldr	r3, [r4, #8]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	1b9b      	subs	r3, r3, r6
 800ce1e:	60a3      	str	r3, [r4, #8]
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	4433      	add	r3, r6
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	e7db      	b.n	800cde0 <__ssputs_r+0x58>
 800ce28:	462a      	mov	r2, r5
 800ce2a:	f000 f981 	bl	800d130 <_realloc_r>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d1e1      	bne.n	800cdf8 <__ssputs_r+0x70>
 800ce34:	4650      	mov	r0, sl
 800ce36:	6921      	ldr	r1, [r4, #16]
 800ce38:	f7ff feca 	bl	800cbd0 <_free_r>
 800ce3c:	e7c7      	b.n	800cdce <__ssputs_r+0x46>
	...

0800ce40 <_svfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	4698      	mov	r8, r3
 800ce46:	898b      	ldrh	r3, [r1, #12]
 800ce48:	4607      	mov	r7, r0
 800ce4a:	061b      	lsls	r3, r3, #24
 800ce4c:	460d      	mov	r5, r1
 800ce4e:	4614      	mov	r4, r2
 800ce50:	b09d      	sub	sp, #116	; 0x74
 800ce52:	d50e      	bpl.n	800ce72 <_svfiprintf_r+0x32>
 800ce54:	690b      	ldr	r3, [r1, #16]
 800ce56:	b963      	cbnz	r3, 800ce72 <_svfiprintf_r+0x32>
 800ce58:	2140      	movs	r1, #64	; 0x40
 800ce5a:	f7ff ff21 	bl	800cca0 <_malloc_r>
 800ce5e:	6028      	str	r0, [r5, #0]
 800ce60:	6128      	str	r0, [r5, #16]
 800ce62:	b920      	cbnz	r0, 800ce6e <_svfiprintf_r+0x2e>
 800ce64:	230c      	movs	r3, #12
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	e0d1      	b.n	800d012 <_svfiprintf_r+0x1d2>
 800ce6e:	2340      	movs	r3, #64	; 0x40
 800ce70:	616b      	str	r3, [r5, #20]
 800ce72:	2300      	movs	r3, #0
 800ce74:	9309      	str	r3, [sp, #36]	; 0x24
 800ce76:	2320      	movs	r3, #32
 800ce78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce7c:	2330      	movs	r3, #48	; 0x30
 800ce7e:	f04f 0901 	mov.w	r9, #1
 800ce82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d02c <_svfiprintf_r+0x1ec>
 800ce8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce8e:	4623      	mov	r3, r4
 800ce90:	469a      	mov	sl, r3
 800ce92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce96:	b10a      	cbz	r2, 800ce9c <_svfiprintf_r+0x5c>
 800ce98:	2a25      	cmp	r2, #37	; 0x25
 800ce9a:	d1f9      	bne.n	800ce90 <_svfiprintf_r+0x50>
 800ce9c:	ebba 0b04 	subs.w	fp, sl, r4
 800cea0:	d00b      	beq.n	800ceba <_svfiprintf_r+0x7a>
 800cea2:	465b      	mov	r3, fp
 800cea4:	4622      	mov	r2, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f7ff ff6d 	bl	800cd88 <__ssputs_r>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f000 80aa 	beq.w	800d008 <_svfiprintf_r+0x1c8>
 800ceb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb6:	445a      	add	r2, fp
 800ceb8:	9209      	str	r2, [sp, #36]	; 0x24
 800ceba:	f89a 3000 	ldrb.w	r3, [sl]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 80a2 	beq.w	800d008 <_svfiprintf_r+0x1c8>
 800cec4:	2300      	movs	r3, #0
 800cec6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cece:	f10a 0a01 	add.w	sl, sl, #1
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	9307      	str	r3, [sp, #28]
 800ced6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ceda:	931a      	str	r3, [sp, #104]	; 0x68
 800cedc:	4654      	mov	r4, sl
 800cede:	2205      	movs	r2, #5
 800cee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee4:	4851      	ldr	r0, [pc, #324]	; (800d02c <_svfiprintf_r+0x1ec>)
 800cee6:	f7ff fac1 	bl	800c46c <memchr>
 800ceea:	9a04      	ldr	r2, [sp, #16]
 800ceec:	b9d8      	cbnz	r0, 800cf26 <_svfiprintf_r+0xe6>
 800ceee:	06d0      	lsls	r0, r2, #27
 800cef0:	bf44      	itt	mi
 800cef2:	2320      	movmi	r3, #32
 800cef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cef8:	0711      	lsls	r1, r2, #28
 800cefa:	bf44      	itt	mi
 800cefc:	232b      	movmi	r3, #43	; 0x2b
 800cefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf02:	f89a 3000 	ldrb.w	r3, [sl]
 800cf06:	2b2a      	cmp	r3, #42	; 0x2a
 800cf08:	d015      	beq.n	800cf36 <_svfiprintf_r+0xf6>
 800cf0a:	4654      	mov	r4, sl
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f04f 0c0a 	mov.w	ip, #10
 800cf12:	9a07      	ldr	r2, [sp, #28]
 800cf14:	4621      	mov	r1, r4
 800cf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1a:	3b30      	subs	r3, #48	; 0x30
 800cf1c:	2b09      	cmp	r3, #9
 800cf1e:	d94e      	bls.n	800cfbe <_svfiprintf_r+0x17e>
 800cf20:	b1b0      	cbz	r0, 800cf50 <_svfiprintf_r+0x110>
 800cf22:	9207      	str	r2, [sp, #28]
 800cf24:	e014      	b.n	800cf50 <_svfiprintf_r+0x110>
 800cf26:	eba0 0308 	sub.w	r3, r0, r8
 800cf2a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	46a2      	mov	sl, r4
 800cf32:	9304      	str	r3, [sp, #16]
 800cf34:	e7d2      	b.n	800cedc <_svfiprintf_r+0x9c>
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	1d19      	adds	r1, r3, #4
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	9103      	str	r1, [sp, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	bfbb      	ittet	lt
 800cf42:	425b      	neglt	r3, r3
 800cf44:	f042 0202 	orrlt.w	r2, r2, #2
 800cf48:	9307      	strge	r3, [sp, #28]
 800cf4a:	9307      	strlt	r3, [sp, #28]
 800cf4c:	bfb8      	it	lt
 800cf4e:	9204      	strlt	r2, [sp, #16]
 800cf50:	7823      	ldrb	r3, [r4, #0]
 800cf52:	2b2e      	cmp	r3, #46	; 0x2e
 800cf54:	d10c      	bne.n	800cf70 <_svfiprintf_r+0x130>
 800cf56:	7863      	ldrb	r3, [r4, #1]
 800cf58:	2b2a      	cmp	r3, #42	; 0x2a
 800cf5a:	d135      	bne.n	800cfc8 <_svfiprintf_r+0x188>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	3402      	adds	r4, #2
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	9203      	str	r2, [sp, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfb8      	it	lt
 800cf6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf6e:	9305      	str	r3, [sp, #20]
 800cf70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d030 <_svfiprintf_r+0x1f0>
 800cf74:	2203      	movs	r2, #3
 800cf76:	4650      	mov	r0, sl
 800cf78:	7821      	ldrb	r1, [r4, #0]
 800cf7a:	f7ff fa77 	bl	800c46c <memchr>
 800cf7e:	b140      	cbz	r0, 800cf92 <_svfiprintf_r+0x152>
 800cf80:	2340      	movs	r3, #64	; 0x40
 800cf82:	eba0 000a 	sub.w	r0, r0, sl
 800cf86:	fa03 f000 	lsl.w	r0, r3, r0
 800cf8a:	9b04      	ldr	r3, [sp, #16]
 800cf8c:	3401      	adds	r4, #1
 800cf8e:	4303      	orrs	r3, r0
 800cf90:	9304      	str	r3, [sp, #16]
 800cf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf96:	2206      	movs	r2, #6
 800cf98:	4826      	ldr	r0, [pc, #152]	; (800d034 <_svfiprintf_r+0x1f4>)
 800cf9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf9e:	f7ff fa65 	bl	800c46c <memchr>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d038      	beq.n	800d018 <_svfiprintf_r+0x1d8>
 800cfa6:	4b24      	ldr	r3, [pc, #144]	; (800d038 <_svfiprintf_r+0x1f8>)
 800cfa8:	bb1b      	cbnz	r3, 800cff2 <_svfiprintf_r+0x1b2>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	3307      	adds	r3, #7
 800cfae:	f023 0307 	bic.w	r3, r3, #7
 800cfb2:	3308      	adds	r3, #8
 800cfb4:	9303      	str	r3, [sp, #12]
 800cfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb8:	4433      	add	r3, r6
 800cfba:	9309      	str	r3, [sp, #36]	; 0x24
 800cfbc:	e767      	b.n	800ce8e <_svfiprintf_r+0x4e>
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc6:	e7a5      	b.n	800cf14 <_svfiprintf_r+0xd4>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f04f 0c0a 	mov.w	ip, #10
 800cfce:	4619      	mov	r1, r3
 800cfd0:	3401      	adds	r4, #1
 800cfd2:	9305      	str	r3, [sp, #20]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfda:	3a30      	subs	r2, #48	; 0x30
 800cfdc:	2a09      	cmp	r2, #9
 800cfde:	d903      	bls.n	800cfe8 <_svfiprintf_r+0x1a8>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0c5      	beq.n	800cf70 <_svfiprintf_r+0x130>
 800cfe4:	9105      	str	r1, [sp, #20]
 800cfe6:	e7c3      	b.n	800cf70 <_svfiprintf_r+0x130>
 800cfe8:	4604      	mov	r4, r0
 800cfea:	2301      	movs	r3, #1
 800cfec:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff0:	e7f0      	b.n	800cfd4 <_svfiprintf_r+0x194>
 800cff2:	ab03      	add	r3, sp, #12
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	462a      	mov	r2, r5
 800cff8:	4638      	mov	r0, r7
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <_svfiprintf_r+0x1fc>)
 800cffc:	a904      	add	r1, sp, #16
 800cffe:	f7fd ffcd 	bl	800af9c <_printf_float>
 800d002:	1c42      	adds	r2, r0, #1
 800d004:	4606      	mov	r6, r0
 800d006:	d1d6      	bne.n	800cfb6 <_svfiprintf_r+0x176>
 800d008:	89ab      	ldrh	r3, [r5, #12]
 800d00a:	065b      	lsls	r3, r3, #25
 800d00c:	f53f af2c 	bmi.w	800ce68 <_svfiprintf_r+0x28>
 800d010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d012:	b01d      	add	sp, #116	; 0x74
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	ab03      	add	r3, sp, #12
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	462a      	mov	r2, r5
 800d01e:	4638      	mov	r0, r7
 800d020:	4b06      	ldr	r3, [pc, #24]	; (800d03c <_svfiprintf_r+0x1fc>)
 800d022:	a904      	add	r1, sp, #16
 800d024:	f7fe fa56 	bl	800b4d4 <_printf_i>
 800d028:	e7eb      	b.n	800d002 <_svfiprintf_r+0x1c2>
 800d02a:	bf00      	nop
 800d02c:	0800f1c4 	.word	0x0800f1c4
 800d030:	0800f1ca 	.word	0x0800f1ca
 800d034:	0800f1ce 	.word	0x0800f1ce
 800d038:	0800af9d 	.word	0x0800af9d
 800d03c:	0800cd89 	.word	0x0800cd89

0800d040 <_sbrk_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	2300      	movs	r3, #0
 800d044:	4d05      	ldr	r5, [pc, #20]	; (800d05c <_sbrk_r+0x1c>)
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	602b      	str	r3, [r5, #0]
 800d04c:	f7f4 ff94 	bl	8001f78 <_sbrk>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_sbrk_r+0x1a>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_sbrk_r+0x1a>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	20001664 	.word	0x20001664

0800d060 <__assert_func>:
 800d060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d062:	4614      	mov	r4, r2
 800d064:	461a      	mov	r2, r3
 800d066:	4b09      	ldr	r3, [pc, #36]	; (800d08c <__assert_func+0x2c>)
 800d068:	4605      	mov	r5, r0
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68d8      	ldr	r0, [r3, #12]
 800d06e:	b14c      	cbz	r4, 800d084 <__assert_func+0x24>
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <__assert_func+0x30>)
 800d072:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d076:	9100      	str	r1, [sp, #0]
 800d078:	462b      	mov	r3, r5
 800d07a:	4906      	ldr	r1, [pc, #24]	; (800d094 <__assert_func+0x34>)
 800d07c:	f000 f80e 	bl	800d09c <fiprintf>
 800d080:	f000 faaa 	bl	800d5d8 <abort>
 800d084:	4b04      	ldr	r3, [pc, #16]	; (800d098 <__assert_func+0x38>)
 800d086:	461c      	mov	r4, r3
 800d088:	e7f3      	b.n	800d072 <__assert_func+0x12>
 800d08a:	bf00      	nop
 800d08c:	20000184 	.word	0x20000184
 800d090:	0800f1d5 	.word	0x0800f1d5
 800d094:	0800f1e2 	.word	0x0800f1e2
 800d098:	0800f210 	.word	0x0800f210

0800d09c <fiprintf>:
 800d09c:	b40e      	push	{r1, r2, r3}
 800d09e:	b503      	push	{r0, r1, lr}
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	ab03      	add	r3, sp, #12
 800d0a4:	4805      	ldr	r0, [pc, #20]	; (800d0bc <fiprintf+0x20>)
 800d0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0aa:	6800      	ldr	r0, [r0, #0]
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	f000 f895 	bl	800d1dc <_vfiprintf_r>
 800d0b2:	b002      	add	sp, #8
 800d0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0b8:	b003      	add	sp, #12
 800d0ba:	4770      	bx	lr
 800d0bc:	20000184 	.word	0x20000184

0800d0c0 <__ascii_mbtowc>:
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	b901      	cbnz	r1, 800d0c6 <__ascii_mbtowc+0x6>
 800d0c4:	a901      	add	r1, sp, #4
 800d0c6:	b142      	cbz	r2, 800d0da <__ascii_mbtowc+0x1a>
 800d0c8:	b14b      	cbz	r3, 800d0de <__ascii_mbtowc+0x1e>
 800d0ca:	7813      	ldrb	r3, [r2, #0]
 800d0cc:	600b      	str	r3, [r1, #0]
 800d0ce:	7812      	ldrb	r2, [r2, #0]
 800d0d0:	1e10      	subs	r0, r2, #0
 800d0d2:	bf18      	it	ne
 800d0d4:	2001      	movne	r0, #1
 800d0d6:	b002      	add	sp, #8
 800d0d8:	4770      	bx	lr
 800d0da:	4610      	mov	r0, r2
 800d0dc:	e7fb      	b.n	800d0d6 <__ascii_mbtowc+0x16>
 800d0de:	f06f 0001 	mvn.w	r0, #1
 800d0e2:	e7f8      	b.n	800d0d6 <__ascii_mbtowc+0x16>

0800d0e4 <memmove>:
 800d0e4:	4288      	cmp	r0, r1
 800d0e6:	b510      	push	{r4, lr}
 800d0e8:	eb01 0402 	add.w	r4, r1, r2
 800d0ec:	d902      	bls.n	800d0f4 <memmove+0x10>
 800d0ee:	4284      	cmp	r4, r0
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	d807      	bhi.n	800d104 <memmove+0x20>
 800d0f4:	1e43      	subs	r3, r0, #1
 800d0f6:	42a1      	cmp	r1, r4
 800d0f8:	d008      	beq.n	800d10c <memmove+0x28>
 800d0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d102:	e7f8      	b.n	800d0f6 <memmove+0x12>
 800d104:	4601      	mov	r1, r0
 800d106:	4402      	add	r2, r0
 800d108:	428a      	cmp	r2, r1
 800d10a:	d100      	bne.n	800d10e <memmove+0x2a>
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d116:	e7f7      	b.n	800d108 <memmove+0x24>

0800d118 <__malloc_lock>:
 800d118:	4801      	ldr	r0, [pc, #4]	; (800d120 <__malloc_lock+0x8>)
 800d11a:	f000 bc19 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800d11e:	bf00      	nop
 800d120:	20001668 	.word	0x20001668

0800d124 <__malloc_unlock>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__malloc_unlock+0x8>)
 800d126:	f000 bc14 	b.w	800d952 <__retarget_lock_release_recursive>
 800d12a:	bf00      	nop
 800d12c:	20001668 	.word	0x20001668

0800d130 <_realloc_r>:
 800d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	4680      	mov	r8, r0
 800d136:	4614      	mov	r4, r2
 800d138:	460e      	mov	r6, r1
 800d13a:	b921      	cbnz	r1, 800d146 <_realloc_r+0x16>
 800d13c:	4611      	mov	r1, r2
 800d13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d142:	f7ff bdad 	b.w	800cca0 <_malloc_r>
 800d146:	b92a      	cbnz	r2, 800d154 <_realloc_r+0x24>
 800d148:	f7ff fd42 	bl	800cbd0 <_free_r>
 800d14c:	4625      	mov	r5, r4
 800d14e:	4628      	mov	r0, r5
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d154:	f000 fc64 	bl	800da20 <_malloc_usable_size_r>
 800d158:	4284      	cmp	r4, r0
 800d15a:	4607      	mov	r7, r0
 800d15c:	d802      	bhi.n	800d164 <_realloc_r+0x34>
 800d15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d162:	d812      	bhi.n	800d18a <_realloc_r+0x5a>
 800d164:	4621      	mov	r1, r4
 800d166:	4640      	mov	r0, r8
 800d168:	f7ff fd9a 	bl	800cca0 <_malloc_r>
 800d16c:	4605      	mov	r5, r0
 800d16e:	2800      	cmp	r0, #0
 800d170:	d0ed      	beq.n	800d14e <_realloc_r+0x1e>
 800d172:	42bc      	cmp	r4, r7
 800d174:	4622      	mov	r2, r4
 800d176:	4631      	mov	r1, r6
 800d178:	bf28      	it	cs
 800d17a:	463a      	movcs	r2, r7
 800d17c:	f7ff f984 	bl	800c488 <memcpy>
 800d180:	4631      	mov	r1, r6
 800d182:	4640      	mov	r0, r8
 800d184:	f7ff fd24 	bl	800cbd0 <_free_r>
 800d188:	e7e1      	b.n	800d14e <_realloc_r+0x1e>
 800d18a:	4635      	mov	r5, r6
 800d18c:	e7df      	b.n	800d14e <_realloc_r+0x1e>

0800d18e <__sfputc_r>:
 800d18e:	6893      	ldr	r3, [r2, #8]
 800d190:	b410      	push	{r4}
 800d192:	3b01      	subs	r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	6093      	str	r3, [r2, #8]
 800d198:	da07      	bge.n	800d1aa <__sfputc_r+0x1c>
 800d19a:	6994      	ldr	r4, [r2, #24]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	db01      	blt.n	800d1a4 <__sfputc_r+0x16>
 800d1a0:	290a      	cmp	r1, #10
 800d1a2:	d102      	bne.n	800d1aa <__sfputc_r+0x1c>
 800d1a4:	bc10      	pop	{r4}
 800d1a6:	f000 b949 	b.w	800d43c <__swbuf_r>
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	1c58      	adds	r0, r3, #1
 800d1ae:	6010      	str	r0, [r2, #0]
 800d1b0:	7019      	strb	r1, [r3, #0]
 800d1b2:	4608      	mov	r0, r1
 800d1b4:	bc10      	pop	{r4}
 800d1b6:	4770      	bx	lr

0800d1b8 <__sfputs_r>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	4614      	mov	r4, r2
 800d1c0:	18d5      	adds	r5, r2, r3
 800d1c2:	42ac      	cmp	r4, r5
 800d1c4:	d101      	bne.n	800d1ca <__sfputs_r+0x12>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	e007      	b.n	800d1da <__sfputs_r+0x22>
 800d1ca:	463a      	mov	r2, r7
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d2:	f7ff ffdc 	bl	800d18e <__sfputc_r>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d1f3      	bne.n	800d1c2 <__sfputs_r+0xa>
 800d1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1dc <_vfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	4614      	mov	r4, r2
 800d1e4:	4698      	mov	r8, r3
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	b09d      	sub	sp, #116	; 0x74
 800d1ea:	b118      	cbz	r0, 800d1f4 <_vfiprintf_r+0x18>
 800d1ec:	6983      	ldr	r3, [r0, #24]
 800d1ee:	b90b      	cbnz	r3, 800d1f4 <_vfiprintf_r+0x18>
 800d1f0:	f000 fb10 	bl	800d814 <__sinit>
 800d1f4:	4b89      	ldr	r3, [pc, #548]	; (800d41c <_vfiprintf_r+0x240>)
 800d1f6:	429d      	cmp	r5, r3
 800d1f8:	d11b      	bne.n	800d232 <_vfiprintf_r+0x56>
 800d1fa:	6875      	ldr	r5, [r6, #4]
 800d1fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1fe:	07d9      	lsls	r1, r3, #31
 800d200:	d405      	bmi.n	800d20e <_vfiprintf_r+0x32>
 800d202:	89ab      	ldrh	r3, [r5, #12]
 800d204:	059a      	lsls	r2, r3, #22
 800d206:	d402      	bmi.n	800d20e <_vfiprintf_r+0x32>
 800d208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d20a:	f000 fba1 	bl	800d950 <__retarget_lock_acquire_recursive>
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	071b      	lsls	r3, r3, #28
 800d212:	d501      	bpl.n	800d218 <_vfiprintf_r+0x3c>
 800d214:	692b      	ldr	r3, [r5, #16]
 800d216:	b9eb      	cbnz	r3, 800d254 <_vfiprintf_r+0x78>
 800d218:	4629      	mov	r1, r5
 800d21a:	4630      	mov	r0, r6
 800d21c:	f000 f96e 	bl	800d4fc <__swsetup_r>
 800d220:	b1c0      	cbz	r0, 800d254 <_vfiprintf_r+0x78>
 800d222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d224:	07dc      	lsls	r4, r3, #31
 800d226:	d50e      	bpl.n	800d246 <_vfiprintf_r+0x6a>
 800d228:	f04f 30ff 	mov.w	r0, #4294967295
 800d22c:	b01d      	add	sp, #116	; 0x74
 800d22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d232:	4b7b      	ldr	r3, [pc, #492]	; (800d420 <_vfiprintf_r+0x244>)
 800d234:	429d      	cmp	r5, r3
 800d236:	d101      	bne.n	800d23c <_vfiprintf_r+0x60>
 800d238:	68b5      	ldr	r5, [r6, #8]
 800d23a:	e7df      	b.n	800d1fc <_vfiprintf_r+0x20>
 800d23c:	4b79      	ldr	r3, [pc, #484]	; (800d424 <_vfiprintf_r+0x248>)
 800d23e:	429d      	cmp	r5, r3
 800d240:	bf08      	it	eq
 800d242:	68f5      	ldreq	r5, [r6, #12]
 800d244:	e7da      	b.n	800d1fc <_vfiprintf_r+0x20>
 800d246:	89ab      	ldrh	r3, [r5, #12]
 800d248:	0598      	lsls	r0, r3, #22
 800d24a:	d4ed      	bmi.n	800d228 <_vfiprintf_r+0x4c>
 800d24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24e:	f000 fb80 	bl	800d952 <__retarget_lock_release_recursive>
 800d252:	e7e9      	b.n	800d228 <_vfiprintf_r+0x4c>
 800d254:	2300      	movs	r3, #0
 800d256:	9309      	str	r3, [sp, #36]	; 0x24
 800d258:	2320      	movs	r3, #32
 800d25a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d25e:	2330      	movs	r3, #48	; 0x30
 800d260:	f04f 0901 	mov.w	r9, #1
 800d264:	f8cd 800c 	str.w	r8, [sp, #12]
 800d268:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d428 <_vfiprintf_r+0x24c>
 800d26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d270:	4623      	mov	r3, r4
 800d272:	469a      	mov	sl, r3
 800d274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d278:	b10a      	cbz	r2, 800d27e <_vfiprintf_r+0xa2>
 800d27a:	2a25      	cmp	r2, #37	; 0x25
 800d27c:	d1f9      	bne.n	800d272 <_vfiprintf_r+0x96>
 800d27e:	ebba 0b04 	subs.w	fp, sl, r4
 800d282:	d00b      	beq.n	800d29c <_vfiprintf_r+0xc0>
 800d284:	465b      	mov	r3, fp
 800d286:	4622      	mov	r2, r4
 800d288:	4629      	mov	r1, r5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7ff ff94 	bl	800d1b8 <__sfputs_r>
 800d290:	3001      	adds	r0, #1
 800d292:	f000 80aa 	beq.w	800d3ea <_vfiprintf_r+0x20e>
 800d296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d298:	445a      	add	r2, fp
 800d29a:	9209      	str	r2, [sp, #36]	; 0x24
 800d29c:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f000 80a2 	beq.w	800d3ea <_vfiprintf_r+0x20e>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2b0:	f10a 0a01 	add.w	sl, sl, #1
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	9307      	str	r3, [sp, #28]
 800d2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d2be:	4654      	mov	r4, sl
 800d2c0:	2205      	movs	r2, #5
 800d2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c6:	4858      	ldr	r0, [pc, #352]	; (800d428 <_vfiprintf_r+0x24c>)
 800d2c8:	f7ff f8d0 	bl	800c46c <memchr>
 800d2cc:	9a04      	ldr	r2, [sp, #16]
 800d2ce:	b9d8      	cbnz	r0, 800d308 <_vfiprintf_r+0x12c>
 800d2d0:	06d1      	lsls	r1, r2, #27
 800d2d2:	bf44      	itt	mi
 800d2d4:	2320      	movmi	r3, #32
 800d2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2da:	0713      	lsls	r3, r2, #28
 800d2dc:	bf44      	itt	mi
 800d2de:	232b      	movmi	r3, #43	; 0x2b
 800d2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ea:	d015      	beq.n	800d318 <_vfiprintf_r+0x13c>
 800d2ec:	4654      	mov	r4, sl
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	f04f 0c0a 	mov.w	ip, #10
 800d2f4:	9a07      	ldr	r2, [sp, #28]
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2fc:	3b30      	subs	r3, #48	; 0x30
 800d2fe:	2b09      	cmp	r3, #9
 800d300:	d94e      	bls.n	800d3a0 <_vfiprintf_r+0x1c4>
 800d302:	b1b0      	cbz	r0, 800d332 <_vfiprintf_r+0x156>
 800d304:	9207      	str	r2, [sp, #28]
 800d306:	e014      	b.n	800d332 <_vfiprintf_r+0x156>
 800d308:	eba0 0308 	sub.w	r3, r0, r8
 800d30c:	fa09 f303 	lsl.w	r3, r9, r3
 800d310:	4313      	orrs	r3, r2
 800d312:	46a2      	mov	sl, r4
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	e7d2      	b.n	800d2be <_vfiprintf_r+0xe2>
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	1d19      	adds	r1, r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	9103      	str	r1, [sp, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfbb      	ittet	lt
 800d324:	425b      	neglt	r3, r3
 800d326:	f042 0202 	orrlt.w	r2, r2, #2
 800d32a:	9307      	strge	r3, [sp, #28]
 800d32c:	9307      	strlt	r3, [sp, #28]
 800d32e:	bfb8      	it	lt
 800d330:	9204      	strlt	r2, [sp, #16]
 800d332:	7823      	ldrb	r3, [r4, #0]
 800d334:	2b2e      	cmp	r3, #46	; 0x2e
 800d336:	d10c      	bne.n	800d352 <_vfiprintf_r+0x176>
 800d338:	7863      	ldrb	r3, [r4, #1]
 800d33a:	2b2a      	cmp	r3, #42	; 0x2a
 800d33c:	d135      	bne.n	800d3aa <_vfiprintf_r+0x1ce>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	3402      	adds	r4, #2
 800d342:	1d1a      	adds	r2, r3, #4
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	9203      	str	r2, [sp, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfb8      	it	lt
 800d34c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d350:	9305      	str	r3, [sp, #20]
 800d352:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d42c <_vfiprintf_r+0x250>
 800d356:	2203      	movs	r2, #3
 800d358:	4650      	mov	r0, sl
 800d35a:	7821      	ldrb	r1, [r4, #0]
 800d35c:	f7ff f886 	bl	800c46c <memchr>
 800d360:	b140      	cbz	r0, 800d374 <_vfiprintf_r+0x198>
 800d362:	2340      	movs	r3, #64	; 0x40
 800d364:	eba0 000a 	sub.w	r0, r0, sl
 800d368:	fa03 f000 	lsl.w	r0, r3, r0
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	3401      	adds	r4, #1
 800d370:	4303      	orrs	r3, r0
 800d372:	9304      	str	r3, [sp, #16]
 800d374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d378:	2206      	movs	r2, #6
 800d37a:	482d      	ldr	r0, [pc, #180]	; (800d430 <_vfiprintf_r+0x254>)
 800d37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d380:	f7ff f874 	bl	800c46c <memchr>
 800d384:	2800      	cmp	r0, #0
 800d386:	d03f      	beq.n	800d408 <_vfiprintf_r+0x22c>
 800d388:	4b2a      	ldr	r3, [pc, #168]	; (800d434 <_vfiprintf_r+0x258>)
 800d38a:	bb1b      	cbnz	r3, 800d3d4 <_vfiprintf_r+0x1f8>
 800d38c:	9b03      	ldr	r3, [sp, #12]
 800d38e:	3307      	adds	r3, #7
 800d390:	f023 0307 	bic.w	r3, r3, #7
 800d394:	3308      	adds	r3, #8
 800d396:	9303      	str	r3, [sp, #12]
 800d398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d39a:	443b      	add	r3, r7
 800d39c:	9309      	str	r3, [sp, #36]	; 0x24
 800d39e:	e767      	b.n	800d270 <_vfiprintf_r+0x94>
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	2001      	movs	r0, #1
 800d3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3a8:	e7a5      	b.n	800d2f6 <_vfiprintf_r+0x11a>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f04f 0c0a 	mov.w	ip, #10
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	3401      	adds	r4, #1
 800d3b4:	9305      	str	r3, [sp, #20]
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3bc:	3a30      	subs	r2, #48	; 0x30
 800d3be:	2a09      	cmp	r2, #9
 800d3c0:	d903      	bls.n	800d3ca <_vfiprintf_r+0x1ee>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0c5      	beq.n	800d352 <_vfiprintf_r+0x176>
 800d3c6:	9105      	str	r1, [sp, #20]
 800d3c8:	e7c3      	b.n	800d352 <_vfiprintf_r+0x176>
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3d2:	e7f0      	b.n	800d3b6 <_vfiprintf_r+0x1da>
 800d3d4:	ab03      	add	r3, sp, #12
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	462a      	mov	r2, r5
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4b16      	ldr	r3, [pc, #88]	; (800d438 <_vfiprintf_r+0x25c>)
 800d3de:	a904      	add	r1, sp, #16
 800d3e0:	f7fd fddc 	bl	800af9c <_printf_float>
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	1c78      	adds	r0, r7, #1
 800d3e8:	d1d6      	bne.n	800d398 <_vfiprintf_r+0x1bc>
 800d3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ec:	07d9      	lsls	r1, r3, #31
 800d3ee:	d405      	bmi.n	800d3fc <_vfiprintf_r+0x220>
 800d3f0:	89ab      	ldrh	r3, [r5, #12]
 800d3f2:	059a      	lsls	r2, r3, #22
 800d3f4:	d402      	bmi.n	800d3fc <_vfiprintf_r+0x220>
 800d3f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3f8:	f000 faab 	bl	800d952 <__retarget_lock_release_recursive>
 800d3fc:	89ab      	ldrh	r3, [r5, #12]
 800d3fe:	065b      	lsls	r3, r3, #25
 800d400:	f53f af12 	bmi.w	800d228 <_vfiprintf_r+0x4c>
 800d404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d406:	e711      	b.n	800d22c <_vfiprintf_r+0x50>
 800d408:	ab03      	add	r3, sp, #12
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	462a      	mov	r2, r5
 800d40e:	4630      	mov	r0, r6
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <_vfiprintf_r+0x25c>)
 800d412:	a904      	add	r1, sp, #16
 800d414:	f7fe f85e 	bl	800b4d4 <_printf_i>
 800d418:	e7e4      	b.n	800d3e4 <_vfiprintf_r+0x208>
 800d41a:	bf00      	nop
 800d41c:	0800f33c 	.word	0x0800f33c
 800d420:	0800f35c 	.word	0x0800f35c
 800d424:	0800f31c 	.word	0x0800f31c
 800d428:	0800f1c4 	.word	0x0800f1c4
 800d42c:	0800f1ca 	.word	0x0800f1ca
 800d430:	0800f1ce 	.word	0x0800f1ce
 800d434:	0800af9d 	.word	0x0800af9d
 800d438:	0800d1b9 	.word	0x0800d1b9

0800d43c <__swbuf_r>:
 800d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43e:	460e      	mov	r6, r1
 800d440:	4614      	mov	r4, r2
 800d442:	4605      	mov	r5, r0
 800d444:	b118      	cbz	r0, 800d44e <__swbuf_r+0x12>
 800d446:	6983      	ldr	r3, [r0, #24]
 800d448:	b90b      	cbnz	r3, 800d44e <__swbuf_r+0x12>
 800d44a:	f000 f9e3 	bl	800d814 <__sinit>
 800d44e:	4b21      	ldr	r3, [pc, #132]	; (800d4d4 <__swbuf_r+0x98>)
 800d450:	429c      	cmp	r4, r3
 800d452:	d12b      	bne.n	800d4ac <__swbuf_r+0x70>
 800d454:	686c      	ldr	r4, [r5, #4]
 800d456:	69a3      	ldr	r3, [r4, #24]
 800d458:	60a3      	str	r3, [r4, #8]
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	071a      	lsls	r2, r3, #28
 800d45e:	d52f      	bpl.n	800d4c0 <__swbuf_r+0x84>
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	b36b      	cbz	r3, 800d4c0 <__swbuf_r+0x84>
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	6820      	ldr	r0, [r4, #0]
 800d468:	b2f6      	uxtb	r6, r6
 800d46a:	1ac0      	subs	r0, r0, r3
 800d46c:	6963      	ldr	r3, [r4, #20]
 800d46e:	4637      	mov	r7, r6
 800d470:	4283      	cmp	r3, r0
 800d472:	dc04      	bgt.n	800d47e <__swbuf_r+0x42>
 800d474:	4621      	mov	r1, r4
 800d476:	4628      	mov	r0, r5
 800d478:	f000 f938 	bl	800d6ec <_fflush_r>
 800d47c:	bb30      	cbnz	r0, 800d4cc <__swbuf_r+0x90>
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	3001      	adds	r0, #1
 800d482:	3b01      	subs	r3, #1
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	701e      	strb	r6, [r3, #0]
 800d48e:	6963      	ldr	r3, [r4, #20]
 800d490:	4283      	cmp	r3, r0
 800d492:	d004      	beq.n	800d49e <__swbuf_r+0x62>
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	07db      	lsls	r3, r3, #31
 800d498:	d506      	bpl.n	800d4a8 <__swbuf_r+0x6c>
 800d49a:	2e0a      	cmp	r6, #10
 800d49c:	d104      	bne.n	800d4a8 <__swbuf_r+0x6c>
 800d49e:	4621      	mov	r1, r4
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f000 f923 	bl	800d6ec <_fflush_r>
 800d4a6:	b988      	cbnz	r0, 800d4cc <__swbuf_r+0x90>
 800d4a8:	4638      	mov	r0, r7
 800d4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ac:	4b0a      	ldr	r3, [pc, #40]	; (800d4d8 <__swbuf_r+0x9c>)
 800d4ae:	429c      	cmp	r4, r3
 800d4b0:	d101      	bne.n	800d4b6 <__swbuf_r+0x7a>
 800d4b2:	68ac      	ldr	r4, [r5, #8]
 800d4b4:	e7cf      	b.n	800d456 <__swbuf_r+0x1a>
 800d4b6:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <__swbuf_r+0xa0>)
 800d4b8:	429c      	cmp	r4, r3
 800d4ba:	bf08      	it	eq
 800d4bc:	68ec      	ldreq	r4, [r5, #12]
 800d4be:	e7ca      	b.n	800d456 <__swbuf_r+0x1a>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f000 f81a 	bl	800d4fc <__swsetup_r>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d0cb      	beq.n	800d464 <__swbuf_r+0x28>
 800d4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d4d0:	e7ea      	b.n	800d4a8 <__swbuf_r+0x6c>
 800d4d2:	bf00      	nop
 800d4d4:	0800f33c 	.word	0x0800f33c
 800d4d8:	0800f35c 	.word	0x0800f35c
 800d4dc:	0800f31c 	.word	0x0800f31c

0800d4e0 <__ascii_wctomb>:
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4608      	mov	r0, r1
 800d4e4:	b141      	cbz	r1, 800d4f8 <__ascii_wctomb+0x18>
 800d4e6:	2aff      	cmp	r2, #255	; 0xff
 800d4e8:	d904      	bls.n	800d4f4 <__ascii_wctomb+0x14>
 800d4ea:	228a      	movs	r2, #138	; 0x8a
 800d4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	4770      	bx	lr
 800d4f4:	2001      	movs	r0, #1
 800d4f6:	700a      	strb	r2, [r1, #0]
 800d4f8:	4770      	bx	lr
	...

0800d4fc <__swsetup_r>:
 800d4fc:	4b32      	ldr	r3, [pc, #200]	; (800d5c8 <__swsetup_r+0xcc>)
 800d4fe:	b570      	push	{r4, r5, r6, lr}
 800d500:	681d      	ldr	r5, [r3, #0]
 800d502:	4606      	mov	r6, r0
 800d504:	460c      	mov	r4, r1
 800d506:	b125      	cbz	r5, 800d512 <__swsetup_r+0x16>
 800d508:	69ab      	ldr	r3, [r5, #24]
 800d50a:	b913      	cbnz	r3, 800d512 <__swsetup_r+0x16>
 800d50c:	4628      	mov	r0, r5
 800d50e:	f000 f981 	bl	800d814 <__sinit>
 800d512:	4b2e      	ldr	r3, [pc, #184]	; (800d5cc <__swsetup_r+0xd0>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d10f      	bne.n	800d538 <__swsetup_r+0x3c>
 800d518:	686c      	ldr	r4, [r5, #4]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d520:	0719      	lsls	r1, r3, #28
 800d522:	d42c      	bmi.n	800d57e <__swsetup_r+0x82>
 800d524:	06dd      	lsls	r5, r3, #27
 800d526:	d411      	bmi.n	800d54c <__swsetup_r+0x50>
 800d528:	2309      	movs	r3, #9
 800d52a:	6033      	str	r3, [r6, #0]
 800d52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d530:	f04f 30ff 	mov.w	r0, #4294967295
 800d534:	81a3      	strh	r3, [r4, #12]
 800d536:	e03e      	b.n	800d5b6 <__swsetup_r+0xba>
 800d538:	4b25      	ldr	r3, [pc, #148]	; (800d5d0 <__swsetup_r+0xd4>)
 800d53a:	429c      	cmp	r4, r3
 800d53c:	d101      	bne.n	800d542 <__swsetup_r+0x46>
 800d53e:	68ac      	ldr	r4, [r5, #8]
 800d540:	e7eb      	b.n	800d51a <__swsetup_r+0x1e>
 800d542:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <__swsetup_r+0xd8>)
 800d544:	429c      	cmp	r4, r3
 800d546:	bf08      	it	eq
 800d548:	68ec      	ldreq	r4, [r5, #12]
 800d54a:	e7e6      	b.n	800d51a <__swsetup_r+0x1e>
 800d54c:	0758      	lsls	r0, r3, #29
 800d54e:	d512      	bpl.n	800d576 <__swsetup_r+0x7a>
 800d550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d552:	b141      	cbz	r1, 800d566 <__swsetup_r+0x6a>
 800d554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d558:	4299      	cmp	r1, r3
 800d55a:	d002      	beq.n	800d562 <__swsetup_r+0x66>
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff fb37 	bl	800cbd0 <_free_r>
 800d562:	2300      	movs	r3, #0
 800d564:	6363      	str	r3, [r4, #52]	; 0x34
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	2300      	movs	r3, #0
 800d570:	6063      	str	r3, [r4, #4]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f043 0308 	orr.w	r3, r3, #8
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	b94b      	cbnz	r3, 800d596 <__swsetup_r+0x9a>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d58c:	d003      	beq.n	800d596 <__swsetup_r+0x9a>
 800d58e:	4621      	mov	r1, r4
 800d590:	4630      	mov	r0, r6
 800d592:	f000 fa05 	bl	800d9a0 <__smakebuf_r>
 800d596:	89a0      	ldrh	r0, [r4, #12]
 800d598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d59c:	f010 0301 	ands.w	r3, r0, #1
 800d5a0:	d00a      	beq.n	800d5b8 <__swsetup_r+0xbc>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	6963      	ldr	r3, [r4, #20]
 800d5a8:	425b      	negs	r3, r3
 800d5aa:	61a3      	str	r3, [r4, #24]
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	b943      	cbnz	r3, 800d5c2 <__swsetup_r+0xc6>
 800d5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5b4:	d1ba      	bne.n	800d52c <__swsetup_r+0x30>
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	0781      	lsls	r1, r0, #30
 800d5ba:	bf58      	it	pl
 800d5bc:	6963      	ldrpl	r3, [r4, #20]
 800d5be:	60a3      	str	r3, [r4, #8]
 800d5c0:	e7f4      	b.n	800d5ac <__swsetup_r+0xb0>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e7f7      	b.n	800d5b6 <__swsetup_r+0xba>
 800d5c6:	bf00      	nop
 800d5c8:	20000184 	.word	0x20000184
 800d5cc:	0800f33c 	.word	0x0800f33c
 800d5d0:	0800f35c 	.word	0x0800f35c
 800d5d4:	0800f31c 	.word	0x0800f31c

0800d5d8 <abort>:
 800d5d8:	2006      	movs	r0, #6
 800d5da:	b508      	push	{r3, lr}
 800d5dc:	f000 fa50 	bl	800da80 <raise>
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	f7f4 fc56 	bl	8001e92 <_exit>
	...

0800d5e8 <__sflush_r>:
 800d5e8:	898a      	ldrh	r2, [r1, #12]
 800d5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	0710      	lsls	r0, r2, #28
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	d457      	bmi.n	800d6a4 <__sflush_r+0xbc>
 800d5f4:	684b      	ldr	r3, [r1, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dc04      	bgt.n	800d604 <__sflush_r+0x1c>
 800d5fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	dc01      	bgt.n	800d604 <__sflush_r+0x1c>
 800d600:	2000      	movs	r0, #0
 800d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d606:	2e00      	cmp	r6, #0
 800d608:	d0fa      	beq.n	800d600 <__sflush_r+0x18>
 800d60a:	2300      	movs	r3, #0
 800d60c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d610:	682f      	ldr	r7, [r5, #0]
 800d612:	602b      	str	r3, [r5, #0]
 800d614:	d032      	beq.n	800d67c <__sflush_r+0x94>
 800d616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	075a      	lsls	r2, r3, #29
 800d61c:	d505      	bpl.n	800d62a <__sflush_r+0x42>
 800d61e:	6863      	ldr	r3, [r4, #4]
 800d620:	1ac0      	subs	r0, r0, r3
 800d622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d624:	b10b      	cbz	r3, 800d62a <__sflush_r+0x42>
 800d626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d628:	1ac0      	subs	r0, r0, r3
 800d62a:	2300      	movs	r3, #0
 800d62c:	4602      	mov	r2, r0
 800d62e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d630:	4628      	mov	r0, r5
 800d632:	6a21      	ldr	r1, [r4, #32]
 800d634:	47b0      	blx	r6
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	d106      	bne.n	800d64a <__sflush_r+0x62>
 800d63c:	6829      	ldr	r1, [r5, #0]
 800d63e:	291d      	cmp	r1, #29
 800d640:	d82c      	bhi.n	800d69c <__sflush_r+0xb4>
 800d642:	4a29      	ldr	r2, [pc, #164]	; (800d6e8 <__sflush_r+0x100>)
 800d644:	40ca      	lsrs	r2, r1
 800d646:	07d6      	lsls	r6, r2, #31
 800d648:	d528      	bpl.n	800d69c <__sflush_r+0xb4>
 800d64a:	2200      	movs	r2, #0
 800d64c:	6062      	str	r2, [r4, #4]
 800d64e:	6922      	ldr	r2, [r4, #16]
 800d650:	04d9      	lsls	r1, r3, #19
 800d652:	6022      	str	r2, [r4, #0]
 800d654:	d504      	bpl.n	800d660 <__sflush_r+0x78>
 800d656:	1c42      	adds	r2, r0, #1
 800d658:	d101      	bne.n	800d65e <__sflush_r+0x76>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	b903      	cbnz	r3, 800d660 <__sflush_r+0x78>
 800d65e:	6560      	str	r0, [r4, #84]	; 0x54
 800d660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d662:	602f      	str	r7, [r5, #0]
 800d664:	2900      	cmp	r1, #0
 800d666:	d0cb      	beq.n	800d600 <__sflush_r+0x18>
 800d668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d66c:	4299      	cmp	r1, r3
 800d66e:	d002      	beq.n	800d676 <__sflush_r+0x8e>
 800d670:	4628      	mov	r0, r5
 800d672:	f7ff faad 	bl	800cbd0 <_free_r>
 800d676:	2000      	movs	r0, #0
 800d678:	6360      	str	r0, [r4, #52]	; 0x34
 800d67a:	e7c2      	b.n	800d602 <__sflush_r+0x1a>
 800d67c:	6a21      	ldr	r1, [r4, #32]
 800d67e:	2301      	movs	r3, #1
 800d680:	4628      	mov	r0, r5
 800d682:	47b0      	blx	r6
 800d684:	1c41      	adds	r1, r0, #1
 800d686:	d1c7      	bne.n	800d618 <__sflush_r+0x30>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0c4      	beq.n	800d618 <__sflush_r+0x30>
 800d68e:	2b1d      	cmp	r3, #29
 800d690:	d001      	beq.n	800d696 <__sflush_r+0xae>
 800d692:	2b16      	cmp	r3, #22
 800d694:	d101      	bne.n	800d69a <__sflush_r+0xb2>
 800d696:	602f      	str	r7, [r5, #0]
 800d698:	e7b2      	b.n	800d600 <__sflush_r+0x18>
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	e7ae      	b.n	800d602 <__sflush_r+0x1a>
 800d6a4:	690f      	ldr	r7, [r1, #16]
 800d6a6:	2f00      	cmp	r7, #0
 800d6a8:	d0aa      	beq.n	800d600 <__sflush_r+0x18>
 800d6aa:	0793      	lsls	r3, r2, #30
 800d6ac:	bf18      	it	ne
 800d6ae:	2300      	movne	r3, #0
 800d6b0:	680e      	ldr	r6, [r1, #0]
 800d6b2:	bf08      	it	eq
 800d6b4:	694b      	ldreq	r3, [r1, #20]
 800d6b6:	1bf6      	subs	r6, r6, r7
 800d6b8:	600f      	str	r7, [r1, #0]
 800d6ba:	608b      	str	r3, [r1, #8]
 800d6bc:	2e00      	cmp	r6, #0
 800d6be:	dd9f      	ble.n	800d600 <__sflush_r+0x18>
 800d6c0:	4633      	mov	r3, r6
 800d6c2:	463a      	mov	r2, r7
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	6a21      	ldr	r1, [r4, #32]
 800d6c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d6cc:	47e0      	blx	ip
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	dc06      	bgt.n	800d6e0 <__sflush_r+0xf8>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6dc:	81a3      	strh	r3, [r4, #12]
 800d6de:	e790      	b.n	800d602 <__sflush_r+0x1a>
 800d6e0:	4407      	add	r7, r0
 800d6e2:	1a36      	subs	r6, r6, r0
 800d6e4:	e7ea      	b.n	800d6bc <__sflush_r+0xd4>
 800d6e6:	bf00      	nop
 800d6e8:	20400001 	.word	0x20400001

0800d6ec <_fflush_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	690b      	ldr	r3, [r1, #16]
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b913      	cbnz	r3, 800d6fc <_fflush_r+0x10>
 800d6f6:	2500      	movs	r5, #0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	b118      	cbz	r0, 800d706 <_fflush_r+0x1a>
 800d6fe:	6983      	ldr	r3, [r0, #24]
 800d700:	b90b      	cbnz	r3, 800d706 <_fflush_r+0x1a>
 800d702:	f000 f887 	bl	800d814 <__sinit>
 800d706:	4b14      	ldr	r3, [pc, #80]	; (800d758 <_fflush_r+0x6c>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d11b      	bne.n	800d744 <_fflush_r+0x58>
 800d70c:	686c      	ldr	r4, [r5, #4]
 800d70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0ef      	beq.n	800d6f6 <_fflush_r+0xa>
 800d716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d718:	07d0      	lsls	r0, r2, #31
 800d71a:	d404      	bmi.n	800d726 <_fflush_r+0x3a>
 800d71c:	0599      	lsls	r1, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_fflush_r+0x3a>
 800d720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d722:	f000 f915 	bl	800d950 <__retarget_lock_acquire_recursive>
 800d726:	4628      	mov	r0, r5
 800d728:	4621      	mov	r1, r4
 800d72a:	f7ff ff5d 	bl	800d5e8 <__sflush_r>
 800d72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d730:	4605      	mov	r5, r0
 800d732:	07da      	lsls	r2, r3, #31
 800d734:	d4e0      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	d4dd      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73e:	f000 f908 	bl	800d952 <__retarget_lock_release_recursive>
 800d742:	e7d9      	b.n	800d6f8 <_fflush_r+0xc>
 800d744:	4b05      	ldr	r3, [pc, #20]	; (800d75c <_fflush_r+0x70>)
 800d746:	429c      	cmp	r4, r3
 800d748:	d101      	bne.n	800d74e <_fflush_r+0x62>
 800d74a:	68ac      	ldr	r4, [r5, #8]
 800d74c:	e7df      	b.n	800d70e <_fflush_r+0x22>
 800d74e:	4b04      	ldr	r3, [pc, #16]	; (800d760 <_fflush_r+0x74>)
 800d750:	429c      	cmp	r4, r3
 800d752:	bf08      	it	eq
 800d754:	68ec      	ldreq	r4, [r5, #12]
 800d756:	e7da      	b.n	800d70e <_fflush_r+0x22>
 800d758:	0800f33c 	.word	0x0800f33c
 800d75c:	0800f35c 	.word	0x0800f35c
 800d760:	0800f31c 	.word	0x0800f31c

0800d764 <std>:
 800d764:	2300      	movs	r3, #0
 800d766:	b510      	push	{r4, lr}
 800d768:	4604      	mov	r4, r0
 800d76a:	e9c0 3300 	strd	r3, r3, [r0]
 800d76e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d772:	6083      	str	r3, [r0, #8]
 800d774:	8181      	strh	r1, [r0, #12]
 800d776:	6643      	str	r3, [r0, #100]	; 0x64
 800d778:	81c2      	strh	r2, [r0, #14]
 800d77a:	6183      	str	r3, [r0, #24]
 800d77c:	4619      	mov	r1, r3
 800d77e:	2208      	movs	r2, #8
 800d780:	305c      	adds	r0, #92	; 0x5c
 800d782:	f7fd fb65 	bl	800ae50 <memset>
 800d786:	4b05      	ldr	r3, [pc, #20]	; (800d79c <std+0x38>)
 800d788:	6224      	str	r4, [r4, #32]
 800d78a:	6263      	str	r3, [r4, #36]	; 0x24
 800d78c:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <std+0x3c>)
 800d78e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d790:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <std+0x40>)
 800d792:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d794:	4b04      	ldr	r3, [pc, #16]	; (800d7a8 <std+0x44>)
 800d796:	6323      	str	r3, [r4, #48]	; 0x30
 800d798:	bd10      	pop	{r4, pc}
 800d79a:	bf00      	nop
 800d79c:	0800dab9 	.word	0x0800dab9
 800d7a0:	0800dadb 	.word	0x0800dadb
 800d7a4:	0800db13 	.word	0x0800db13
 800d7a8:	0800db37 	.word	0x0800db37

0800d7ac <_cleanup_r>:
 800d7ac:	4901      	ldr	r1, [pc, #4]	; (800d7b4 <_cleanup_r+0x8>)
 800d7ae:	f000 b8af 	b.w	800d910 <_fwalk_reent>
 800d7b2:	bf00      	nop
 800d7b4:	0800d6ed 	.word	0x0800d6ed

0800d7b8 <__sfmoreglue>:
 800d7b8:	2268      	movs	r2, #104	; 0x68
 800d7ba:	b570      	push	{r4, r5, r6, lr}
 800d7bc:	1e4d      	subs	r5, r1, #1
 800d7be:	4355      	muls	r5, r2
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7c6:	f7ff fa6b 	bl	800cca0 <_malloc_r>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	b140      	cbz	r0, 800d7e0 <__sfmoreglue+0x28>
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7d4:	300c      	adds	r0, #12
 800d7d6:	60a0      	str	r0, [r4, #8]
 800d7d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7dc:	f7fd fb38 	bl	800ae50 <memset>
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}

0800d7e4 <__sfp_lock_acquire>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	; (800d7ec <__sfp_lock_acquire+0x8>)
 800d7e6:	f000 b8b3 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	20001669 	.word	0x20001669

0800d7f0 <__sfp_lock_release>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	; (800d7f8 <__sfp_lock_release+0x8>)
 800d7f2:	f000 b8ae 	b.w	800d952 <__retarget_lock_release_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	20001669 	.word	0x20001669

0800d7fc <__sinit_lock_acquire>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	; (800d804 <__sinit_lock_acquire+0x8>)
 800d7fe:	f000 b8a7 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800d802:	bf00      	nop
 800d804:	2000166a 	.word	0x2000166a

0800d808 <__sinit_lock_release>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__sinit_lock_release+0x8>)
 800d80a:	f000 b8a2 	b.w	800d952 <__retarget_lock_release_recursive>
 800d80e:	bf00      	nop
 800d810:	2000166a 	.word	0x2000166a

0800d814 <__sinit>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	f7ff fff0 	bl	800d7fc <__sinit_lock_acquire>
 800d81c:	69a3      	ldr	r3, [r4, #24]
 800d81e:	b11b      	cbz	r3, 800d828 <__sinit+0x14>
 800d820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d824:	f7ff bff0 	b.w	800d808 <__sinit_lock_release>
 800d828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d82c:	6523      	str	r3, [r4, #80]	; 0x50
 800d82e:	4b13      	ldr	r3, [pc, #76]	; (800d87c <__sinit+0x68>)
 800d830:	4a13      	ldr	r2, [pc, #76]	; (800d880 <__sinit+0x6c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	62a2      	str	r2, [r4, #40]	; 0x28
 800d836:	42a3      	cmp	r3, r4
 800d838:	bf08      	it	eq
 800d83a:	2301      	moveq	r3, #1
 800d83c:	4620      	mov	r0, r4
 800d83e:	bf08      	it	eq
 800d840:	61a3      	streq	r3, [r4, #24]
 800d842:	f000 f81f 	bl	800d884 <__sfp>
 800d846:	6060      	str	r0, [r4, #4]
 800d848:	4620      	mov	r0, r4
 800d84a:	f000 f81b 	bl	800d884 <__sfp>
 800d84e:	60a0      	str	r0, [r4, #8]
 800d850:	4620      	mov	r0, r4
 800d852:	f000 f817 	bl	800d884 <__sfp>
 800d856:	2200      	movs	r2, #0
 800d858:	2104      	movs	r1, #4
 800d85a:	60e0      	str	r0, [r4, #12]
 800d85c:	6860      	ldr	r0, [r4, #4]
 800d85e:	f7ff ff81 	bl	800d764 <std>
 800d862:	2201      	movs	r2, #1
 800d864:	2109      	movs	r1, #9
 800d866:	68a0      	ldr	r0, [r4, #8]
 800d868:	f7ff ff7c 	bl	800d764 <std>
 800d86c:	2202      	movs	r2, #2
 800d86e:	2112      	movs	r1, #18
 800d870:	68e0      	ldr	r0, [r4, #12]
 800d872:	f7ff ff77 	bl	800d764 <std>
 800d876:	2301      	movs	r3, #1
 800d878:	61a3      	str	r3, [r4, #24]
 800d87a:	e7d1      	b.n	800d820 <__sinit+0xc>
 800d87c:	0800efa4 	.word	0x0800efa4
 800d880:	0800d7ad 	.word	0x0800d7ad

0800d884 <__sfp>:
 800d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d886:	4607      	mov	r7, r0
 800d888:	f7ff ffac 	bl	800d7e4 <__sfp_lock_acquire>
 800d88c:	4b1e      	ldr	r3, [pc, #120]	; (800d908 <__sfp+0x84>)
 800d88e:	681e      	ldr	r6, [r3, #0]
 800d890:	69b3      	ldr	r3, [r6, #24]
 800d892:	b913      	cbnz	r3, 800d89a <__sfp+0x16>
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff ffbd 	bl	800d814 <__sinit>
 800d89a:	3648      	adds	r6, #72	; 0x48
 800d89c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	d503      	bpl.n	800d8ac <__sfp+0x28>
 800d8a4:	6833      	ldr	r3, [r6, #0]
 800d8a6:	b30b      	cbz	r3, 800d8ec <__sfp+0x68>
 800d8a8:	6836      	ldr	r6, [r6, #0]
 800d8aa:	e7f7      	b.n	800d89c <__sfp+0x18>
 800d8ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8b0:	b9d5      	cbnz	r5, 800d8e8 <__sfp+0x64>
 800d8b2:	4b16      	ldr	r3, [pc, #88]	; (800d90c <__sfp+0x88>)
 800d8b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8b8:	60e3      	str	r3, [r4, #12]
 800d8ba:	6665      	str	r5, [r4, #100]	; 0x64
 800d8bc:	f000 f847 	bl	800d94e <__retarget_lock_init_recursive>
 800d8c0:	f7ff ff96 	bl	800d7f0 <__sfp_lock_release>
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8d0:	6025      	str	r5, [r4, #0]
 800d8d2:	61a5      	str	r5, [r4, #24]
 800d8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8d8:	f7fd faba 	bl	800ae50 <memset>
 800d8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e8:	3468      	adds	r4, #104	; 0x68
 800d8ea:	e7d9      	b.n	800d8a0 <__sfp+0x1c>
 800d8ec:	2104      	movs	r1, #4
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	f7ff ff62 	bl	800d7b8 <__sfmoreglue>
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	6030      	str	r0, [r6, #0]
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1d5      	bne.n	800d8a8 <__sfp+0x24>
 800d8fc:	f7ff ff78 	bl	800d7f0 <__sfp_lock_release>
 800d900:	230c      	movs	r3, #12
 800d902:	603b      	str	r3, [r7, #0]
 800d904:	e7ee      	b.n	800d8e4 <__sfp+0x60>
 800d906:	bf00      	nop
 800d908:	0800efa4 	.word	0x0800efa4
 800d90c:	ffff0001 	.word	0xffff0001

0800d910 <_fwalk_reent>:
 800d910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d914:	4606      	mov	r6, r0
 800d916:	4688      	mov	r8, r1
 800d918:	2700      	movs	r7, #0
 800d91a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d91e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d922:	f1b9 0901 	subs.w	r9, r9, #1
 800d926:	d505      	bpl.n	800d934 <_fwalk_reent+0x24>
 800d928:	6824      	ldr	r4, [r4, #0]
 800d92a:	2c00      	cmp	r4, #0
 800d92c:	d1f7      	bne.n	800d91e <_fwalk_reent+0xe>
 800d92e:	4638      	mov	r0, r7
 800d930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d934:	89ab      	ldrh	r3, [r5, #12]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d907      	bls.n	800d94a <_fwalk_reent+0x3a>
 800d93a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d93e:	3301      	adds	r3, #1
 800d940:	d003      	beq.n	800d94a <_fwalk_reent+0x3a>
 800d942:	4629      	mov	r1, r5
 800d944:	4630      	mov	r0, r6
 800d946:	47c0      	blx	r8
 800d948:	4307      	orrs	r7, r0
 800d94a:	3568      	adds	r5, #104	; 0x68
 800d94c:	e7e9      	b.n	800d922 <_fwalk_reent+0x12>

0800d94e <__retarget_lock_init_recursive>:
 800d94e:	4770      	bx	lr

0800d950 <__retarget_lock_acquire_recursive>:
 800d950:	4770      	bx	lr

0800d952 <__retarget_lock_release_recursive>:
 800d952:	4770      	bx	lr

0800d954 <__swhatbuf_r>:
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	460e      	mov	r6, r1
 800d958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d95c:	4614      	mov	r4, r2
 800d95e:	2900      	cmp	r1, #0
 800d960:	461d      	mov	r5, r3
 800d962:	b096      	sub	sp, #88	; 0x58
 800d964:	da08      	bge.n	800d978 <__swhatbuf_r+0x24>
 800d966:	2200      	movs	r2, #0
 800d968:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d96c:	602a      	str	r2, [r5, #0]
 800d96e:	061a      	lsls	r2, r3, #24
 800d970:	d410      	bmi.n	800d994 <__swhatbuf_r+0x40>
 800d972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d976:	e00e      	b.n	800d996 <__swhatbuf_r+0x42>
 800d978:	466a      	mov	r2, sp
 800d97a:	f000 f903 	bl	800db84 <_fstat_r>
 800d97e:	2800      	cmp	r0, #0
 800d980:	dbf1      	blt.n	800d966 <__swhatbuf_r+0x12>
 800d982:	9a01      	ldr	r2, [sp, #4]
 800d984:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d988:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d98c:	425a      	negs	r2, r3
 800d98e:	415a      	adcs	r2, r3
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	e7ee      	b.n	800d972 <__swhatbuf_r+0x1e>
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	2000      	movs	r0, #0
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	b016      	add	sp, #88	; 0x58
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9a0 <__smakebuf_r>:
 800d9a0:	898b      	ldrh	r3, [r1, #12]
 800d9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9a4:	079d      	lsls	r5, r3, #30
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	d507      	bpl.n	800d9bc <__smakebuf_r+0x1c>
 800d9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	6123      	str	r3, [r4, #16]
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	6163      	str	r3, [r4, #20]
 800d9b8:	b002      	add	sp, #8
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	466a      	mov	r2, sp
 800d9be:	ab01      	add	r3, sp, #4
 800d9c0:	f7ff ffc8 	bl	800d954 <__swhatbuf_r>
 800d9c4:	9900      	ldr	r1, [sp, #0]
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7ff f969 	bl	800cca0 <_malloc_r>
 800d9ce:	b948      	cbnz	r0, 800d9e4 <__smakebuf_r+0x44>
 800d9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d4:	059a      	lsls	r2, r3, #22
 800d9d6:	d4ef      	bmi.n	800d9b8 <__smakebuf_r+0x18>
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	f043 0302 	orr.w	r3, r3, #2
 800d9e0:	81a3      	strh	r3, [r4, #12]
 800d9e2:	e7e3      	b.n	800d9ac <__smakebuf_r+0xc>
 800d9e4:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <__smakebuf_r+0x7c>)
 800d9e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	6020      	str	r0, [r4, #0]
 800d9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	9b00      	ldr	r3, [sp, #0]
 800d9f4:	6120      	str	r0, [r4, #16]
 800d9f6:	6163      	str	r3, [r4, #20]
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	b15b      	cbz	r3, 800da14 <__smakebuf_r+0x74>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da02:	f000 f8d1 	bl	800dba8 <_isatty_r>
 800da06:	b128      	cbz	r0, 800da14 <__smakebuf_r+0x74>
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	f023 0303 	bic.w	r3, r3, #3
 800da0e:	f043 0301 	orr.w	r3, r3, #1
 800da12:	81a3      	strh	r3, [r4, #12]
 800da14:	89a0      	ldrh	r0, [r4, #12]
 800da16:	4305      	orrs	r5, r0
 800da18:	81a5      	strh	r5, [r4, #12]
 800da1a:	e7cd      	b.n	800d9b8 <__smakebuf_r+0x18>
 800da1c:	0800d7ad 	.word	0x0800d7ad

0800da20 <_malloc_usable_size_r>:
 800da20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da24:	1f18      	subs	r0, r3, #4
 800da26:	2b00      	cmp	r3, #0
 800da28:	bfbc      	itt	lt
 800da2a:	580b      	ldrlt	r3, [r1, r0]
 800da2c:	18c0      	addlt	r0, r0, r3
 800da2e:	4770      	bx	lr

0800da30 <_raise_r>:
 800da30:	291f      	cmp	r1, #31
 800da32:	b538      	push	{r3, r4, r5, lr}
 800da34:	4604      	mov	r4, r0
 800da36:	460d      	mov	r5, r1
 800da38:	d904      	bls.n	800da44 <_raise_r+0x14>
 800da3a:	2316      	movs	r3, #22
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	f04f 30ff 	mov.w	r0, #4294967295
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da46:	b112      	cbz	r2, 800da4e <_raise_r+0x1e>
 800da48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da4c:	b94b      	cbnz	r3, 800da62 <_raise_r+0x32>
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 f830 	bl	800dab4 <_getpid_r>
 800da54:	462a      	mov	r2, r5
 800da56:	4601      	mov	r1, r0
 800da58:	4620      	mov	r0, r4
 800da5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da5e:	f000 b817 	b.w	800da90 <_kill_r>
 800da62:	2b01      	cmp	r3, #1
 800da64:	d00a      	beq.n	800da7c <_raise_r+0x4c>
 800da66:	1c59      	adds	r1, r3, #1
 800da68:	d103      	bne.n	800da72 <_raise_r+0x42>
 800da6a:	2316      	movs	r3, #22
 800da6c:	6003      	str	r3, [r0, #0]
 800da6e:	2001      	movs	r0, #1
 800da70:	e7e7      	b.n	800da42 <_raise_r+0x12>
 800da72:	2400      	movs	r4, #0
 800da74:	4628      	mov	r0, r5
 800da76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da7a:	4798      	blx	r3
 800da7c:	2000      	movs	r0, #0
 800da7e:	e7e0      	b.n	800da42 <_raise_r+0x12>

0800da80 <raise>:
 800da80:	4b02      	ldr	r3, [pc, #8]	; (800da8c <raise+0xc>)
 800da82:	4601      	mov	r1, r0
 800da84:	6818      	ldr	r0, [r3, #0]
 800da86:	f7ff bfd3 	b.w	800da30 <_raise_r>
 800da8a:	bf00      	nop
 800da8c:	20000184 	.word	0x20000184

0800da90 <_kill_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	2300      	movs	r3, #0
 800da94:	4d06      	ldr	r5, [pc, #24]	; (800dab0 <_kill_r+0x20>)
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	4611      	mov	r1, r2
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	f7f4 f9e8 	bl	8001e72 <_kill>
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	d102      	bne.n	800daac <_kill_r+0x1c>
 800daa6:	682b      	ldr	r3, [r5, #0]
 800daa8:	b103      	cbz	r3, 800daac <_kill_r+0x1c>
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	bd38      	pop	{r3, r4, r5, pc}
 800daae:	bf00      	nop
 800dab0:	20001664 	.word	0x20001664

0800dab4 <_getpid_r>:
 800dab4:	f7f4 b9d6 	b.w	8001e64 <_getpid>

0800dab8 <__sread>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	460c      	mov	r4, r1
 800dabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac0:	f000 f894 	bl	800dbec <_read_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	bfab      	itete	ge
 800dac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800daca:	89a3      	ldrhlt	r3, [r4, #12]
 800dacc:	181b      	addge	r3, r3, r0
 800dace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dad2:	bfac      	ite	ge
 800dad4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dad6:	81a3      	strhlt	r3, [r4, #12]
 800dad8:	bd10      	pop	{r4, pc}

0800dada <__swrite>:
 800dada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dade:	461f      	mov	r7, r3
 800dae0:	898b      	ldrh	r3, [r1, #12]
 800dae2:	4605      	mov	r5, r0
 800dae4:	05db      	lsls	r3, r3, #23
 800dae6:	460c      	mov	r4, r1
 800dae8:	4616      	mov	r6, r2
 800daea:	d505      	bpl.n	800daf8 <__swrite+0x1e>
 800daec:	2302      	movs	r3, #2
 800daee:	2200      	movs	r2, #0
 800daf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf4:	f000 f868 	bl	800dbc8 <_lseek_r>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	4632      	mov	r2, r6
 800dafc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db00:	81a3      	strh	r3, [r4, #12]
 800db02:	4628      	mov	r0, r5
 800db04:	463b      	mov	r3, r7
 800db06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db0e:	f000 b817 	b.w	800db40 <_write_r>

0800db12 <__sseek>:
 800db12:	b510      	push	{r4, lr}
 800db14:	460c      	mov	r4, r1
 800db16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1a:	f000 f855 	bl	800dbc8 <_lseek_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	89a3      	ldrh	r3, [r4, #12]
 800db22:	bf15      	itete	ne
 800db24:	6560      	strne	r0, [r4, #84]	; 0x54
 800db26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db2e:	81a3      	strheq	r3, [r4, #12]
 800db30:	bf18      	it	ne
 800db32:	81a3      	strhne	r3, [r4, #12]
 800db34:	bd10      	pop	{r4, pc}

0800db36 <__sclose>:
 800db36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3a:	f000 b813 	b.w	800db64 <_close_r>
	...

0800db40 <_write_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	2200      	movs	r2, #0
 800db4a:	4d05      	ldr	r5, [pc, #20]	; (800db60 <_write_r+0x20>)
 800db4c:	602a      	str	r2, [r5, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	f7f4 f9c6 	bl	8001ee0 <_write>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_write_r+0x1e>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_write_r+0x1e>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	20001664 	.word	0x20001664

0800db64 <_close_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	2300      	movs	r3, #0
 800db68:	4d05      	ldr	r5, [pc, #20]	; (800db80 <_close_r+0x1c>)
 800db6a:	4604      	mov	r4, r0
 800db6c:	4608      	mov	r0, r1
 800db6e:	602b      	str	r3, [r5, #0]
 800db70:	f7f4 f9d2 	bl	8001f18 <_close>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d102      	bne.n	800db7e <_close_r+0x1a>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	b103      	cbz	r3, 800db7e <_close_r+0x1a>
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	bd38      	pop	{r3, r4, r5, pc}
 800db80:	20001664 	.word	0x20001664

0800db84 <_fstat_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	2300      	movs	r3, #0
 800db88:	4d06      	ldr	r5, [pc, #24]	; (800dba4 <_fstat_r+0x20>)
 800db8a:	4604      	mov	r4, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	4611      	mov	r1, r2
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	f7f4 f9cc 	bl	8001f2e <_fstat>
 800db96:	1c43      	adds	r3, r0, #1
 800db98:	d102      	bne.n	800dba0 <_fstat_r+0x1c>
 800db9a:	682b      	ldr	r3, [r5, #0]
 800db9c:	b103      	cbz	r3, 800dba0 <_fstat_r+0x1c>
 800db9e:	6023      	str	r3, [r4, #0]
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	bf00      	nop
 800dba4:	20001664 	.word	0x20001664

0800dba8 <_isatty_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	2300      	movs	r3, #0
 800dbac:	4d05      	ldr	r5, [pc, #20]	; (800dbc4 <_isatty_r+0x1c>)
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	602b      	str	r3, [r5, #0]
 800dbb4:	f7f4 f9ca 	bl	8001f4c <_isatty>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	d102      	bne.n	800dbc2 <_isatty_r+0x1a>
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	b103      	cbz	r3, 800dbc2 <_isatty_r+0x1a>
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	20001664 	.word	0x20001664

0800dbc8 <_lseek_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	4604      	mov	r4, r0
 800dbcc:	4608      	mov	r0, r1
 800dbce:	4611      	mov	r1, r2
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4d05      	ldr	r5, [pc, #20]	; (800dbe8 <_lseek_r+0x20>)
 800dbd4:	602a      	str	r2, [r5, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f7f4 f9c2 	bl	8001f60 <_lseek>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_lseek_r+0x1e>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_lseek_r+0x1e>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	20001664 	.word	0x20001664

0800dbec <_read_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	4604      	mov	r4, r0
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4d05      	ldr	r5, [pc, #20]	; (800dc0c <_read_r+0x20>)
 800dbf8:	602a      	str	r2, [r5, #0]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	f7f4 f953 	bl	8001ea6 <_read>
 800dc00:	1c43      	adds	r3, r0, #1
 800dc02:	d102      	bne.n	800dc0a <_read_r+0x1e>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	b103      	cbz	r3, 800dc0a <_read_r+0x1e>
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	bd38      	pop	{r3, r4, r5, pc}
 800dc0c:	20001664 	.word	0x20001664

0800dc10 <atan2>:
 800dc10:	f000 b88e 	b.w	800dd30 <__ieee754_atan2>

0800dc14 <pow>:
 800dc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc18:	4614      	mov	r4, r2
 800dc1a:	461d      	mov	r5, r3
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	4689      	mov	r9, r1
 800dc20:	f000 f95a 	bl	800ded8 <__ieee754_pow>
 800dc24:	4622      	mov	r2, r4
 800dc26:	4606      	mov	r6, r0
 800dc28:	460f      	mov	r7, r1
 800dc2a:	462b      	mov	r3, r5
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f7f2 feec 	bl	8000a0c <__aeabi_dcmpun>
 800dc34:	bbc8      	cbnz	r0, 800dcaa <pow+0x96>
 800dc36:	2200      	movs	r2, #0
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	f7f2 feb3 	bl	80009a8 <__aeabi_dcmpeq>
 800dc42:	b1b8      	cbz	r0, 800dc74 <pow+0x60>
 800dc44:	2200      	movs	r2, #0
 800dc46:	2300      	movs	r3, #0
 800dc48:	4620      	mov	r0, r4
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	f7f2 feac 	bl	80009a8 <__aeabi_dcmpeq>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d141      	bne.n	800dcd8 <pow+0xc4>
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	f001 f8bf 	bl	800edda <finite>
 800dc5c:	b328      	cbz	r0, 800dcaa <pow+0x96>
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2300      	movs	r3, #0
 800dc62:	4620      	mov	r0, r4
 800dc64:	4629      	mov	r1, r5
 800dc66:	f7f2 fea9 	bl	80009bc <__aeabi_dcmplt>
 800dc6a:	b1f0      	cbz	r0, 800dcaa <pow+0x96>
 800dc6c:	f7fd f8c6 	bl	800adfc <__errno>
 800dc70:	2322      	movs	r3, #34	; 0x22
 800dc72:	e019      	b.n	800dca8 <pow+0x94>
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f001 f8af 	bl	800edda <finite>
 800dc7c:	b9c8      	cbnz	r0, 800dcb2 <pow+0x9e>
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	f001 f8aa 	bl	800edda <finite>
 800dc86:	b1a0      	cbz	r0, 800dcb2 <pow+0x9e>
 800dc88:	4620      	mov	r0, r4
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	f001 f8a5 	bl	800edda <finite>
 800dc90:	b178      	cbz	r0, 800dcb2 <pow+0x9e>
 800dc92:	4632      	mov	r2, r6
 800dc94:	463b      	mov	r3, r7
 800dc96:	4630      	mov	r0, r6
 800dc98:	4639      	mov	r1, r7
 800dc9a:	f7f2 feb7 	bl	8000a0c <__aeabi_dcmpun>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d0e4      	beq.n	800dc6c <pow+0x58>
 800dca2:	f7fd f8ab 	bl	800adfc <__errno>
 800dca6:	2321      	movs	r3, #33	; 0x21
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 fe75 	bl	80009a8 <__aeabi_dcmpeq>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d0f3      	beq.n	800dcaa <pow+0x96>
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	f001 f888 	bl	800edda <finite>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0ed      	beq.n	800dcaa <pow+0x96>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f001 f882 	bl	800edda <finite>
 800dcd6:	e7c8      	b.n	800dc6a <pow+0x56>
 800dcd8:	2600      	movs	r6, #0
 800dcda:	4f01      	ldr	r7, [pc, #4]	; (800dce0 <pow+0xcc>)
 800dcdc:	e7e5      	b.n	800dcaa <pow+0x96>
 800dcde:	bf00      	nop
 800dce0:	3ff00000 	.word	0x3ff00000

0800dce4 <sqrt>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	4606      	mov	r6, r0
 800dce8:	460f      	mov	r7, r1
 800dcea:	f000 fe0b 	bl	800e904 <__ieee754_sqrt>
 800dcee:	4632      	mov	r2, r6
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	460d      	mov	r5, r1
 800dcf4:	463b      	mov	r3, r7
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	4639      	mov	r1, r7
 800dcfa:	f7f2 fe87 	bl	8000a0c <__aeabi_dcmpun>
 800dcfe:	b990      	cbnz	r0, 800dd26 <sqrt+0x42>
 800dd00:	2200      	movs	r2, #0
 800dd02:	2300      	movs	r3, #0
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	f7f2 fe58 	bl	80009bc <__aeabi_dcmplt>
 800dd0c:	b158      	cbz	r0, 800dd26 <sqrt+0x42>
 800dd0e:	f7fd f875 	bl	800adfc <__errno>
 800dd12:	2321      	movs	r3, #33	; 0x21
 800dd14:	2200      	movs	r2, #0
 800dd16:	6003      	str	r3, [r0, #0]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4610      	mov	r0, r2
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	f7f2 fd05 	bl	800072c <__aeabi_ddiv>
 800dd22:	4604      	mov	r4, r0
 800dd24:	460d      	mov	r5, r1
 800dd26:	4620      	mov	r0, r4
 800dd28:	4629      	mov	r1, r5
 800dd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd2c:	0000      	movs	r0, r0
	...

0800dd30 <__ieee754_atan2>:
 800dd30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	4692      	mov	sl, r2
 800dd36:	4699      	mov	r9, r3
 800dd38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd3c:	461f      	mov	r7, r3
 800dd3e:	f1ca 0300 	rsb	r3, sl, #0
 800dd42:	f8df e184 	ldr.w	lr, [pc, #388]	; 800dec8 <__ieee754_atan2+0x198>
 800dd46:	ea43 030a 	orr.w	r3, r3, sl
 800dd4a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dd4e:	4573      	cmp	r3, lr
 800dd50:	4604      	mov	r4, r0
 800dd52:	460d      	mov	r5, r1
 800dd54:	d808      	bhi.n	800dd68 <__ieee754_atan2+0x38>
 800dd56:	4246      	negs	r6, r0
 800dd58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd5c:	4306      	orrs	r6, r0
 800dd5e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800dd62:	4576      	cmp	r6, lr
 800dd64:	468c      	mov	ip, r1
 800dd66:	d908      	bls.n	800dd7a <__ieee754_atan2+0x4a>
 800dd68:	4652      	mov	r2, sl
 800dd6a:	464b      	mov	r3, r9
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	f7f2 f9fc 	bl	800016c <__adddf3>
 800dd74:	4604      	mov	r4, r0
 800dd76:	460d      	mov	r5, r1
 800dd78:	e019      	b.n	800ddae <__ieee754_atan2+0x7e>
 800dd7a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800dd7e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800dd82:	ea56 060a 	orrs.w	r6, r6, sl
 800dd86:	d103      	bne.n	800dd90 <__ieee754_atan2+0x60>
 800dd88:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	f000 be98 	b.w	800eac0 <atan>
 800dd90:	17be      	asrs	r6, r7, #30
 800dd92:	f006 0602 	and.w	r6, r6, #2
 800dd96:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800dd9a:	ea53 0100 	orrs.w	r1, r3, r0
 800dd9e:	d10a      	bne.n	800ddb6 <__ieee754_atan2+0x86>
 800dda0:	2e02      	cmp	r6, #2
 800dda2:	d067      	beq.n	800de74 <__ieee754_atan2+0x144>
 800dda4:	2e03      	cmp	r6, #3
 800dda6:	d102      	bne.n	800ddae <__ieee754_atan2+0x7e>
 800dda8:	a53b      	add	r5, pc, #236	; (adr r5, 800de98 <__ieee754_atan2+0x168>)
 800ddaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	ea52 010a 	orrs.w	r1, r2, sl
 800ddba:	d106      	bne.n	800ddca <__ieee754_atan2+0x9a>
 800ddbc:	f1bc 0f00 	cmp.w	ip, #0
 800ddc0:	da63      	bge.n	800de8a <__ieee754_atan2+0x15a>
 800ddc2:	a537      	add	r5, pc, #220	; (adr r5, 800dea0 <__ieee754_atan2+0x170>)
 800ddc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ddc8:	e7f1      	b.n	800ddae <__ieee754_atan2+0x7e>
 800ddca:	4572      	cmp	r2, lr
 800ddcc:	d10f      	bne.n	800ddee <__ieee754_atan2+0xbe>
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f106 36ff 	add.w	r6, r6, #4294967295
 800ddd4:	d107      	bne.n	800dde6 <__ieee754_atan2+0xb6>
 800ddd6:	2e02      	cmp	r6, #2
 800ddd8:	d850      	bhi.n	800de7c <__ieee754_atan2+0x14c>
 800ddda:	4b3c      	ldr	r3, [pc, #240]	; (800decc <__ieee754_atan2+0x19c>)
 800dddc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dde0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800dde4:	e7e3      	b.n	800ddae <__ieee754_atan2+0x7e>
 800dde6:	2e02      	cmp	r6, #2
 800dde8:	d84c      	bhi.n	800de84 <__ieee754_atan2+0x154>
 800ddea:	4b39      	ldr	r3, [pc, #228]	; (800ded0 <__ieee754_atan2+0x1a0>)
 800ddec:	e7f6      	b.n	800dddc <__ieee754_atan2+0xac>
 800ddee:	4573      	cmp	r3, lr
 800ddf0:	d0e4      	beq.n	800ddbc <__ieee754_atan2+0x8c>
 800ddf2:	1a9b      	subs	r3, r3, r2
 800ddf4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ddf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddfc:	da20      	bge.n	800de40 <__ieee754_atan2+0x110>
 800ddfe:	2f00      	cmp	r7, #0
 800de00:	da01      	bge.n	800de06 <__ieee754_atan2+0xd6>
 800de02:	323c      	adds	r2, #60	; 0x3c
 800de04:	db20      	blt.n	800de48 <__ieee754_atan2+0x118>
 800de06:	4652      	mov	r2, sl
 800de08:	464b      	mov	r3, r9
 800de0a:	4620      	mov	r0, r4
 800de0c:	4629      	mov	r1, r5
 800de0e:	f7f2 fc8d 	bl	800072c <__aeabi_ddiv>
 800de12:	f000 ffdf 	bl	800edd4 <fabs>
 800de16:	f000 fe53 	bl	800eac0 <atan>
 800de1a:	4604      	mov	r4, r0
 800de1c:	460d      	mov	r5, r1
 800de1e:	2e01      	cmp	r6, #1
 800de20:	d015      	beq.n	800de4e <__ieee754_atan2+0x11e>
 800de22:	2e02      	cmp	r6, #2
 800de24:	d017      	beq.n	800de56 <__ieee754_atan2+0x126>
 800de26:	2e00      	cmp	r6, #0
 800de28:	d0c1      	beq.n	800ddae <__ieee754_atan2+0x7e>
 800de2a:	a31f      	add	r3, pc, #124	; (adr r3, 800dea8 <__ieee754_atan2+0x178>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	4620      	mov	r0, r4
 800de32:	4629      	mov	r1, r5
 800de34:	f7f2 f998 	bl	8000168 <__aeabi_dsub>
 800de38:	a31d      	add	r3, pc, #116	; (adr r3, 800deb0 <__ieee754_atan2+0x180>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	e016      	b.n	800de6e <__ieee754_atan2+0x13e>
 800de40:	a51d      	add	r5, pc, #116	; (adr r5, 800deb8 <__ieee754_atan2+0x188>)
 800de42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de46:	e7ea      	b.n	800de1e <__ieee754_atan2+0xee>
 800de48:	2400      	movs	r4, #0
 800de4a:	2500      	movs	r5, #0
 800de4c:	e7e7      	b.n	800de1e <__ieee754_atan2+0xee>
 800de4e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800de52:	461d      	mov	r5, r3
 800de54:	e7ab      	b.n	800ddae <__ieee754_atan2+0x7e>
 800de56:	a314      	add	r3, pc, #80	; (adr r3, 800dea8 <__ieee754_atan2+0x178>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	4620      	mov	r0, r4
 800de5e:	4629      	mov	r1, r5
 800de60:	f7f2 f982 	bl	8000168 <__aeabi_dsub>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	a111      	add	r1, pc, #68	; (adr r1, 800deb0 <__ieee754_atan2+0x180>)
 800de6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de6e:	f7f2 f97b 	bl	8000168 <__aeabi_dsub>
 800de72:	e77f      	b.n	800dd74 <__ieee754_atan2+0x44>
 800de74:	a50e      	add	r5, pc, #56	; (adr r5, 800deb0 <__ieee754_atan2+0x180>)
 800de76:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de7a:	e798      	b.n	800ddae <__ieee754_atan2+0x7e>
 800de7c:	a510      	add	r5, pc, #64	; (adr r5, 800dec0 <__ieee754_atan2+0x190>)
 800de7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de82:	e794      	b.n	800ddae <__ieee754_atan2+0x7e>
 800de84:	2400      	movs	r4, #0
 800de86:	2500      	movs	r5, #0
 800de88:	e791      	b.n	800ddae <__ieee754_atan2+0x7e>
 800de8a:	a50b      	add	r5, pc, #44	; (adr r5, 800deb8 <__ieee754_atan2+0x188>)
 800de8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de90:	e78d      	b.n	800ddae <__ieee754_atan2+0x7e>
 800de92:	bf00      	nop
 800de94:	f3af 8000 	nop.w
 800de98:	54442d18 	.word	0x54442d18
 800de9c:	c00921fb 	.word	0xc00921fb
 800dea0:	54442d18 	.word	0x54442d18
 800dea4:	bff921fb 	.word	0xbff921fb
 800dea8:	33145c07 	.word	0x33145c07
 800deac:	3ca1a626 	.word	0x3ca1a626
 800deb0:	54442d18 	.word	0x54442d18
 800deb4:	400921fb 	.word	0x400921fb
 800deb8:	54442d18 	.word	0x54442d18
 800debc:	3ff921fb 	.word	0x3ff921fb
 800dec0:	54442d18 	.word	0x54442d18
 800dec4:	3fe921fb 	.word	0x3fe921fb
 800dec8:	7ff00000 	.word	0x7ff00000
 800decc:	0800f380 	.word	0x0800f380
 800ded0:	0800f398 	.word	0x0800f398
 800ded4:	00000000 	.word	0x00000000

0800ded8 <__ieee754_pow>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	b093      	sub	sp, #76	; 0x4c
 800dede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dee2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800dee6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800deea:	4689      	mov	r9, r1
 800deec:	ea56 0102 	orrs.w	r1, r6, r2
 800def0:	4680      	mov	r8, r0
 800def2:	d111      	bne.n	800df18 <__ieee754_pow+0x40>
 800def4:	1803      	adds	r3, r0, r0
 800def6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800defa:	4152      	adcs	r2, r2
 800defc:	4299      	cmp	r1, r3
 800defe:	4b82      	ldr	r3, [pc, #520]	; (800e108 <__ieee754_pow+0x230>)
 800df00:	4193      	sbcs	r3, r2
 800df02:	f080 84b9 	bcs.w	800e878 <__ieee754_pow+0x9a0>
 800df06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df0a:	4640      	mov	r0, r8
 800df0c:	4649      	mov	r1, r9
 800df0e:	f7f2 f92d 	bl	800016c <__adddf3>
 800df12:	4683      	mov	fp, r0
 800df14:	468c      	mov	ip, r1
 800df16:	e06f      	b.n	800dff8 <__ieee754_pow+0x120>
 800df18:	4b7c      	ldr	r3, [pc, #496]	; (800e10c <__ieee754_pow+0x234>)
 800df1a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800df1e:	429c      	cmp	r4, r3
 800df20:	464d      	mov	r5, r9
 800df22:	4682      	mov	sl, r0
 800df24:	dc06      	bgt.n	800df34 <__ieee754_pow+0x5c>
 800df26:	d101      	bne.n	800df2c <__ieee754_pow+0x54>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d1ec      	bne.n	800df06 <__ieee754_pow+0x2e>
 800df2c:	429e      	cmp	r6, r3
 800df2e:	dc01      	bgt.n	800df34 <__ieee754_pow+0x5c>
 800df30:	d10f      	bne.n	800df52 <__ieee754_pow+0x7a>
 800df32:	b172      	cbz	r2, 800df52 <__ieee754_pow+0x7a>
 800df34:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800df38:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800df3c:	ea55 050a 	orrs.w	r5, r5, sl
 800df40:	d1e1      	bne.n	800df06 <__ieee754_pow+0x2e>
 800df42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df46:	18db      	adds	r3, r3, r3
 800df48:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800df4c:	4152      	adcs	r2, r2
 800df4e:	429d      	cmp	r5, r3
 800df50:	e7d5      	b.n	800defe <__ieee754_pow+0x26>
 800df52:	2d00      	cmp	r5, #0
 800df54:	da39      	bge.n	800dfca <__ieee754_pow+0xf2>
 800df56:	4b6e      	ldr	r3, [pc, #440]	; (800e110 <__ieee754_pow+0x238>)
 800df58:	429e      	cmp	r6, r3
 800df5a:	dc52      	bgt.n	800e002 <__ieee754_pow+0x12a>
 800df5c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800df60:	429e      	cmp	r6, r3
 800df62:	f340 849c 	ble.w	800e89e <__ieee754_pow+0x9c6>
 800df66:	1533      	asrs	r3, r6, #20
 800df68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800df6c:	2b14      	cmp	r3, #20
 800df6e:	dd0f      	ble.n	800df90 <__ieee754_pow+0xb8>
 800df70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800df74:	fa22 f103 	lsr.w	r1, r2, r3
 800df78:	fa01 f303 	lsl.w	r3, r1, r3
 800df7c:	4293      	cmp	r3, r2
 800df7e:	f040 848e 	bne.w	800e89e <__ieee754_pow+0x9c6>
 800df82:	f001 0101 	and.w	r1, r1, #1
 800df86:	f1c1 0302 	rsb	r3, r1, #2
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	b182      	cbz	r2, 800dfb0 <__ieee754_pow+0xd8>
 800df8e:	e05d      	b.n	800e04c <__ieee754_pow+0x174>
 800df90:	2a00      	cmp	r2, #0
 800df92:	d159      	bne.n	800e048 <__ieee754_pow+0x170>
 800df94:	f1c3 0314 	rsb	r3, r3, #20
 800df98:	fa46 f103 	asr.w	r1, r6, r3
 800df9c:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa0:	42b3      	cmp	r3, r6
 800dfa2:	f040 8479 	bne.w	800e898 <__ieee754_pow+0x9c0>
 800dfa6:	f001 0101 	and.w	r1, r1, #1
 800dfaa:	f1c1 0302 	rsb	r3, r1, #2
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	4b58      	ldr	r3, [pc, #352]	; (800e114 <__ieee754_pow+0x23c>)
 800dfb2:	429e      	cmp	r6, r3
 800dfb4:	d132      	bne.n	800e01c <__ieee754_pow+0x144>
 800dfb6:	2f00      	cmp	r7, #0
 800dfb8:	f280 846a 	bge.w	800e890 <__ieee754_pow+0x9b8>
 800dfbc:	4642      	mov	r2, r8
 800dfbe:	464b      	mov	r3, r9
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	4954      	ldr	r1, [pc, #336]	; (800e114 <__ieee754_pow+0x23c>)
 800dfc4:	f7f2 fbb2 	bl	800072c <__aeabi_ddiv>
 800dfc8:	e7a3      	b.n	800df12 <__ieee754_pow+0x3a>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	d13c      	bne.n	800e04c <__ieee754_pow+0x174>
 800dfd2:	4b4e      	ldr	r3, [pc, #312]	; (800e10c <__ieee754_pow+0x234>)
 800dfd4:	429e      	cmp	r6, r3
 800dfd6:	d1eb      	bne.n	800dfb0 <__ieee754_pow+0xd8>
 800dfd8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dfdc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dfe0:	ea53 030a 	orrs.w	r3, r3, sl
 800dfe4:	f000 8448 	beq.w	800e878 <__ieee754_pow+0x9a0>
 800dfe8:	4b4b      	ldr	r3, [pc, #300]	; (800e118 <__ieee754_pow+0x240>)
 800dfea:	429c      	cmp	r4, r3
 800dfec:	dd0b      	ble.n	800e006 <__ieee754_pow+0x12e>
 800dfee:	2f00      	cmp	r7, #0
 800dff0:	f2c0 8448 	blt.w	800e884 <__ieee754_pow+0x9ac>
 800dff4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800dff8:	4658      	mov	r0, fp
 800dffa:	4661      	mov	r1, ip
 800dffc:	b013      	add	sp, #76	; 0x4c
 800dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e002:	2302      	movs	r3, #2
 800e004:	e7e2      	b.n	800dfcc <__ieee754_pow+0xf4>
 800e006:	2f00      	cmp	r7, #0
 800e008:	f04f 0b00 	mov.w	fp, #0
 800e00c:	f04f 0c00 	mov.w	ip, #0
 800e010:	daf2      	bge.n	800dff8 <__ieee754_pow+0x120>
 800e012:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e016:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e01a:	e7ed      	b.n	800dff8 <__ieee754_pow+0x120>
 800e01c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e020:	d106      	bne.n	800e030 <__ieee754_pow+0x158>
 800e022:	4642      	mov	r2, r8
 800e024:	464b      	mov	r3, r9
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f2 fa55 	bl	80004d8 <__aeabi_dmul>
 800e02e:	e770      	b.n	800df12 <__ieee754_pow+0x3a>
 800e030:	4b3a      	ldr	r3, [pc, #232]	; (800e11c <__ieee754_pow+0x244>)
 800e032:	429f      	cmp	r7, r3
 800e034:	d10a      	bne.n	800e04c <__ieee754_pow+0x174>
 800e036:	2d00      	cmp	r5, #0
 800e038:	db08      	blt.n	800e04c <__ieee754_pow+0x174>
 800e03a:	4640      	mov	r0, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	b013      	add	sp, #76	; 0x4c
 800e040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	f000 bc5e 	b.w	800e904 <__ieee754_sqrt>
 800e048:	2300      	movs	r3, #0
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	4640      	mov	r0, r8
 800e04e:	4649      	mov	r1, r9
 800e050:	f000 fec0 	bl	800edd4 <fabs>
 800e054:	4683      	mov	fp, r0
 800e056:	468c      	mov	ip, r1
 800e058:	f1ba 0f00 	cmp.w	sl, #0
 800e05c:	d128      	bne.n	800e0b0 <__ieee754_pow+0x1d8>
 800e05e:	b124      	cbz	r4, 800e06a <__ieee754_pow+0x192>
 800e060:	4b2c      	ldr	r3, [pc, #176]	; (800e114 <__ieee754_pow+0x23c>)
 800e062:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e066:	429a      	cmp	r2, r3
 800e068:	d122      	bne.n	800e0b0 <__ieee754_pow+0x1d8>
 800e06a:	2f00      	cmp	r7, #0
 800e06c:	da07      	bge.n	800e07e <__ieee754_pow+0x1a6>
 800e06e:	465a      	mov	r2, fp
 800e070:	4663      	mov	r3, ip
 800e072:	2000      	movs	r0, #0
 800e074:	4927      	ldr	r1, [pc, #156]	; (800e114 <__ieee754_pow+0x23c>)
 800e076:	f7f2 fb59 	bl	800072c <__aeabi_ddiv>
 800e07a:	4683      	mov	fp, r0
 800e07c:	468c      	mov	ip, r1
 800e07e:	2d00      	cmp	r5, #0
 800e080:	daba      	bge.n	800dff8 <__ieee754_pow+0x120>
 800e082:	9b00      	ldr	r3, [sp, #0]
 800e084:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e088:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e08c:	4323      	orrs	r3, r4
 800e08e:	d108      	bne.n	800e0a2 <__ieee754_pow+0x1ca>
 800e090:	465a      	mov	r2, fp
 800e092:	4663      	mov	r3, ip
 800e094:	4658      	mov	r0, fp
 800e096:	4661      	mov	r1, ip
 800e098:	f7f2 f866 	bl	8000168 <__aeabi_dsub>
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	e790      	b.n	800dfc4 <__ieee754_pow+0xec>
 800e0a2:	9b00      	ldr	r3, [sp, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d1a7      	bne.n	800dff8 <__ieee754_pow+0x120>
 800e0a8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e0ac:	469c      	mov	ip, r3
 800e0ae:	e7a3      	b.n	800dff8 <__ieee754_pow+0x120>
 800e0b0:	0feb      	lsrs	r3, r5, #31
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	930c      	str	r3, [sp, #48]	; 0x30
 800e0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0b8:	9b00      	ldr	r3, [sp, #0]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	d104      	bne.n	800e0c8 <__ieee754_pow+0x1f0>
 800e0be:	4642      	mov	r2, r8
 800e0c0:	464b      	mov	r3, r9
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	e7e7      	b.n	800e098 <__ieee754_pow+0x1c0>
 800e0c8:	4b15      	ldr	r3, [pc, #84]	; (800e120 <__ieee754_pow+0x248>)
 800e0ca:	429e      	cmp	r6, r3
 800e0cc:	f340 80f6 	ble.w	800e2bc <__ieee754_pow+0x3e4>
 800e0d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e0d4:	429e      	cmp	r6, r3
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <__ieee754_pow+0x240>)
 800e0d8:	dd09      	ble.n	800e0ee <__ieee754_pow+0x216>
 800e0da:	429c      	cmp	r4, r3
 800e0dc:	dc0c      	bgt.n	800e0f8 <__ieee754_pow+0x220>
 800e0de:	2f00      	cmp	r7, #0
 800e0e0:	da0c      	bge.n	800e0fc <__ieee754_pow+0x224>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	b013      	add	sp, #76	; 0x4c
 800e0e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	f000 bce2 	b.w	800eab2 <__math_oflow>
 800e0ee:	429c      	cmp	r4, r3
 800e0f0:	dbf5      	blt.n	800e0de <__ieee754_pow+0x206>
 800e0f2:	4b08      	ldr	r3, [pc, #32]	; (800e114 <__ieee754_pow+0x23c>)
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	dd15      	ble.n	800e124 <__ieee754_pow+0x24c>
 800e0f8:	2f00      	cmp	r7, #0
 800e0fa:	dcf2      	bgt.n	800e0e2 <__ieee754_pow+0x20a>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	b013      	add	sp, #76	; 0x4c
 800e100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	f000 bcd0 	b.w	800eaa8 <__math_uflow>
 800e108:	fff00000 	.word	0xfff00000
 800e10c:	7ff00000 	.word	0x7ff00000
 800e110:	433fffff 	.word	0x433fffff
 800e114:	3ff00000 	.word	0x3ff00000
 800e118:	3fefffff 	.word	0x3fefffff
 800e11c:	3fe00000 	.word	0x3fe00000
 800e120:	41e00000 	.word	0x41e00000
 800e124:	4661      	mov	r1, ip
 800e126:	2200      	movs	r2, #0
 800e128:	4658      	mov	r0, fp
 800e12a:	4b5f      	ldr	r3, [pc, #380]	; (800e2a8 <__ieee754_pow+0x3d0>)
 800e12c:	f7f2 f81c 	bl	8000168 <__aeabi_dsub>
 800e130:	a355      	add	r3, pc, #340	; (adr r3, 800e288 <__ieee754_pow+0x3b0>)
 800e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e136:	4604      	mov	r4, r0
 800e138:	460d      	mov	r5, r1
 800e13a:	f7f2 f9cd 	bl	80004d8 <__aeabi_dmul>
 800e13e:	a354      	add	r3, pc, #336	; (adr r3, 800e290 <__ieee754_pow+0x3b8>)
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	4606      	mov	r6, r0
 800e146:	460f      	mov	r7, r1
 800e148:	4620      	mov	r0, r4
 800e14a:	4629      	mov	r1, r5
 800e14c:	f7f2 f9c4 	bl	80004d8 <__aeabi_dmul>
 800e150:	2200      	movs	r2, #0
 800e152:	4682      	mov	sl, r0
 800e154:	468b      	mov	fp, r1
 800e156:	4620      	mov	r0, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	4b54      	ldr	r3, [pc, #336]	; (800e2ac <__ieee754_pow+0x3d4>)
 800e15c:	f7f2 f9bc 	bl	80004d8 <__aeabi_dmul>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	a14c      	add	r1, pc, #304	; (adr r1, 800e298 <__ieee754_pow+0x3c0>)
 800e166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e16a:	f7f1 fffd 	bl	8000168 <__aeabi_dsub>
 800e16e:	4622      	mov	r2, r4
 800e170:	462b      	mov	r3, r5
 800e172:	f7f2 f9b1 	bl	80004d8 <__aeabi_dmul>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	2000      	movs	r0, #0
 800e17c:	494c      	ldr	r1, [pc, #304]	; (800e2b0 <__ieee754_pow+0x3d8>)
 800e17e:	f7f1 fff3 	bl	8000168 <__aeabi_dsub>
 800e182:	4622      	mov	r2, r4
 800e184:	462b      	mov	r3, r5
 800e186:	4680      	mov	r8, r0
 800e188:	4689      	mov	r9, r1
 800e18a:	4620      	mov	r0, r4
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7f2 f9a3 	bl	80004d8 <__aeabi_dmul>
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	4640      	mov	r0, r8
 800e198:	4649      	mov	r1, r9
 800e19a:	f7f2 f99d 	bl	80004d8 <__aeabi_dmul>
 800e19e:	a340      	add	r3, pc, #256	; (adr r3, 800e2a0 <__ieee754_pow+0x3c8>)
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	f7f2 f998 	bl	80004d8 <__aeabi_dmul>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	4659      	mov	r1, fp
 800e1b0:	f7f1 ffda 	bl	8000168 <__aeabi_dsub>
 800e1b4:	f04f 0a00 	mov.w	sl, #0
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	4604      	mov	r4, r0
 800e1be:	460d      	mov	r5, r1
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	4639      	mov	r1, r7
 800e1c4:	f7f1 ffd2 	bl	800016c <__adddf3>
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	463b      	mov	r3, r7
 800e1cc:	4650      	mov	r0, sl
 800e1ce:	468b      	mov	fp, r1
 800e1d0:	f7f1 ffca 	bl	8000168 <__aeabi_dsub>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	4620      	mov	r0, r4
 800e1da:	4629      	mov	r1, r5
 800e1dc:	f7f1 ffc4 	bl	8000168 <__aeabi_dsub>
 800e1e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1e4:	9b00      	ldr	r3, [sp, #0]
 800e1e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	f04f 0600 	mov.w	r6, #0
 800e1f0:	f04f 0200 	mov.w	r2, #0
 800e1f4:	bf0c      	ite	eq
 800e1f6:	4b2f      	ldreq	r3, [pc, #188]	; (800e2b4 <__ieee754_pow+0x3dc>)
 800e1f8:	4b2b      	ldrne	r3, [pc, #172]	; (800e2a8 <__ieee754_pow+0x3d0>)
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e202:	e9cd 2300 	strd	r2, r3, [sp]
 800e206:	4632      	mov	r2, r6
 800e208:	463b      	mov	r3, r7
 800e20a:	f7f1 ffad 	bl	8000168 <__aeabi_dsub>
 800e20e:	4652      	mov	r2, sl
 800e210:	465b      	mov	r3, fp
 800e212:	f7f2 f961 	bl	80004d8 <__aeabi_dmul>
 800e216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e21a:	4680      	mov	r8, r0
 800e21c:	4689      	mov	r9, r1
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 f959 	bl	80004d8 <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4640      	mov	r0, r8
 800e22c:	4649      	mov	r1, r9
 800e22e:	f7f1 ff9d 	bl	800016c <__adddf3>
 800e232:	4632      	mov	r2, r6
 800e234:	463b      	mov	r3, r7
 800e236:	4680      	mov	r8, r0
 800e238:	4689      	mov	r9, r1
 800e23a:	4650      	mov	r0, sl
 800e23c:	4659      	mov	r1, fp
 800e23e:	f7f2 f94b 	bl	80004d8 <__aeabi_dmul>
 800e242:	4604      	mov	r4, r0
 800e244:	460d      	mov	r5, r1
 800e246:	460b      	mov	r3, r1
 800e248:	4602      	mov	r2, r0
 800e24a:	4649      	mov	r1, r9
 800e24c:	4640      	mov	r0, r8
 800e24e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e252:	f7f1 ff8b 	bl	800016c <__adddf3>
 800e256:	4b18      	ldr	r3, [pc, #96]	; (800e2b8 <__ieee754_pow+0x3e0>)
 800e258:	4682      	mov	sl, r0
 800e25a:	4299      	cmp	r1, r3
 800e25c:	460f      	mov	r7, r1
 800e25e:	460e      	mov	r6, r1
 800e260:	f340 82e5 	ble.w	800e82e <__ieee754_pow+0x956>
 800e264:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e268:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e26c:	4303      	orrs	r3, r0
 800e26e:	f000 81df 	beq.w	800e630 <__ieee754_pow+0x758>
 800e272:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e276:	2200      	movs	r2, #0
 800e278:	2300      	movs	r3, #0
 800e27a:	f7f2 fb9f 	bl	80009bc <__aeabi_dcmplt>
 800e27e:	3800      	subs	r0, #0
 800e280:	bf18      	it	ne
 800e282:	2001      	movne	r0, #1
 800e284:	e72e      	b.n	800e0e4 <__ieee754_pow+0x20c>
 800e286:	bf00      	nop
 800e288:	60000000 	.word	0x60000000
 800e28c:	3ff71547 	.word	0x3ff71547
 800e290:	f85ddf44 	.word	0xf85ddf44
 800e294:	3e54ae0b 	.word	0x3e54ae0b
 800e298:	55555555 	.word	0x55555555
 800e29c:	3fd55555 	.word	0x3fd55555
 800e2a0:	652b82fe 	.word	0x652b82fe
 800e2a4:	3ff71547 	.word	0x3ff71547
 800e2a8:	3ff00000 	.word	0x3ff00000
 800e2ac:	3fd00000 	.word	0x3fd00000
 800e2b0:	3fe00000 	.word	0x3fe00000
 800e2b4:	bff00000 	.word	0xbff00000
 800e2b8:	408fffff 	.word	0x408fffff
 800e2bc:	4bd2      	ldr	r3, [pc, #840]	; (800e608 <__ieee754_pow+0x730>)
 800e2be:	2200      	movs	r2, #0
 800e2c0:	402b      	ands	r3, r5
 800e2c2:	b943      	cbnz	r3, 800e2d6 <__ieee754_pow+0x3fe>
 800e2c4:	4658      	mov	r0, fp
 800e2c6:	4661      	mov	r1, ip
 800e2c8:	4bd0      	ldr	r3, [pc, #832]	; (800e60c <__ieee754_pow+0x734>)
 800e2ca:	f7f2 f905 	bl	80004d8 <__aeabi_dmul>
 800e2ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e2d2:	4683      	mov	fp, r0
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	1523      	asrs	r3, r4, #20
 800e2d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e2dc:	4413      	add	r3, r2
 800e2de:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2e0:	4bcb      	ldr	r3, [pc, #812]	; (800e610 <__ieee754_pow+0x738>)
 800e2e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e2e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e2f0:	dd08      	ble.n	800e304 <__ieee754_pow+0x42c>
 800e2f2:	4bc8      	ldr	r3, [pc, #800]	; (800e614 <__ieee754_pow+0x73c>)
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	f340 8199 	ble.w	800e62c <__ieee754_pow+0x754>
 800e2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2fc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e300:	3301      	adds	r3, #1
 800e302:	930b      	str	r3, [sp, #44]	; 0x2c
 800e304:	2600      	movs	r6, #0
 800e306:	00f3      	lsls	r3, r6, #3
 800e308:	930d      	str	r3, [sp, #52]	; 0x34
 800e30a:	4bc3      	ldr	r3, [pc, #780]	; (800e618 <__ieee754_pow+0x740>)
 800e30c:	4658      	mov	r0, fp
 800e30e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e312:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e316:	4629      	mov	r1, r5
 800e318:	461a      	mov	r2, r3
 800e31a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e31e:	4623      	mov	r3, r4
 800e320:	f7f1 ff22 	bl	8000168 <__aeabi_dsub>
 800e324:	46da      	mov	sl, fp
 800e326:	462b      	mov	r3, r5
 800e328:	4652      	mov	r2, sl
 800e32a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e32e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e332:	f7f1 ff1b 	bl	800016c <__adddf3>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	2000      	movs	r0, #0
 800e33c:	49b7      	ldr	r1, [pc, #732]	; (800e61c <__ieee754_pow+0x744>)
 800e33e:	f7f2 f9f5 	bl	800072c <__aeabi_ddiv>
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e34a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e34e:	f7f2 f8c3 	bl	80004d8 <__aeabi_dmul>
 800e352:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e356:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e35a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e35e:	2300      	movs	r3, #0
 800e360:	2200      	movs	r2, #0
 800e362:	46ab      	mov	fp, r5
 800e364:	106d      	asrs	r5, r5, #1
 800e366:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e370:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e374:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e378:	4640      	mov	r0, r8
 800e37a:	4649      	mov	r1, r9
 800e37c:	4614      	mov	r4, r2
 800e37e:	461d      	mov	r5, r3
 800e380:	f7f2 f8aa 	bl	80004d8 <__aeabi_dmul>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e38c:	f7f1 feec 	bl	8000168 <__aeabi_dsub>
 800e390:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e394:	4606      	mov	r6, r0
 800e396:	460f      	mov	r7, r1
 800e398:	4620      	mov	r0, r4
 800e39a:	4629      	mov	r1, r5
 800e39c:	f7f1 fee4 	bl	8000168 <__aeabi_dsub>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4650      	mov	r0, sl
 800e3a6:	4659      	mov	r1, fp
 800e3a8:	f7f1 fede 	bl	8000168 <__aeabi_dsub>
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	464b      	mov	r3, r9
 800e3b0:	f7f2 f892 	bl	80004d8 <__aeabi_dmul>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f1 fed4 	bl	8000168 <__aeabi_dsub>
 800e3c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e3c4:	f7f2 f888 	bl	80004d8 <__aeabi_dmul>
 800e3c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3d0:	4610      	mov	r0, r2
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	f7f2 f880 	bl	80004d8 <__aeabi_dmul>
 800e3d8:	a379      	add	r3, pc, #484	; (adr r3, 800e5c0 <__ieee754_pow+0x6e8>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	4604      	mov	r4, r0
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	f7f2 f879 	bl	80004d8 <__aeabi_dmul>
 800e3e6:	a378      	add	r3, pc, #480	; (adr r3, 800e5c8 <__ieee754_pow+0x6f0>)
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	f7f1 febe 	bl	800016c <__adddf3>
 800e3f0:	4622      	mov	r2, r4
 800e3f2:	462b      	mov	r3, r5
 800e3f4:	f7f2 f870 	bl	80004d8 <__aeabi_dmul>
 800e3f8:	a375      	add	r3, pc, #468	; (adr r3, 800e5d0 <__ieee754_pow+0x6f8>)
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f7f1 feb5 	bl	800016c <__adddf3>
 800e402:	4622      	mov	r2, r4
 800e404:	462b      	mov	r3, r5
 800e406:	f7f2 f867 	bl	80004d8 <__aeabi_dmul>
 800e40a:	a373      	add	r3, pc, #460	; (adr r3, 800e5d8 <__ieee754_pow+0x700>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	f7f1 feac 	bl	800016c <__adddf3>
 800e414:	4622      	mov	r2, r4
 800e416:	462b      	mov	r3, r5
 800e418:	f7f2 f85e 	bl	80004d8 <__aeabi_dmul>
 800e41c:	a370      	add	r3, pc, #448	; (adr r3, 800e5e0 <__ieee754_pow+0x708>)
 800e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e422:	f7f1 fea3 	bl	800016c <__adddf3>
 800e426:	4622      	mov	r2, r4
 800e428:	462b      	mov	r3, r5
 800e42a:	f7f2 f855 	bl	80004d8 <__aeabi_dmul>
 800e42e:	a36e      	add	r3, pc, #440	; (adr r3, 800e5e8 <__ieee754_pow+0x710>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f7f1 fe9a 	bl	800016c <__adddf3>
 800e438:	4622      	mov	r2, r4
 800e43a:	4606      	mov	r6, r0
 800e43c:	460f      	mov	r7, r1
 800e43e:	462b      	mov	r3, r5
 800e440:	4620      	mov	r0, r4
 800e442:	4629      	mov	r1, r5
 800e444:	f7f2 f848 	bl	80004d8 <__aeabi_dmul>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4630      	mov	r0, r6
 800e44e:	4639      	mov	r1, r7
 800e450:	f7f2 f842 	bl	80004d8 <__aeabi_dmul>
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e45c:	4642      	mov	r2, r8
 800e45e:	464b      	mov	r3, r9
 800e460:	f7f1 fe84 	bl	800016c <__adddf3>
 800e464:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e468:	f7f2 f836 	bl	80004d8 <__aeabi_dmul>
 800e46c:	4622      	mov	r2, r4
 800e46e:	462b      	mov	r3, r5
 800e470:	f7f1 fe7c 	bl	800016c <__adddf3>
 800e474:	4642      	mov	r2, r8
 800e476:	4606      	mov	r6, r0
 800e478:	460f      	mov	r7, r1
 800e47a:	464b      	mov	r3, r9
 800e47c:	4640      	mov	r0, r8
 800e47e:	4649      	mov	r1, r9
 800e480:	f7f2 f82a 	bl	80004d8 <__aeabi_dmul>
 800e484:	2200      	movs	r2, #0
 800e486:	4b66      	ldr	r3, [pc, #408]	; (800e620 <__ieee754_pow+0x748>)
 800e488:	4682      	mov	sl, r0
 800e48a:	468b      	mov	fp, r1
 800e48c:	f7f1 fe6e 	bl	800016c <__adddf3>
 800e490:	4632      	mov	r2, r6
 800e492:	463b      	mov	r3, r7
 800e494:	f7f1 fe6a 	bl	800016c <__adddf3>
 800e498:	2400      	movs	r4, #0
 800e49a:	460d      	mov	r5, r1
 800e49c:	4622      	mov	r2, r4
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	f7f2 f818 	bl	80004d8 <__aeabi_dmul>
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	4689      	mov	r9, r1
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	4b5b      	ldr	r3, [pc, #364]	; (800e620 <__ieee754_pow+0x748>)
 800e4b4:	f7f1 fe58 	bl	8000168 <__aeabi_dsub>
 800e4b8:	4652      	mov	r2, sl
 800e4ba:	465b      	mov	r3, fp
 800e4bc:	f7f1 fe54 	bl	8000168 <__aeabi_dsub>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	4639      	mov	r1, r7
 800e4c8:	f7f1 fe4e 	bl	8000168 <__aeabi_dsub>
 800e4cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4d0:	f7f2 f802 	bl	80004d8 <__aeabi_dmul>
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	460f      	mov	r7, r1
 800e4da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4de:	462b      	mov	r3, r5
 800e4e0:	f7f1 fffa 	bl	80004d8 <__aeabi_dmul>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	f7f1 fe3e 	bl	800016c <__adddf3>
 800e4f0:	2400      	movs	r4, #0
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	f7f1 fe35 	bl	800016c <__adddf3>
 800e502:	a33b      	add	r3, pc, #236	; (adr r3, 800e5f0 <__ieee754_pow+0x718>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	4620      	mov	r0, r4
 800e50a:	460d      	mov	r5, r1
 800e50c:	f7f1 ffe4 	bl	80004d8 <__aeabi_dmul>
 800e510:	4642      	mov	r2, r8
 800e512:	464b      	mov	r3, r9
 800e514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f1 fe24 	bl	8000168 <__aeabi_dsub>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4630      	mov	r0, r6
 800e526:	4639      	mov	r1, r7
 800e528:	f7f1 fe1e 	bl	8000168 <__aeabi_dsub>
 800e52c:	a332      	add	r3, pc, #200	; (adr r3, 800e5f8 <__ieee754_pow+0x720>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f7f1 ffd1 	bl	80004d8 <__aeabi_dmul>
 800e536:	a332      	add	r3, pc, #200	; (adr r3, 800e600 <__ieee754_pow+0x728>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f1 ffc8 	bl	80004d8 <__aeabi_dmul>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4630      	mov	r0, r6
 800e54e:	4639      	mov	r1, r7
 800e550:	f7f1 fe0c 	bl	800016c <__adddf3>
 800e554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e556:	4b33      	ldr	r3, [pc, #204]	; (800e624 <__ieee754_pow+0x74c>)
 800e558:	f04f 0a00 	mov.w	sl, #0
 800e55c:	4413      	add	r3, r2
 800e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e562:	f7f1 fe03 	bl	800016c <__adddf3>
 800e566:	4680      	mov	r8, r0
 800e568:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e56a:	4689      	mov	r9, r1
 800e56c:	f7f1 ff4a 	bl	8000404 <__aeabi_i2d>
 800e570:	4604      	mov	r4, r0
 800e572:	460d      	mov	r5, r1
 800e574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e576:	4b2c      	ldr	r3, [pc, #176]	; (800e628 <__ieee754_pow+0x750>)
 800e578:	4413      	add	r3, r2
 800e57a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e57e:	4642      	mov	r2, r8
 800e580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e584:	464b      	mov	r3, r9
 800e586:	f7f1 fdf1 	bl	800016c <__adddf3>
 800e58a:	4632      	mov	r2, r6
 800e58c:	463b      	mov	r3, r7
 800e58e:	f7f1 fded 	bl	800016c <__adddf3>
 800e592:	4622      	mov	r2, r4
 800e594:	462b      	mov	r3, r5
 800e596:	f7f1 fde9 	bl	800016c <__adddf3>
 800e59a:	4622      	mov	r2, r4
 800e59c:	462b      	mov	r3, r5
 800e59e:	4650      	mov	r0, sl
 800e5a0:	468b      	mov	fp, r1
 800e5a2:	f7f1 fde1 	bl	8000168 <__aeabi_dsub>
 800e5a6:	4632      	mov	r2, r6
 800e5a8:	463b      	mov	r3, r7
 800e5aa:	f7f1 fddd 	bl	8000168 <__aeabi_dsub>
 800e5ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5b2:	f7f1 fdd9 	bl	8000168 <__aeabi_dsub>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4649      	mov	r1, r9
 800e5be:	e60d      	b.n	800e1dc <__ieee754_pow+0x304>
 800e5c0:	4a454eef 	.word	0x4a454eef
 800e5c4:	3fca7e28 	.word	0x3fca7e28
 800e5c8:	93c9db65 	.word	0x93c9db65
 800e5cc:	3fcd864a 	.word	0x3fcd864a
 800e5d0:	a91d4101 	.word	0xa91d4101
 800e5d4:	3fd17460 	.word	0x3fd17460
 800e5d8:	518f264d 	.word	0x518f264d
 800e5dc:	3fd55555 	.word	0x3fd55555
 800e5e0:	db6fabff 	.word	0xdb6fabff
 800e5e4:	3fdb6db6 	.word	0x3fdb6db6
 800e5e8:	33333303 	.word	0x33333303
 800e5ec:	3fe33333 	.word	0x3fe33333
 800e5f0:	e0000000 	.word	0xe0000000
 800e5f4:	3feec709 	.word	0x3feec709
 800e5f8:	dc3a03fd 	.word	0xdc3a03fd
 800e5fc:	3feec709 	.word	0x3feec709
 800e600:	145b01f5 	.word	0x145b01f5
 800e604:	be3e2fe0 	.word	0xbe3e2fe0
 800e608:	7ff00000 	.word	0x7ff00000
 800e60c:	43400000 	.word	0x43400000
 800e610:	0003988e 	.word	0x0003988e
 800e614:	000bb679 	.word	0x000bb679
 800e618:	0800f3b0 	.word	0x0800f3b0
 800e61c:	3ff00000 	.word	0x3ff00000
 800e620:	40080000 	.word	0x40080000
 800e624:	0800f3d0 	.word	0x0800f3d0
 800e628:	0800f3c0 	.word	0x0800f3c0
 800e62c:	2601      	movs	r6, #1
 800e62e:	e66a      	b.n	800e306 <__ieee754_pow+0x42e>
 800e630:	a39d      	add	r3, pc, #628	; (adr r3, 800e8a8 <__ieee754_pow+0x9d0>)
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f1 fd97 	bl	800016c <__adddf3>
 800e63e:	4622      	mov	r2, r4
 800e640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e644:	462b      	mov	r3, r5
 800e646:	4650      	mov	r0, sl
 800e648:	4639      	mov	r1, r7
 800e64a:	f7f1 fd8d 	bl	8000168 <__aeabi_dsub>
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e656:	f7f2 f9cf 	bl	80009f8 <__aeabi_dcmpgt>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	f47f ae09 	bne.w	800e272 <__ieee754_pow+0x39a>
 800e660:	4aa3      	ldr	r2, [pc, #652]	; (800e8f0 <__ieee754_pow+0xa18>)
 800e662:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e666:	4293      	cmp	r3, r2
 800e668:	f340 8101 	ble.w	800e86e <__ieee754_pow+0x996>
 800e66c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e670:	2000      	movs	r0, #0
 800e672:	151b      	asrs	r3, r3, #20
 800e674:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e678:	fa4a f303 	asr.w	r3, sl, r3
 800e67c:	4433      	add	r3, r6
 800e67e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e682:	4f9c      	ldr	r7, [pc, #624]	; (800e8f4 <__ieee754_pow+0xa1c>)
 800e684:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e688:	4117      	asrs	r7, r2
 800e68a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e68e:	ea23 0107 	bic.w	r1, r3, r7
 800e692:	f1c2 0214 	rsb	r2, r2, #20
 800e696:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e69a:	460b      	mov	r3, r1
 800e69c:	fa4a fa02 	asr.w	sl, sl, r2
 800e6a0:	2e00      	cmp	r6, #0
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	bfb8      	it	lt
 800e6aa:	f1ca 0a00 	rsblt	sl, sl, #0
 800e6ae:	f7f1 fd5b 	bl	8000168 <__aeabi_dsub>
 800e6b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	4642      	mov	r2, r8
 800e6be:	464b      	mov	r3, r9
 800e6c0:	f7f1 fd54 	bl	800016c <__adddf3>
 800e6c4:	a37a      	add	r3, pc, #488	; (adr r3, 800e8b0 <__ieee754_pow+0x9d8>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	f7f1 ff03 	bl	80004d8 <__aeabi_dmul>
 800e6d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	460f      	mov	r7, r1
 800e6da:	4620      	mov	r0, r4
 800e6dc:	4629      	mov	r1, r5
 800e6de:	f7f1 fd43 	bl	8000168 <__aeabi_dsub>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f1 fd3d 	bl	8000168 <__aeabi_dsub>
 800e6ee:	a372      	add	r3, pc, #456	; (adr r3, 800e8b8 <__ieee754_pow+0x9e0>)
 800e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f4:	f7f1 fef0 	bl	80004d8 <__aeabi_dmul>
 800e6f8:	a371      	add	r3, pc, #452	; (adr r3, 800e8c0 <__ieee754_pow+0x9e8>)
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	4680      	mov	r8, r0
 800e700:	4689      	mov	r9, r1
 800e702:	4620      	mov	r0, r4
 800e704:	4629      	mov	r1, r5
 800e706:	f7f1 fee7 	bl	80004d8 <__aeabi_dmul>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4640      	mov	r0, r8
 800e710:	4649      	mov	r1, r9
 800e712:	f7f1 fd2b 	bl	800016c <__adddf3>
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4630      	mov	r0, r6
 800e720:	4639      	mov	r1, r7
 800e722:	f7f1 fd23 	bl	800016c <__adddf3>
 800e726:	4632      	mov	r2, r6
 800e728:	463b      	mov	r3, r7
 800e72a:	4680      	mov	r8, r0
 800e72c:	4689      	mov	r9, r1
 800e72e:	f7f1 fd1b 	bl	8000168 <__aeabi_dsub>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4620      	mov	r0, r4
 800e738:	4629      	mov	r1, r5
 800e73a:	f7f1 fd15 	bl	8000168 <__aeabi_dsub>
 800e73e:	4642      	mov	r2, r8
 800e740:	4606      	mov	r6, r0
 800e742:	460f      	mov	r7, r1
 800e744:	464b      	mov	r3, r9
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	f7f1 fec5 	bl	80004d8 <__aeabi_dmul>
 800e74e:	a35e      	add	r3, pc, #376	; (adr r3, 800e8c8 <__ieee754_pow+0x9f0>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	4604      	mov	r4, r0
 800e756:	460d      	mov	r5, r1
 800e758:	f7f1 febe 	bl	80004d8 <__aeabi_dmul>
 800e75c:	a35c      	add	r3, pc, #368	; (adr r3, 800e8d0 <__ieee754_pow+0x9f8>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f1 fd01 	bl	8000168 <__aeabi_dsub>
 800e766:	4622      	mov	r2, r4
 800e768:	462b      	mov	r3, r5
 800e76a:	f7f1 feb5 	bl	80004d8 <__aeabi_dmul>
 800e76e:	a35a      	add	r3, pc, #360	; (adr r3, 800e8d8 <__ieee754_pow+0xa00>)
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	f7f1 fcfa 	bl	800016c <__adddf3>
 800e778:	4622      	mov	r2, r4
 800e77a:	462b      	mov	r3, r5
 800e77c:	f7f1 feac 	bl	80004d8 <__aeabi_dmul>
 800e780:	a357      	add	r3, pc, #348	; (adr r3, 800e8e0 <__ieee754_pow+0xa08>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f7f1 fcef 	bl	8000168 <__aeabi_dsub>
 800e78a:	4622      	mov	r2, r4
 800e78c:	462b      	mov	r3, r5
 800e78e:	f7f1 fea3 	bl	80004d8 <__aeabi_dmul>
 800e792:	a355      	add	r3, pc, #340	; (adr r3, 800e8e8 <__ieee754_pow+0xa10>)
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	f7f1 fce8 	bl	800016c <__adddf3>
 800e79c:	4622      	mov	r2, r4
 800e79e:	462b      	mov	r3, r5
 800e7a0:	f7f1 fe9a 	bl	80004d8 <__aeabi_dmul>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	f7f1 fcdc 	bl	8000168 <__aeabi_dsub>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	460d      	mov	r5, r1
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	f7f1 fe8c 	bl	80004d8 <__aeabi_dmul>
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	f7f1 fccb 	bl	8000168 <__aeabi_dsub>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7da:	f7f1 ffa7 	bl	800072c <__aeabi_ddiv>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	463b      	mov	r3, r7
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	f7f1 fe75 	bl	80004d8 <__aeabi_dmul>
 800e7ee:	4632      	mov	r2, r6
 800e7f0:	463b      	mov	r3, r7
 800e7f2:	f7f1 fcbb 	bl	800016c <__adddf3>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 fcb3 	bl	8000168 <__aeabi_dsub>
 800e802:	4642      	mov	r2, r8
 800e804:	464b      	mov	r3, r9
 800e806:	f7f1 fcaf 	bl	8000168 <__aeabi_dsub>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	2000      	movs	r0, #0
 800e810:	4939      	ldr	r1, [pc, #228]	; (800e8f8 <__ieee754_pow+0xa20>)
 800e812:	f7f1 fca9 	bl	8000168 <__aeabi_dsub>
 800e816:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e81a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e81e:	da29      	bge.n	800e874 <__ieee754_pow+0x99c>
 800e820:	4652      	mov	r2, sl
 800e822:	f000 fae1 	bl	800ede8 <scalbn>
 800e826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82a:	f7ff bbfe 	b.w	800e02a <__ieee754_pow+0x152>
 800e82e:	4b33      	ldr	r3, [pc, #204]	; (800e8fc <__ieee754_pow+0xa24>)
 800e830:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800e834:	429f      	cmp	r7, r3
 800e836:	f77f af13 	ble.w	800e660 <__ieee754_pow+0x788>
 800e83a:	4b31      	ldr	r3, [pc, #196]	; (800e900 <__ieee754_pow+0xa28>)
 800e83c:	440b      	add	r3, r1
 800e83e:	4303      	orrs	r3, r0
 800e840:	d009      	beq.n	800e856 <__ieee754_pow+0x97e>
 800e842:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e846:	2200      	movs	r2, #0
 800e848:	2300      	movs	r3, #0
 800e84a:	f7f2 f8b7 	bl	80009bc <__aeabi_dcmplt>
 800e84e:	3800      	subs	r0, #0
 800e850:	bf18      	it	ne
 800e852:	2001      	movne	r0, #1
 800e854:	e453      	b.n	800e0fe <__ieee754_pow+0x226>
 800e856:	4622      	mov	r2, r4
 800e858:	462b      	mov	r3, r5
 800e85a:	f7f1 fc85 	bl	8000168 <__aeabi_dsub>
 800e85e:	4642      	mov	r2, r8
 800e860:	464b      	mov	r3, r9
 800e862:	f7f2 f8bf 	bl	80009e4 <__aeabi_dcmpge>
 800e866:	2800      	cmp	r0, #0
 800e868:	f43f aefa 	beq.w	800e660 <__ieee754_pow+0x788>
 800e86c:	e7e9      	b.n	800e842 <__ieee754_pow+0x96a>
 800e86e:	f04f 0a00 	mov.w	sl, #0
 800e872:	e720      	b.n	800e6b6 <__ieee754_pow+0x7de>
 800e874:	4621      	mov	r1, r4
 800e876:	e7d6      	b.n	800e826 <__ieee754_pow+0x94e>
 800e878:	f04f 0b00 	mov.w	fp, #0
 800e87c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800e8f8 <__ieee754_pow+0xa20>
 800e880:	f7ff bbba 	b.w	800dff8 <__ieee754_pow+0x120>
 800e884:	f04f 0b00 	mov.w	fp, #0
 800e888:	f04f 0c00 	mov.w	ip, #0
 800e88c:	f7ff bbb4 	b.w	800dff8 <__ieee754_pow+0x120>
 800e890:	4640      	mov	r0, r8
 800e892:	4649      	mov	r1, r9
 800e894:	f7ff bb3d 	b.w	800df12 <__ieee754_pow+0x3a>
 800e898:	9200      	str	r2, [sp, #0]
 800e89a:	f7ff bb89 	b.w	800dfb0 <__ieee754_pow+0xd8>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f7ff bb73 	b.w	800df8a <__ieee754_pow+0xb2>
 800e8a4:	f3af 8000 	nop.w
 800e8a8:	652b82fe 	.word	0x652b82fe
 800e8ac:	3c971547 	.word	0x3c971547
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	3fe62e43 	.word	0x3fe62e43
 800e8b8:	fefa39ef 	.word	0xfefa39ef
 800e8bc:	3fe62e42 	.word	0x3fe62e42
 800e8c0:	0ca86c39 	.word	0x0ca86c39
 800e8c4:	be205c61 	.word	0xbe205c61
 800e8c8:	72bea4d0 	.word	0x72bea4d0
 800e8cc:	3e663769 	.word	0x3e663769
 800e8d0:	c5d26bf1 	.word	0xc5d26bf1
 800e8d4:	3ebbbd41 	.word	0x3ebbbd41
 800e8d8:	af25de2c 	.word	0xaf25de2c
 800e8dc:	3f11566a 	.word	0x3f11566a
 800e8e0:	16bebd93 	.word	0x16bebd93
 800e8e4:	3f66c16c 	.word	0x3f66c16c
 800e8e8:	5555553e 	.word	0x5555553e
 800e8ec:	3fc55555 	.word	0x3fc55555
 800e8f0:	3fe00000 	.word	0x3fe00000
 800e8f4:	000fffff 	.word	0x000fffff
 800e8f8:	3ff00000 	.word	0x3ff00000
 800e8fc:	4090cbff 	.word	0x4090cbff
 800e900:	3f6f3400 	.word	0x3f6f3400

0800e904 <__ieee754_sqrt>:
 800e904:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ea60 <__ieee754_sqrt+0x15c>
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	ea3c 0c01 	bics.w	ip, ip, r1
 800e910:	4606      	mov	r6, r0
 800e912:	460d      	mov	r5, r1
 800e914:	460c      	mov	r4, r1
 800e916:	460a      	mov	r2, r1
 800e918:	4607      	mov	r7, r0
 800e91a:	4603      	mov	r3, r0
 800e91c:	d10f      	bne.n	800e93e <__ieee754_sqrt+0x3a>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	f7f1 fdd9 	bl	80004d8 <__aeabi_dmul>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4630      	mov	r0, r6
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 fc1d 	bl	800016c <__adddf3>
 800e932:	4606      	mov	r6, r0
 800e934:	460d      	mov	r5, r1
 800e936:	4630      	mov	r0, r6
 800e938:	4629      	mov	r1, r5
 800e93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93e:	2900      	cmp	r1, #0
 800e940:	dc0e      	bgt.n	800e960 <__ieee754_sqrt+0x5c>
 800e942:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e946:	ea5c 0707 	orrs.w	r7, ip, r7
 800e94a:	d0f4      	beq.n	800e936 <__ieee754_sqrt+0x32>
 800e94c:	b141      	cbz	r1, 800e960 <__ieee754_sqrt+0x5c>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	f7f1 fc09 	bl	8000168 <__aeabi_dsub>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	f7f1 fee7 	bl	800072c <__aeabi_ddiv>
 800e95e:	e7e8      	b.n	800e932 <__ieee754_sqrt+0x2e>
 800e960:	1521      	asrs	r1, r4, #20
 800e962:	d075      	beq.n	800ea50 <__ieee754_sqrt+0x14c>
 800e964:	07cc      	lsls	r4, r1, #31
 800e966:	f04f 0400 	mov.w	r4, #0
 800e96a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e96e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e972:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e976:	bf5e      	ittt	pl
 800e978:	0fd9      	lsrpl	r1, r3, #31
 800e97a:	005b      	lslpl	r3, r3, #1
 800e97c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800e980:	0fd9      	lsrs	r1, r3, #31
 800e982:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e986:	2516      	movs	r5, #22
 800e988:	4620      	mov	r0, r4
 800e98a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e98e:	107f      	asrs	r7, r7, #1
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	1846      	adds	r6, r0, r1
 800e994:	4296      	cmp	r6, r2
 800e996:	bfde      	ittt	le
 800e998:	1b92      	suble	r2, r2, r6
 800e99a:	1870      	addle	r0, r6, r1
 800e99c:	1864      	addle	r4, r4, r1
 800e99e:	0052      	lsls	r2, r2, #1
 800e9a0:	3d01      	subs	r5, #1
 800e9a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e9a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e9aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9ae:	d1f0      	bne.n	800e992 <__ieee754_sqrt+0x8e>
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	f04f 0e20 	mov.w	lr, #32
 800e9b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e9ba:	4282      	cmp	r2, r0
 800e9bc:	eb06 0c05 	add.w	ip, r6, r5
 800e9c0:	dc02      	bgt.n	800e9c8 <__ieee754_sqrt+0xc4>
 800e9c2:	d113      	bne.n	800e9ec <__ieee754_sqrt+0xe8>
 800e9c4:	459c      	cmp	ip, r3
 800e9c6:	d811      	bhi.n	800e9ec <__ieee754_sqrt+0xe8>
 800e9c8:	f1bc 0f00 	cmp.w	ip, #0
 800e9cc:	eb0c 0506 	add.w	r5, ip, r6
 800e9d0:	da43      	bge.n	800ea5a <__ieee754_sqrt+0x156>
 800e9d2:	2d00      	cmp	r5, #0
 800e9d4:	db41      	blt.n	800ea5a <__ieee754_sqrt+0x156>
 800e9d6:	f100 0801 	add.w	r8, r0, #1
 800e9da:	1a12      	subs	r2, r2, r0
 800e9dc:	4640      	mov	r0, r8
 800e9de:	459c      	cmp	ip, r3
 800e9e0:	bf88      	it	hi
 800e9e2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e9e6:	eba3 030c 	sub.w	r3, r3, ip
 800e9ea:	4431      	add	r1, r6
 800e9ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e9f0:	f1be 0e01 	subs.w	lr, lr, #1
 800e9f4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800e9f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea00:	d1db      	bne.n	800e9ba <__ieee754_sqrt+0xb6>
 800ea02:	4313      	orrs	r3, r2
 800ea04:	d006      	beq.n	800ea14 <__ieee754_sqrt+0x110>
 800ea06:	1c48      	adds	r0, r1, #1
 800ea08:	bf0b      	itete	eq
 800ea0a:	4671      	moveq	r1, lr
 800ea0c:	3101      	addne	r1, #1
 800ea0e:	3401      	addeq	r4, #1
 800ea10:	f021 0101 	bicne.w	r1, r1, #1
 800ea14:	1063      	asrs	r3, r4, #1
 800ea16:	0849      	lsrs	r1, r1, #1
 800ea18:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ea1c:	07e2      	lsls	r2, r4, #31
 800ea1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ea22:	bf48      	it	mi
 800ea24:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ea28:	460e      	mov	r6, r1
 800ea2a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ea2e:	e782      	b.n	800e936 <__ieee754_sqrt+0x32>
 800ea30:	0ada      	lsrs	r2, r3, #11
 800ea32:	3815      	subs	r0, #21
 800ea34:	055b      	lsls	r3, r3, #21
 800ea36:	2a00      	cmp	r2, #0
 800ea38:	d0fa      	beq.n	800ea30 <__ieee754_sqrt+0x12c>
 800ea3a:	02d5      	lsls	r5, r2, #11
 800ea3c:	d50a      	bpl.n	800ea54 <__ieee754_sqrt+0x150>
 800ea3e:	f1c1 0420 	rsb	r4, r1, #32
 800ea42:	fa23 f404 	lsr.w	r4, r3, r4
 800ea46:	1e4d      	subs	r5, r1, #1
 800ea48:	408b      	lsls	r3, r1
 800ea4a:	4322      	orrs	r2, r4
 800ea4c:	1b41      	subs	r1, r0, r5
 800ea4e:	e789      	b.n	800e964 <__ieee754_sqrt+0x60>
 800ea50:	4608      	mov	r0, r1
 800ea52:	e7f0      	b.n	800ea36 <__ieee754_sqrt+0x132>
 800ea54:	0052      	lsls	r2, r2, #1
 800ea56:	3101      	adds	r1, #1
 800ea58:	e7ef      	b.n	800ea3a <__ieee754_sqrt+0x136>
 800ea5a:	4680      	mov	r8, r0
 800ea5c:	e7bd      	b.n	800e9da <__ieee754_sqrt+0xd6>
 800ea5e:	bf00      	nop
 800ea60:	7ff00000 	.word	0x7ff00000

0800ea64 <with_errno>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	460d      	mov	r5, r1
 800ea6a:	4616      	mov	r6, r2
 800ea6c:	f7fc f9c6 	bl	800adfc <__errno>
 800ea70:	4629      	mov	r1, r5
 800ea72:	6006      	str	r6, [r0, #0]
 800ea74:	4620      	mov	r0, r4
 800ea76:	bd70      	pop	{r4, r5, r6, pc}

0800ea78 <xflow>:
 800ea78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea7a:	4615      	mov	r5, r2
 800ea7c:	461c      	mov	r4, r3
 800ea7e:	b180      	cbz	r0, 800eaa2 <xflow+0x2a>
 800ea80:	4610      	mov	r0, r2
 800ea82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ea86:	e9cd 0100 	strd	r0, r1, [sp]
 800ea8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea8e:	4628      	mov	r0, r5
 800ea90:	4621      	mov	r1, r4
 800ea92:	f7f1 fd21 	bl	80004d8 <__aeabi_dmul>
 800ea96:	2222      	movs	r2, #34	; 0x22
 800ea98:	b003      	add	sp, #12
 800ea9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea9e:	f7ff bfe1 	b.w	800ea64 <with_errno>
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	e7ee      	b.n	800ea86 <xflow+0xe>

0800eaa8 <__math_uflow>:
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eaae:	f7ff bfe3 	b.w	800ea78 <xflow>

0800eab2 <__math_oflow>:
 800eab2:	2200      	movs	r2, #0
 800eab4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800eab8:	f7ff bfde 	b.w	800ea78 <xflow>
 800eabc:	0000      	movs	r0, r0
	...

0800eac0 <atan>:
 800eac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	4bb6      	ldr	r3, [pc, #728]	; (800eda0 <atan+0x2e0>)
 800eac6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eaca:	429e      	cmp	r6, r3
 800eacc:	4604      	mov	r4, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	468b      	mov	fp, r1
 800ead2:	dd17      	ble.n	800eb04 <atan+0x44>
 800ead4:	4bb3      	ldr	r3, [pc, #716]	; (800eda4 <atan+0x2e4>)
 800ead6:	429e      	cmp	r6, r3
 800ead8:	dc01      	bgt.n	800eade <atan+0x1e>
 800eada:	d109      	bne.n	800eaf0 <atan+0x30>
 800eadc:	b140      	cbz	r0, 800eaf0 <atan+0x30>
 800eade:	4622      	mov	r2, r4
 800eae0:	462b      	mov	r3, r5
 800eae2:	4620      	mov	r0, r4
 800eae4:	4629      	mov	r1, r5
 800eae6:	f7f1 fb41 	bl	800016c <__adddf3>
 800eaea:	4604      	mov	r4, r0
 800eaec:	460d      	mov	r5, r1
 800eaee:	e005      	b.n	800eafc <atan+0x3c>
 800eaf0:	f1bb 0f00 	cmp.w	fp, #0
 800eaf4:	4cac      	ldr	r4, [pc, #688]	; (800eda8 <atan+0x2e8>)
 800eaf6:	f300 8121 	bgt.w	800ed3c <atan+0x27c>
 800eafa:	4dac      	ldr	r5, [pc, #688]	; (800edac <atan+0x2ec>)
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb04:	4baa      	ldr	r3, [pc, #680]	; (800edb0 <atan+0x2f0>)
 800eb06:	429e      	cmp	r6, r3
 800eb08:	dc11      	bgt.n	800eb2e <atan+0x6e>
 800eb0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800eb0e:	429e      	cmp	r6, r3
 800eb10:	dc0a      	bgt.n	800eb28 <atan+0x68>
 800eb12:	a38b      	add	r3, pc, #556	; (adr r3, 800ed40 <atan+0x280>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	f7f1 fb28 	bl	800016c <__adddf3>
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	4ba5      	ldr	r3, [pc, #660]	; (800edb4 <atan+0x2f4>)
 800eb20:	f7f1 ff6a 	bl	80009f8 <__aeabi_dcmpgt>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d1e9      	bne.n	800eafc <atan+0x3c>
 800eb28:	f04f 3aff 	mov.w	sl, #4294967295
 800eb2c:	e027      	b.n	800eb7e <atan+0xbe>
 800eb2e:	f000 f951 	bl	800edd4 <fabs>
 800eb32:	4ba1      	ldr	r3, [pc, #644]	; (800edb8 <atan+0x2f8>)
 800eb34:	4604      	mov	r4, r0
 800eb36:	429e      	cmp	r6, r3
 800eb38:	460d      	mov	r5, r1
 800eb3a:	f300 80b8 	bgt.w	800ecae <atan+0x1ee>
 800eb3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eb42:	429e      	cmp	r6, r3
 800eb44:	f300 809c 	bgt.w	800ec80 <atan+0x1c0>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	f7f1 fb0e 	bl	800016c <__adddf3>
 800eb50:	2200      	movs	r2, #0
 800eb52:	4b98      	ldr	r3, [pc, #608]	; (800edb4 <atan+0x2f4>)
 800eb54:	f7f1 fb08 	bl	8000168 <__aeabi_dsub>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	460f      	mov	r7, r1
 800eb5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb62:	4620      	mov	r0, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	f7f1 fb01 	bl	800016c <__adddf3>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4630      	mov	r0, r6
 800eb70:	4639      	mov	r1, r7
 800eb72:	f7f1 fddb 	bl	800072c <__aeabi_ddiv>
 800eb76:	f04f 0a00 	mov.w	sl, #0
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	4622      	mov	r2, r4
 800eb80:	462b      	mov	r3, r5
 800eb82:	4620      	mov	r0, r4
 800eb84:	4629      	mov	r1, r5
 800eb86:	f7f1 fca7 	bl	80004d8 <__aeabi_dmul>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4680      	mov	r8, r0
 800eb90:	4689      	mov	r9, r1
 800eb92:	f7f1 fca1 	bl	80004d8 <__aeabi_dmul>
 800eb96:	a36c      	add	r3, pc, #432	; (adr r3, 800ed48 <atan+0x288>)
 800eb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	460f      	mov	r7, r1
 800eba0:	f7f1 fc9a 	bl	80004d8 <__aeabi_dmul>
 800eba4:	a36a      	add	r3, pc, #424	; (adr r3, 800ed50 <atan+0x290>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	f7f1 fadf 	bl	800016c <__adddf3>
 800ebae:	4632      	mov	r2, r6
 800ebb0:	463b      	mov	r3, r7
 800ebb2:	f7f1 fc91 	bl	80004d8 <__aeabi_dmul>
 800ebb6:	a368      	add	r3, pc, #416	; (adr r3, 800ed58 <atan+0x298>)
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	f7f1 fad6 	bl	800016c <__adddf3>
 800ebc0:	4632      	mov	r2, r6
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	f7f1 fc88 	bl	80004d8 <__aeabi_dmul>
 800ebc8:	a365      	add	r3, pc, #404	; (adr r3, 800ed60 <atan+0x2a0>)
 800ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebce:	f7f1 facd 	bl	800016c <__adddf3>
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	463b      	mov	r3, r7
 800ebd6:	f7f1 fc7f 	bl	80004d8 <__aeabi_dmul>
 800ebda:	a363      	add	r3, pc, #396	; (adr r3, 800ed68 <atan+0x2a8>)
 800ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe0:	f7f1 fac4 	bl	800016c <__adddf3>
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	f7f1 fc76 	bl	80004d8 <__aeabi_dmul>
 800ebec:	a360      	add	r3, pc, #384	; (adr r3, 800ed70 <atan+0x2b0>)
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	f7f1 fabb 	bl	800016c <__adddf3>
 800ebf6:	4642      	mov	r2, r8
 800ebf8:	464b      	mov	r3, r9
 800ebfa:	f7f1 fc6d 	bl	80004d8 <__aeabi_dmul>
 800ebfe:	a35e      	add	r3, pc, #376	; (adr r3, 800ed78 <atan+0x2b8>)
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	4680      	mov	r8, r0
 800ec06:	4689      	mov	r9, r1
 800ec08:	4630      	mov	r0, r6
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	f7f1 fc64 	bl	80004d8 <__aeabi_dmul>
 800ec10:	a35b      	add	r3, pc, #364	; (adr r3, 800ed80 <atan+0x2c0>)
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	f7f1 faa7 	bl	8000168 <__aeabi_dsub>
 800ec1a:	4632      	mov	r2, r6
 800ec1c:	463b      	mov	r3, r7
 800ec1e:	f7f1 fc5b 	bl	80004d8 <__aeabi_dmul>
 800ec22:	a359      	add	r3, pc, #356	; (adr r3, 800ed88 <atan+0x2c8>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	f7f1 fa9e 	bl	8000168 <__aeabi_dsub>
 800ec2c:	4632      	mov	r2, r6
 800ec2e:	463b      	mov	r3, r7
 800ec30:	f7f1 fc52 	bl	80004d8 <__aeabi_dmul>
 800ec34:	a356      	add	r3, pc, #344	; (adr r3, 800ed90 <atan+0x2d0>)
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	f7f1 fa95 	bl	8000168 <__aeabi_dsub>
 800ec3e:	4632      	mov	r2, r6
 800ec40:	463b      	mov	r3, r7
 800ec42:	f7f1 fc49 	bl	80004d8 <__aeabi_dmul>
 800ec46:	a354      	add	r3, pc, #336	; (adr r3, 800ed98 <atan+0x2d8>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 fa8c 	bl	8000168 <__aeabi_dsub>
 800ec50:	4632      	mov	r2, r6
 800ec52:	463b      	mov	r3, r7
 800ec54:	f7f1 fc40 	bl	80004d8 <__aeabi_dmul>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	4649      	mov	r1, r9
 800ec60:	f7f1 fa84 	bl	800016c <__adddf3>
 800ec64:	4622      	mov	r2, r4
 800ec66:	462b      	mov	r3, r5
 800ec68:	f7f1 fc36 	bl	80004d8 <__aeabi_dmul>
 800ec6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	d144      	bne.n	800ed00 <atan+0x240>
 800ec76:	4620      	mov	r0, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7f1 fa75 	bl	8000168 <__aeabi_dsub>
 800ec7e:	e734      	b.n	800eaea <atan+0x2a>
 800ec80:	2200      	movs	r2, #0
 800ec82:	4b4c      	ldr	r3, [pc, #304]	; (800edb4 <atan+0x2f4>)
 800ec84:	f7f1 fa70 	bl	8000168 <__aeabi_dsub>
 800ec88:	2200      	movs	r2, #0
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	460f      	mov	r7, r1
 800ec8e:	4620      	mov	r0, r4
 800ec90:	4629      	mov	r1, r5
 800ec92:	4b48      	ldr	r3, [pc, #288]	; (800edb4 <atan+0x2f4>)
 800ec94:	f7f1 fa6a 	bl	800016c <__adddf3>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	4639      	mov	r1, r7
 800eca0:	f7f1 fd44 	bl	800072c <__aeabi_ddiv>
 800eca4:	f04f 0a01 	mov.w	sl, #1
 800eca8:	4604      	mov	r4, r0
 800ecaa:	460d      	mov	r5, r1
 800ecac:	e767      	b.n	800eb7e <atan+0xbe>
 800ecae:	4b43      	ldr	r3, [pc, #268]	; (800edbc <atan+0x2fc>)
 800ecb0:	429e      	cmp	r6, r3
 800ecb2:	da1a      	bge.n	800ecea <atan+0x22a>
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4b42      	ldr	r3, [pc, #264]	; (800edc0 <atan+0x300>)
 800ecb8:	f7f1 fa56 	bl	8000168 <__aeabi_dsub>
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4606      	mov	r6, r0
 800ecc0:	460f      	mov	r7, r1
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	4b3e      	ldr	r3, [pc, #248]	; (800edc0 <atan+0x300>)
 800ecc8:	f7f1 fc06 	bl	80004d8 <__aeabi_dmul>
 800eccc:	2200      	movs	r2, #0
 800ecce:	4b39      	ldr	r3, [pc, #228]	; (800edb4 <atan+0x2f4>)
 800ecd0:	f7f1 fa4c 	bl	800016c <__adddf3>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4630      	mov	r0, r6
 800ecda:	4639      	mov	r1, r7
 800ecdc:	f7f1 fd26 	bl	800072c <__aeabi_ddiv>
 800ece0:	f04f 0a02 	mov.w	sl, #2
 800ece4:	4604      	mov	r4, r0
 800ece6:	460d      	mov	r5, r1
 800ece8:	e749      	b.n	800eb7e <atan+0xbe>
 800ecea:	4602      	mov	r2, r0
 800ecec:	460b      	mov	r3, r1
 800ecee:	2000      	movs	r0, #0
 800ecf0:	4934      	ldr	r1, [pc, #208]	; (800edc4 <atan+0x304>)
 800ecf2:	f7f1 fd1b 	bl	800072c <__aeabi_ddiv>
 800ecf6:	f04f 0a03 	mov.w	sl, #3
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	e73e      	b.n	800eb7e <atan+0xbe>
 800ed00:	4b31      	ldr	r3, [pc, #196]	; (800edc8 <atan+0x308>)
 800ed02:	4e32      	ldr	r6, [pc, #200]	; (800edcc <atan+0x30c>)
 800ed04:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ed08:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ed0c:	e9da 2300 	ldrd	r2, r3, [sl]
 800ed10:	f7f1 fa2a 	bl	8000168 <__aeabi_dsub>
 800ed14:	4622      	mov	r2, r4
 800ed16:	462b      	mov	r3, r5
 800ed18:	f7f1 fa26 	bl	8000168 <__aeabi_dsub>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ed24:	f7f1 fa20 	bl	8000168 <__aeabi_dsub>
 800ed28:	f1bb 0f00 	cmp.w	fp, #0
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	460d      	mov	r5, r1
 800ed30:	f6bf aee4 	bge.w	800eafc <atan+0x3c>
 800ed34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed38:	461d      	mov	r5, r3
 800ed3a:	e6df      	b.n	800eafc <atan+0x3c>
 800ed3c:	4d24      	ldr	r5, [pc, #144]	; (800edd0 <atan+0x310>)
 800ed3e:	e6dd      	b.n	800eafc <atan+0x3c>
 800ed40:	8800759c 	.word	0x8800759c
 800ed44:	7e37e43c 	.word	0x7e37e43c
 800ed48:	e322da11 	.word	0xe322da11
 800ed4c:	3f90ad3a 	.word	0x3f90ad3a
 800ed50:	24760deb 	.word	0x24760deb
 800ed54:	3fa97b4b 	.word	0x3fa97b4b
 800ed58:	a0d03d51 	.word	0xa0d03d51
 800ed5c:	3fb10d66 	.word	0x3fb10d66
 800ed60:	c54c206e 	.word	0xc54c206e
 800ed64:	3fb745cd 	.word	0x3fb745cd
 800ed68:	920083ff 	.word	0x920083ff
 800ed6c:	3fc24924 	.word	0x3fc24924
 800ed70:	5555550d 	.word	0x5555550d
 800ed74:	3fd55555 	.word	0x3fd55555
 800ed78:	2c6a6c2f 	.word	0x2c6a6c2f
 800ed7c:	bfa2b444 	.word	0xbfa2b444
 800ed80:	52defd9a 	.word	0x52defd9a
 800ed84:	3fadde2d 	.word	0x3fadde2d
 800ed88:	af749a6d 	.word	0xaf749a6d
 800ed8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ed90:	fe231671 	.word	0xfe231671
 800ed94:	3fbc71c6 	.word	0x3fbc71c6
 800ed98:	9998ebc4 	.word	0x9998ebc4
 800ed9c:	3fc99999 	.word	0x3fc99999
 800eda0:	440fffff 	.word	0x440fffff
 800eda4:	7ff00000 	.word	0x7ff00000
 800eda8:	54442d18 	.word	0x54442d18
 800edac:	bff921fb 	.word	0xbff921fb
 800edb0:	3fdbffff 	.word	0x3fdbffff
 800edb4:	3ff00000 	.word	0x3ff00000
 800edb8:	3ff2ffff 	.word	0x3ff2ffff
 800edbc:	40038000 	.word	0x40038000
 800edc0:	3ff80000 	.word	0x3ff80000
 800edc4:	bff00000 	.word	0xbff00000
 800edc8:	0800f400 	.word	0x0800f400
 800edcc:	0800f3e0 	.word	0x0800f3e0
 800edd0:	3ff921fb 	.word	0x3ff921fb

0800edd4 <fabs>:
 800edd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edd8:	4770      	bx	lr

0800edda <finite>:
 800edda:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800edde:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ede2:	0fc0      	lsrs	r0, r0, #31
 800ede4:	4770      	bx	lr
	...

0800ede8 <scalbn>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800edee:	4604      	mov	r4, r0
 800edf0:	460d      	mov	r5, r1
 800edf2:	4617      	mov	r7, r2
 800edf4:	460b      	mov	r3, r1
 800edf6:	b996      	cbnz	r6, 800ee1e <scalbn+0x36>
 800edf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800edfc:	4303      	orrs	r3, r0
 800edfe:	d039      	beq.n	800ee74 <scalbn+0x8c>
 800ee00:	4b33      	ldr	r3, [pc, #204]	; (800eed0 <scalbn+0xe8>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	f7f1 fb68 	bl	80004d8 <__aeabi_dmul>
 800ee08:	4b32      	ldr	r3, [pc, #200]	; (800eed4 <scalbn+0xec>)
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	429f      	cmp	r7, r3
 800ee0e:	460d      	mov	r5, r1
 800ee10:	da0f      	bge.n	800ee32 <scalbn+0x4a>
 800ee12:	a32b      	add	r3, pc, #172	; (adr r3, 800eec0 <scalbn+0xd8>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f7f1 fb5e 	bl	80004d8 <__aeabi_dmul>
 800ee1c:	e006      	b.n	800ee2c <scalbn+0x44>
 800ee1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ee22:	4296      	cmp	r6, r2
 800ee24:	d10a      	bne.n	800ee3c <scalbn+0x54>
 800ee26:	4602      	mov	r2, r0
 800ee28:	f7f1 f9a0 	bl	800016c <__adddf3>
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	460d      	mov	r5, r1
 800ee30:	e020      	b.n	800ee74 <scalbn+0x8c>
 800ee32:	460b      	mov	r3, r1
 800ee34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ee38:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ee3c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ee40:	19b9      	adds	r1, r7, r6
 800ee42:	4291      	cmp	r1, r2
 800ee44:	dd0e      	ble.n	800ee64 <scalbn+0x7c>
 800ee46:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ee4a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ee4e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ee52:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ee56:	4820      	ldr	r0, [pc, #128]	; (800eed8 <scalbn+0xf0>)
 800ee58:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ee5c:	a31a      	add	r3, pc, #104	; (adr r3, 800eec8 <scalbn+0xe0>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	e7d9      	b.n	800ee18 <scalbn+0x30>
 800ee64:	2900      	cmp	r1, #0
 800ee66:	dd08      	ble.n	800ee7a <scalbn+0x92>
 800ee68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ee74:	4620      	mov	r0, r4
 800ee76:	4629      	mov	r1, r5
 800ee78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee7a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ee7e:	da12      	bge.n	800eea6 <scalbn+0xbe>
 800ee80:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee84:	429f      	cmp	r7, r3
 800ee86:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ee8a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ee8e:	dcdc      	bgt.n	800ee4a <scalbn+0x62>
 800ee90:	a30b      	add	r3, pc, #44	; (adr r3, 800eec0 <scalbn+0xd8>)
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ee9a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ee9e:	480f      	ldr	r0, [pc, #60]	; (800eedc <scalbn+0xf4>)
 800eea0:	f041 011f 	orr.w	r1, r1, #31
 800eea4:	e7b8      	b.n	800ee18 <scalbn+0x30>
 800eea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eeaa:	3136      	adds	r1, #54	; 0x36
 800eeac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eeb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	2200      	movs	r2, #0
 800eeba:	4b09      	ldr	r3, [pc, #36]	; (800eee0 <scalbn+0xf8>)
 800eebc:	e7ac      	b.n	800ee18 <scalbn+0x30>
 800eebe:	bf00      	nop
 800eec0:	c2f8f359 	.word	0xc2f8f359
 800eec4:	01a56e1f 	.word	0x01a56e1f
 800eec8:	8800759c 	.word	0x8800759c
 800eecc:	7e37e43c 	.word	0x7e37e43c
 800eed0:	43500000 	.word	0x43500000
 800eed4:	ffff3cb0 	.word	0xffff3cb0
 800eed8:	8800759c 	.word	0x8800759c
 800eedc:	c2f8f359 	.word	0xc2f8f359
 800eee0:	3c900000 	.word	0x3c900000

0800eee4 <_init>:
 800eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee6:	bf00      	nop
 800eee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeea:	bc08      	pop	{r3}
 800eeec:	469e      	mov	lr, r3
 800eeee:	4770      	bx	lr

0800eef0 <_fini>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	bf00      	nop
 800eef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef6:	bc08      	pop	{r3}
 800eef8:	469e      	mov	lr, r3
 800eefa:	4770      	bx	lr
