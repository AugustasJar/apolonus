
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebc4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800ecd8  0800ecd8  0001ecd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f218  0800f218  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800f218  0800f218  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f218  0800f218  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f21c  0800f21c  0001f21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800f220  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000358  0800f574  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800f574  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b27  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003786  00000000  00000000  00035ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00039630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bda4  00000000  00000000  0003bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b72  00000000  00000000  000579e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917cb  00000000  00000000  00070556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101d21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066fc  00000000  00000000  00101d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ecbc 	.word	0x0800ecbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800ecbc 	.word	0x0800ecbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <encoder_init>:
 */


#include "encoder.h"

void encoder_init (encoder* Encoder,GPIO_TypeDef *GPIOAx, uint16_t pinA,GPIO_TypeDef *GPIOBx, uint16_t pinB, double encoder_step){
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]

	Encoder->GPIOAx = GPIOAx;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	609a      	str	r2, [r3, #8]
	Encoder->GPIOBx = GPIOBx;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	60da      	str	r2, [r3, #12]

	Encoder->pinA = pinA;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	809a      	strh	r2, [r3, #4]
	Encoder->pinB = pinB;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	8b3a      	ldrh	r2, [r7, #24]
 8000aee:	80da      	strh	r2, [r3, #6]
	Encoder->encoder_step = encoder_step;
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000af6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <encoder_update>:
void encoder_update(encoder *Encoder){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

			Encoder->ref_signal_A = HAL_GPIO_ReadPin(Encoder->GPIOAx,Encoder->pinA);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	889b      	ldrh	r3, [r3, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f001 fc94 	bl	8002444 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	801a      	strh	r2, [r3, #0]
			Encoder->ref_signal_B = HAL_GPIO_ReadPin(Encoder->GPIOBx,Encoder->pinB);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	88db      	ldrh	r3, [r3, #6]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f001 fc88 	bl	8002444 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	805a      	strh	r2, [r3, #2]

	    	if (Encoder->ref_signal_B >0)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d016      	beq.n	8000b72 <encoder_update+0x6e>
	    	{
	    		Encoder->raw_pos++;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	831a      	strh	r2, [r3, #24]
	    		Encoder->pos = Encoder->pos + Encoder->encoder_step;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b62:	f7ff fb03 	bl	800016c <__adddf3>
 8000b66:	4602      	mov	r2, r0
 8000b68:	460b      	mov	r3, r1
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    	else
	    	{
	    		Encoder->raw_pos--;
				Encoder->pos = Encoder->pos - Encoder->encoder_step;
	    	}
	    }
 8000b70:	e015      	b.n	8000b9e <encoder_update+0x9a>
	    		Encoder->raw_pos--;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	831a      	strh	r2, [r3, #24]
				Encoder->pos = Encoder->pos - Encoder->encoder_step;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b90:	f7ff faea 	bl	8000168 <__aeabi_dsub>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    }
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bac:	b0d8      	sub	sp, #352	; 0x160
 8000bae:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f001 f930 	bl	8001e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 fa0a 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 faf6 	bl	80011a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bbc:	f000 fa62 	bl	8001084 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000bc0:	f009 fb6c 	bl	800a29c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000bc4:	f000 fa8c 	bl	80010e0 <MX_TIM2_Init>
  char  buff2[128];
  uint32_t t1,t2;

  mpu6050_t mpu;
  uint16_t pwm;
  double Integral = 0;
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  double pos_Integral = 0;
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  double control = 0;
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  double dt = 0;
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  const double INTEGRAL_MAX = 60;
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	4ba8      	ldr	r3, [pc, #672]	; (8000ea0 <main+0x2f8>)
 8000bfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  const double th_bias = -0.058;
 8000c02:	a39b      	add	r3, pc, #620	; (adr r3, 8000e70 <main+0x2c8>)
 8000c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c08:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  double angle_error = 0;
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
  double prev_angle_error = 0;
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  double speed = 0;
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  //initialize pwm timer:

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c30:	2100      	movs	r1, #0
 8000c32:	489c      	ldr	r0, [pc, #624]	; (8000ea4 <main+0x2fc>)
 8000c34:	f004 fe20 	bl	8005878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c38:	2104      	movs	r1, #4
 8000c3a:	489a      	ldr	r0, [pc, #616]	; (8000ea4 <main+0x2fc>)
 8000c3c:	f004 fe1c 	bl	8005878 <HAL_TIM_PWM_Start>

  //counter period 65535


  //initializing encoder variables
  encoder_init(&encoderA,GPIOB,right_motor_A_Pin,GPIOB,right_motor_B_Pin,encoder_step);
 8000c40:	4b99      	ldr	r3, [pc, #612]	; (8000ea8 <main+0x300>)
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	4b97      	ldr	r3, [pc, #604]	; (8000eac <main+0x304>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	4996      	ldr	r1, [pc, #600]	; (8000eac <main+0x304>)
 8000c54:	4896      	ldr	r0, [pc, #600]	; (8000eb0 <main+0x308>)
 8000c56:	f7ff ff37 	bl	8000ac8 <encoder_init>
  encoder_init(&encoderB,GPIOB,left_motor_A_Pin,GPIOB,left_motor_B_Pin,encoder_step);
 8000c5a:	4b93      	ldr	r3, [pc, #588]	; (8000ea8 <main+0x300>)
 8000c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4b90      	ldr	r3, [pc, #576]	; (8000eac <main+0x304>)
 8000c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6e:	498f      	ldr	r1, [pc, #572]	; (8000eac <main+0x304>)
 8000c70:	4890      	ldr	r0, [pc, #576]	; (8000eb4 <main+0x30c>)
 8000c72:	f7ff ff29 	bl	8000ac8 <encoder_init>


  //wait for the mpu to init.
  while (mpu6050_init(&hi2c1) == 1) {
 8000c76:	e008      	b.n	8000c8a <main+0xe2>
		  HAL_Delay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f001 f92d 	bl	8001ed8 <HAL_Delay>
		  sprintf(buff2,"waiting for the imu to boot, \r\n");
 8000c7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c82:	498d      	ldr	r1, [pc, #564]	; (8000eb8 <main+0x310>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00a fc37 	bl	800b4f8 <siprintf>
  while (mpu6050_init(&hi2c1) == 1) {
 8000c8a:	488c      	ldr	r0, [pc, #560]	; (8000ebc <main+0x314>)
 8000c8c:	f000 fc5d 	bl	800154a <mpu6050_init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d0f0      	beq.n	8000c78 <main+0xd0>
  }
  mpu6050_tune(&hi2c1,&mpu);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4888      	ldr	r0, [pc, #544]	; (8000ebc <main+0x314>)
 8000c9c:	f000 fcbc 	bl	8001618 <mpu6050_tune>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  t1 = HAL_GetTick();
 8000ca0:	f001 f910 	bl	8001ec4 <HAL_GetTick>
 8000ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	  HAL_Delay(10);
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f001 f915 	bl	8001ed8 <HAL_Delay>
	  mpu6050_read(&hi2c1,&mpu);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4882      	ldr	r0, [pc, #520]	; (8000ebc <main+0x314>)
 8000cb4:	f000 fd5c 	bl	8001770 <mpu6050_read>
	  t2 = HAL_GetTick();
 8000cb8:	f001 f904 	bl	8001ec4 <HAL_GetTick>
 8000cbc:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	  dt = ((double)(t2 - t1))/1000;
 8000cc0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fb8a 	bl	80003e4 <__aeabi_ui2d>
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	4b7a      	ldr	r3, [pc, #488]	; (8000ec0 <main+0x318>)
 8000cd6:	f7ff fd29 	bl	800072c <__aeabi_ddiv>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  mpu6050_complimentary(&mpu,dt);
 8000ce2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8000ce6:	f7ff fecf 	bl	8000a88 <__aeabi_d2uiz>
 8000cea:	4602      	mov	r2, r0
 8000cec:	463b      	mov	r3, r7
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fe39 	bl	8001968 <mpu6050_complimentary>
	  encoderA.pos = 0;
 8000cf6:	496e      	ldr	r1, [pc, #440]	; (8000eb0 <main+0x308>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  encoderA.raw_pos =0;
 8000d04:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <main+0x308>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	831a      	strh	r2, [r3, #24]
	  angle_error = mpu.th + th_bias;
 8000d0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000d0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000d12:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000d16:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000d1a:	f7ff fa27 	bl	800016c <__adddf3>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	  speed = encoderA.pos - encoderA.last_pos;
 8000d26:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <main+0x308>)
 8000d28:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000d2c:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <main+0x308>)
 8000d2e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000d32:	f7ff fa19 	bl	8000168 <__aeabi_dsub>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	  // apply control only if the system is upright
	  if (angle_error < MAX_ANGLE && angle_error > (-1*MAX_ANGLE)) {
 8000d3e:	a34e      	add	r3, pc, #312	; (adr r3, 8000e78 <main+0x2d0>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000d48:	f7ff fe38 	bl	80009bc <__aeabi_dcmplt>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 80f8 	beq.w	8000f44 <main+0x39c>
 8000d54:	a34a      	add	r3, pc, #296	; (adr r3, 8000e80 <main+0x2d8>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000d5e:	f7ff fe4b 	bl	80009f8 <__aeabi_dcmpgt>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80ed 	beq.w	8000f44 <main+0x39c>
		  //integral anti-windup
		  	if (Integral < INTEGRAL_MAX && Integral > -1*INTEGRAL_MAX ) {
 8000d6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000d6e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8000d72:	f7ff fe23 	bl	80009bc <__aeabi_dcmplt>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d027      	beq.n	8000dcc <main+0x224>
 8000d7c:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8000d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d84:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000d88:	4622      	mov	r2, r4
 8000d8a:	462b      	mov	r3, r5
 8000d8c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8000d90:	f7ff fe32 	bl	80009f8 <__aeabi_dcmpgt>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d018      	beq.n	8000dcc <main+0x224>
		  		Integral = Integral + Ki*angle_error*dt;
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <main+0x31c>)
 8000da0:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000da4:	f7ff fb98 	bl	80004d8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000db4:	f7ff fb90 	bl	80004d8 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8000dc0:	f7ff f9d4 	bl	800016c <__adddf3>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		  	}
		  	//
		  	if (angle_error < 0.05 && angle_error > (-0.05)) {
 8000dcc:	a32e      	add	r3, pc, #184	; (adr r3, 8000e88 <main+0x2e0>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000dd6:	f7ff fdf1 	bl	80009bc <__aeabi_dcmplt>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d075      	beq.n	8000ecc <main+0x324>
 8000de0:	a32b      	add	r3, pc, #172	; (adr r3, 8000e90 <main+0x2e8>)
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000dea:	f7ff fe05 	bl	80009f8 <__aeabi_dcmpgt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d06b      	beq.n	8000ecc <main+0x324>
		  		control = Kp*angle_error + Integral + Kd*(angle_error - prev_angle_error)/dt + Kp_pos*speed;
 8000df4:	a328      	add	r3, pc, #160	; (adr r3, 8000e98 <main+0x2f0>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000dfe:	f7ff fb6b 	bl	80004d8 <__aeabi_dmul>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000e0e:	f7ff f9ad 	bl	800016c <__adddf3>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4690      	mov	r8, r2
 8000e18:	4699      	mov	r9, r3
 8000e1a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000e1e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000e22:	f7ff f9a1 	bl	8000168 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e32:	f7ff fc7b 	bl	800072c <__aeabi_ddiv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	f7ff f995 	bl	800016c <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4690      	mov	r8, r2
 8000e48:	4699      	mov	r9, r3
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <main+0x320>)
 8000e50:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8000e54:	f7ff fb40 	bl	80004d8 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4649      	mov	r1, r9
 8000e60:	f7ff f984 	bl	800016c <__adddf3>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8000e6c:	e059      	b.n	8000f22 <main+0x37a>
 8000e6e:	bf00      	nop
 8000e70:	0e560419 	.word	0x0e560419
 8000e74:	bfadb22d 	.word	0xbfadb22d
 8000e78:	33333333 	.word	0x33333333
 8000e7c:	3fd33333 	.word	0x3fd33333
 8000e80:	33333333 	.word	0x33333333
 8000e84:	bfd33333 	.word	0xbfd33333
 8000e88:	9999999a 	.word	0x9999999a
 8000e8c:	3fa99999 	.word	0x3fa99999
 8000e90:	9999999a 	.word	0x9999999a
 8000e94:	bfa99999 	.word	0xbfa99999
 8000e98:	00000000 	.word	0x00000000
 8000e9c:	4062c000 	.word	0x4062c000
 8000ea0:	404e0000 	.word	0x404e0000
 8000ea4:	200003c8 	.word	0x200003c8
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	20000410 	.word	0x20000410
 8000eb4:	20000448 	.word	0x20000448
 8000eb8:	0800ecd8 	.word	0x0800ecd8
 8000ebc:	20000374 	.word	0x20000374
 8000ec0:	408f4000 	.word	0x408f4000
 8000ec4:	407f4000 	.word	0x407f4000
 8000ec8:	40590000 	.word	0x40590000
		  	} else {
		  		control = Kp*angle_error + Integral + Kd*(angle_error - prev_angle_error)/dt; //+ Kp_pos*encoderA.pos + Ki_pos*pos_Integral;
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <main+0x418>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000ed6:	f7ff faff 	bl	80004d8 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000ee6:	f7ff f941 	bl	800016c <__adddf3>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4690      	mov	r8, r2
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8000ef6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000efa:	f7ff f935 	bl	8000168 <__aeabi_dsub>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f0a:	f7ff fc0f 	bl	800072c <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4640      	mov	r0, r8
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f929 	bl	800016c <__adddf3>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
		  	}
			prev_angle_error = angle_error;
 8000f22:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8000f26:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			pos_Integral = 0;
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
		  	motor(control,control);
 8000f36:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000f3a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8000f3e:	f000 f9c7 	bl	80012d0 <motor>
 8000f42:	e01b      	b.n	8000f7c <main+0x3d4>
	  }
	  else {
		  Integral = 0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		  pos_Integral = 0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
		  control = 0;
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
		  motor(0,0);
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	f04f 0000 	mov.w	r0, #0
 8000f74:	f04f 0100 	mov.w	r1, #0
 8000f78:	f000 f9aa 	bl	80012d0 <motor>
	  }
	  sprintf(buff2,"angle: %f, control: %f,Integral: %lf, dt: %f \r\n",angle_error,control,Integral,dt);
 8000f7c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000f80:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000f84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f88:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f90:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8000f94:	e9cd 2300 	strd	r2, r3, [sp]
 8000f98:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8000f9c:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <main+0x420>)
 8000f9e:	f00a faab 	bl	800b4f8 <siprintf>
	  CDC_Transmit_FS((uint8_t*) buff2, strlen(buff2));
 8000fa2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f8d2 	bl	8000150 <strlen>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f009 fa2f 	bl	800a418 <CDC_Transmit_FS>
  {
 8000fba:	e671      	b.n	8000ca0 <main+0xf8>
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	4062c000 	.word	0x4062c000
 8000fc8:	0800ecf8 	.word	0x0800ecf8

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd6:	2228      	movs	r2, #40	; 0x28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f009 fe24 	bl	800ac28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800101a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001024:	4618      	mov	r0, r3
 8001026:	f003 ff19 	bl	8004e5c <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001030:	f000 fa86 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f985 	bl	8005360 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800105c:	f000 fa70 	bl	8001540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001060:	2310      	movs	r3, #16
 8001062:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fafe 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001076:	f000 fa63 	bl	8001540 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3750      	adds	r7, #80	; 0x50
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f001 fa07 	bl	80024d4 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 fa38 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000374 	.word	0x20000374
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_TIM2_Init+0xc4>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800112a:	481e      	ldr	r0, [pc, #120]	; (80011a4 <MX_TIM2_Init+0xc4>)
 800112c:	f004 fb54 	bl	80057d8 <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001136:	f000 fa03 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4619      	mov	r1, r3
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <MX_TIM2_Init+0xc4>)
 800114a:	f004 ff03 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001154:	f000 f9f4 	bl	8001540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001170:	f004 fc24 	bl	80059bc <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 f9e1 	bl	8001540 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2204      	movs	r2, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001186:	f004 fc19 	bl	80059bc <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001190:	f000 f9d6 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM2_Init+0xc4>)
 8001196:	f000 fcd3 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200003c8 	.word	0x200003c8

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <MX_GPIO_Init+0xe4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a32      	ldr	r2, [pc, #200]	; (800128c <MX_GPIO_Init+0xe4>)
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <MX_GPIO_Init+0xe4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0xe4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a2c      	ldr	r2, [pc, #176]	; (800128c <MX_GPIO_Init+0xe4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0xe4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_GPIO_Init+0xe4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <MX_GPIO_Init+0xe4>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_GPIO_Init+0xe4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin|right_motor_dir_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	210c      	movs	r1, #12
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <MX_GPIO_Init+0xe8>)
 800120a:	f001 f932 	bl	8002472 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : left_motor_dir_Pin right_motor_dir_Pin */
  GPIO_InitStruct.Pin = left_motor_dir_Pin|right_motor_dir_Pin;
 800120e:	230c      	movs	r3, #12
 8001210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2302      	movs	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	481a      	ldr	r0, [pc, #104]	; (8001290 <MX_GPIO_Init+0xe8>)
 8001226:	f000 ff89 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : left_motor_B_Pin right_motor_A_Pin right_motor_B_Pin left_motor_A_Pin */
  GPIO_InitStruct.Pin = left_motor_B_Pin|right_motor_A_Pin|right_motor_B_Pin|left_motor_A_Pin;
 800122a:	f240 2307 	movw	r3, #519	; 0x207
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_GPIO_Init+0xec>)
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	; (8001298 <MX_GPIO_Init+0xf0>)
 8001240:	f000 ff7c 	bl	800213c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2006      	movs	r0, #6
 800124a:	f000 ff40 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800124e:	2006      	movs	r0, #6
 8001250:	f000 ff59 	bl	8002106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2007      	movs	r0, #7
 800125a:	f000 ff38 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800125e:	2007      	movs	r0, #7
 8001260:	f000 ff51 	bl	8002106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2008      	movs	r0, #8
 800126a:	f000 ff30 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800126e:	2008      	movs	r0, #8
 8001270:	f000 ff49 	bl	8002106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2017      	movs	r0, #23
 800127a:	f000 ff28 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127e:	2017      	movs	r0, #23
 8001280:	f000 ff41 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	10110000 	.word	0x10110000
 8001298:	40010c00 	.word	0x40010c00

0800129c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == right_motor_A_Pin) {
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d102      	bne.n	80012b2 <HAL_GPIO_EXTI_Callback+0x16>
    	encoder_update(&encoderA);
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80012ae:	f7ff fc29 	bl	8000b04 <encoder_update>
    }
    if (GPIO_Pin == left_motor_A_Pin){
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b8:	d102      	bne.n	80012c0 <HAL_GPIO_EXTI_Callback+0x24>
    	encoder_update(&encoderB);
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <HAL_GPIO_EXTI_Callback+0x30>)
 80012bc:	f7ff fc22 	bl	8000b04 <encoder_update>
    }

}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000410 	.word	0x20000410
 80012cc:	20000448 	.word	0x20000448

080012d0 <motor>:
// takes input from -100 to 100.
void motor(double L, double R) {
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80012da:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// constrain the inputs
	L = L > 100 ? 100 : L;
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b93      	ldr	r3, [pc, #588]	; (8001530 <motor+0x260>)
 80012e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e8:	f7ff fb86 	bl	80009f8 <__aeabi_dcmpgt>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <motor+0x2a>
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b8e      	ldr	r3, [pc, #568]	; (8001530 <motor+0x260>)
 80012f8:	e001      	b.n	80012fe <motor+0x2e>
 80012fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R > 100 ? 100 : R;
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <motor+0x260>)
 8001308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130c:	f7ff fb74 	bl	80009f8 <__aeabi_dcmpgt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <motor+0x4e>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <motor+0x260>)
 800131c:	e001      	b.n	8001322 <motor+0x52>
 800131e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001322:	e9c7 2302 	strd	r2, r3, [r7, #8]
	L = L < -100 ? -100 : L;
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <motor+0x264>)
 800132c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001330:	f7ff fb44 	bl	80009bc <__aeabi_dcmplt>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <motor+0x72>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <motor+0x264>)
 8001340:	e001      	b.n	8001346 <motor+0x76>
 8001342:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001346:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R < -100 ? -100 : R;
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b79      	ldr	r3, [pc, #484]	; (8001534 <motor+0x264>)
 8001350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001354:	f7ff fb32 	bl	80009bc <__aeabi_dcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <motor+0x96>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <motor+0x264>)
 8001364:	e001      	b.n	800136a <motor+0x9a>
 8001366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//change the direction pin.
	if (L < 0) {
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800137a:	f7ff fb1f 	bl	80009bc <__aeabi_dcmplt>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00f      	beq.n	80013a4 <motor+0xd4>
		HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2104      	movs	r1, #4
 8001388:	486b      	ldr	r0, [pc, #428]	; (8001538 <motor+0x268>)
 800138a:	f001 f872 	bl	8002472 <HAL_GPIO_WritePin>
		L = -1*L;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800139e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80013a2:	e004      	b.n	80013ae <motor+0xde>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, left_motor_dir_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2104      	movs	r1, #4
 80013a8:	4863      	ldr	r0, [pc, #396]	; (8001538 <motor+0x268>)
 80013aa:	f001 f862 	bl	8002472 <HAL_GPIO_WritePin>
	}
	if (R > 0) {
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ba:	f7ff fb1d 	bl	80009f8 <__aeabi_dcmpgt>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <motor+0x100>
		HAL_GPIO_WritePin(GPIOA, right_motor_dir_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2108      	movs	r1, #8
 80013c8:	485b      	ldr	r0, [pc, #364]	; (8001538 <motor+0x268>)
 80013ca:	f001 f852 	bl	8002472 <HAL_GPIO_WritePin>
 80013ce:	e00a      	b.n	80013e6 <motor+0x116>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, right_motor_dir_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2108      	movs	r1, #8
 80013d4:	4858      	ldr	r0, [pc, #352]	; (8001538 <motor+0x268>)
 80013d6:	f001 f84c 	bl	8002472 <HAL_GPIO_WritePin>
		R = -1*R;
 80013da:	68bc      	ldr	r4, [r7, #8]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013e2:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	//deadzone compensation
	L = L > 1 && L < MOTOR_DEADZONE  ? MOTOR_DEADZONE : L;
 80013e6:	2301      	movs	r3, #1
 80013e8:	461c      	mov	r4, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <motor+0x26c>)
 80013f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013f4:	f7ff fb00 	bl	80009f8 <__aeabi_dcmpgt>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <motor+0x132>
 80013fe:	2300      	movs	r3, #0
 8001400:	461c      	mov	r4, r3
 8001402:	b2e3      	uxtb	r3, r4
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <motor+0x166>
 800140e:	2301      	movs	r3, #1
 8001410:	461c      	mov	r4, r3
 8001412:	a343      	add	r3, pc, #268	; (adr r3, 8001520 <motor+0x250>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800141c:	f7ff face 	bl	80009bc <__aeabi_dcmplt>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <motor+0x15a>
 8001426:	2300      	movs	r3, #0
 8001428:	461c      	mov	r4, r3
 800142a:	b2e3      	uxtb	r3, r4
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <motor+0x16c>
 8001436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143a:	e002      	b.n	8001442 <motor+0x172>
 800143c:	a338      	add	r3, pc, #224	; (adr r3, 8001520 <motor+0x250>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R > 1 && R < MOTOR_DEADZONE  ? MOTOR_DEADZONE : R;
 8001446:	2301      	movs	r3, #1
 8001448:	461c      	mov	r4, r3
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <motor+0x26c>)
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <motor+0x192>
 800145e:	2300      	movs	r3, #0
 8001460:	461c      	mov	r4, r3
 8001462:	b2e3      	uxtb	r3, r4
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d113      	bne.n	8001496 <motor+0x1c6>
 800146e:	2301      	movs	r3, #1
 8001470:	461c      	mov	r4, r3
 8001472:	a32b      	add	r3, pc, #172	; (adr r3, 8001520 <motor+0x250>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800147c:	f7ff fa9e 	bl	80009bc <__aeabi_dcmplt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <motor+0x1ba>
 8001486:	2300      	movs	r3, #0
 8001488:	461c      	mov	r4, r3
 800148a:	b2e3      	uxtb	r3, r4
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <motor+0x1cc>
 8001496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800149a:	e002      	b.n	80014a2 <motor+0x1d2>
 800149c:	a320      	add	r3, pc, #128	; (adr r3, 8001520 <motor+0x250>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//convert to pwm tick count
	L = L*PWM_CONV;
 80014a6:	a320      	add	r3, pc, #128	; (adr r3, 8001528 <motor+0x258>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b0:	f7ff f812 	bl	80004d8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <motor+0x260>)
 80014c2:	f7ff f933 	bl	800072c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	R = R*PWM_CONV;
 80014ce:	a316      	add	r3, pc, #88	; (adr r3, 8001528 <motor+0x258>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014d8:	f7fe fffe 	bl	80004d8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <motor+0x260>)
 80014ea:	f7ff f91f 	bl	800072c <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//write to timers.
	TIM2->CCR2 = R;
 80014f6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80014fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014fe:	f7ff fac3 	bl	8000a88 <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR1 = L;
 8001506:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800150a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800150e:	f7ff fabb 	bl	8000a88 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	bf00      	nop
 8001520:	47ae147b 	.word	0x47ae147b
 8001524:	3f847ae1 	.word	0x3f847ae1
 8001528:	00000000 	.word	0x00000000
 800152c:	40efffe0 	.word	0x40efffe0
 8001530:	40590000 	.word	0x40590000
 8001534:	c0590000 	.word	0xc0590000
 8001538:	40010800 	.word	0x40010800
 800153c:	3ff00000 	.word	0x3ff00000

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>

0800154a <mpu6050_init>:
#define GYRO_XOUT_H_REG 0x43
#define PI 3.14159265359
#define rad2deg  57.29567015
const uint8_t TIMEOUT = 100;
// initialization function, returns 0 if successful, otherwise 1.
uint8_t mpu6050_init(I2C_HandleTypeDef *I2Cx){
 800154a:	b580      	push	{r7, lr}
 800154c:	b088      	sub	sp, #32
 800154e:	af04      	add	r7, sp, #16
 8001550:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, TIMEOUT);
 8001552:	2364      	movs	r3, #100	; 0x64
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2301      	movs	r3, #1
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f107 030f 	add.w	r3, r7, #15
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	2275      	movs	r2, #117	; 0x75
 8001564:	21d0      	movs	r1, #208	; 0xd0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f001 f9f2 	bl	8002950 <HAL_I2C_Mem_Read>

    if (check == 104) // waiting for init flag.
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b68      	cmp	r3, #104	; 0x68
 8001570:	d14c      	bne.n	800160c <mpu6050_init+0xc2>
    {
        // reset internal registers, set to use internal 8MHz clock.
        data = 0b00000000;
 8001572:	2300      	movs	r3, #0
 8001574:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, TIMEOUT);
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	2301      	movs	r3, #1
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	f107 030e 	add.w	r3, r7, #14
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	226b      	movs	r2, #107	; 0x6b
 8001588:	21d0      	movs	r1, #208	; 0xd0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f001 f8e6 	bl	800275c <HAL_I2C_Mem_Write>

        // set the sample rate divider to 1kHz
        data = 0x07;
 8001590:	2307      	movs	r3, #7
 8001592:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, TIMEOUT);
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	f107 030e 	add.w	r3, r7, #14
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	2219      	movs	r2, #25
 80015a6:	21d0      	movs	r1, #208	; 0xd0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f001 f8d7 	bl	800275c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        data = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f107 030e 	add.w	r3, r7, #14
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	221c      	movs	r2, #28
 80015c4:	21d0      	movs	r1, #208	; 0xd0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f8c8 	bl	800275c <HAL_I2C_Mem_Write>

        // low pass filter configuration.
        // set to 260Hz bandwith for minimum delay.
        data = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	f107 030e 	add.w	r3, r7, #14
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	221b      	movs	r2, #27
 80015e2:	21d0      	movs	r1, #208	; 0xd0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f001 f8b9 	bl	800275c <HAL_I2C_Mem_Write>

        //set the lowpass filter to 100Hz;
        data = 0b0000010;
 80015ea:	2302      	movs	r3, #2
 80015ec:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, LOWPASS_CONFIG_REG, 1, &data, 1, TIMEOUT);
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2301      	movs	r3, #1
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	f107 030e 	add.w	r3, r7, #14
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	221a      	movs	r2, #26
 8001600:	21d0      	movs	r1, #208	; 0xd0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 f8aa 	bl	800275c <HAL_I2C_Mem_Write>
        return 0;
 8001608:	2300      	movs	r3, #0
 800160a:	e000      	b.n	800160e <mpu6050_init+0xc4>
    }
    return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <mpu6050_tune>:
// calculates gyroscope bias
void mpu6050_tune(I2C_HandleTypeDef *I2Cx, mpu6050_t *dataStore) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af04      	add	r7, sp, #16
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]

	uint8_t tempData[6];
	int16_t i= 1,i_max = 500;
 8001622:	2301      	movs	r3, #1
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800162a:	82bb      	strh	r3, [r7, #20]
	int16_t x,y,z;

	dataStore->K_gyr = 0.9;
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	a34c      	add	r3, pc, #304	; (adr r3, 8001760 <mpu6050_tune+0x148>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	dataStore->K_acc = 1-dataStore->K_gyr;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800163e:	f04f 0000 	mov.w	r0, #0
 8001642:	4949      	ldr	r1, [pc, #292]	; (8001768 <mpu6050_tune+0x150>)
 8001644:	f7fe fd90 	bl	8000168 <__aeabi_dsub>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	dataStore->th_prev = 0;
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	dataStore->gyro_x_raw_bias = 0;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	819a      	strh	r2, [r3, #12]
	dataStore->gyro_y_raw_bias = 0;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	81da      	strh	r2, [r3, #14]
	dataStore->gyro_z_raw_bias = 0;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	821a      	strh	r2, [r3, #16]

	// delay to help ensure no physical actions required to reset the device impact the tuning.
	while (i <= i_max) {
 8001672:	e069      	b.n	8001748 <mpu6050_tune+0x130>
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, &tempData, 6, TIMEOUT);
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2306      	movs	r3, #6
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	2243      	movs	r2, #67	; 0x43
 8001686:	21d0      	movs	r1, #208	; 0xd0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f001 f961 	bl	8002950 <HAL_I2C_Mem_Read>

		x = (int16_t)(tempData[0] << 8 | tempData[1]);
 800168e:	7a3b      	ldrb	r3, [r7, #8]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7a7b      	ldrb	r3, [r7, #9]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	827b      	strh	r3, [r7, #18]
		y = (int16_t)(tempData[2] << 8 | tempData[3]);
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	823b      	strh	r3, [r7, #16]
		z = (int16_t)(tempData[4] << 8 | tempData[5]);
 80016aa:	7b3b      	ldrb	r3, [r7, #12]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	81fb      	strh	r3, [r7, #14]

		//iterative mean update.
		dataStore->gyro_x_raw_bias = dataStore->gyro_x_raw_bias + (x - dataStore->gyro_x_raw_bias)/(i+1);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80016ca:	1a59      	subs	r1, r3, r1
 80016cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016d0:	3301      	adds	r3, #1
 80016d2:	fb91 f3f3 	sdiv	r3, r1, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	819a      	strh	r2, [r3, #12]
		dataStore->gyro_y_raw_bias = dataStore->gyro_y_raw_bias + (y - dataStore->gyro_y_raw_bias)/(i+1);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016ee:	6839      	ldr	r1, [r7, #0]
 80016f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016f4:	1a59      	subs	r1, r3, r1
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	3301      	adds	r3, #1
 80016fc:	fb91 f3f3 	sdiv	r3, r1, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	b21a      	sxth	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	81da      	strh	r2, [r3, #14]
		dataStore->gyro_z_raw_bias = dataStore->gyro_z_raw_bias + (z - dataStore->gyro_z_raw_bias)/(i+1);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001712:	b29a      	uxth	r2, r3
 8001714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 800171e:	1a59      	subs	r1, r3, r1
 8001720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001724:	3301      	adds	r3, #1
 8001726:	fb91 f3f3 	sdiv	r3, r1, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21a      	sxth	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	821a      	strh	r2, [r3, #16]
		i++;
 8001736:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(10);
 8001742:	200a      	movs	r0, #10
 8001744:	f000 fbc8 	bl	8001ed8 <HAL_Delay>
	while (i <= i_max) {
 8001748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800174c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	dd8f      	ble.n	8001674 <mpu6050_tune+0x5c>
	}

}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	cccccccd 	.word	0xcccccccd
 8001764:	3feccccc 	.word	0x3feccccc
 8001768:	3ff00000 	.word	0x3ff00000
 800176c:	00000000 	.word	0x00000000

08001770 <mpu6050_read>:
void mpu6050_read(I2C_HandleTypeDef *I2Cx, mpu6050_t *dataStore) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af04      	add	r7, sp, #16
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]

	uint8_t tempData[14];
	const double AccLsbSensitivity = 16384; // conversion factor to g, based on config.
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b78      	ldr	r3, [pc, #480]	; (8001960 <mpu6050_read+0x1f0>)
 8001780:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double gyroLsbSensitivity = 131; // conversion factor to rad/s
 8001784:	a372      	add	r3, pc, #456	; (adr r3, 8001950 <mpu6050_read+0x1e0>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	dataStore->x_prev = dataStore->gx;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	// read 14 data registers in a row.
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, &tempData, 14, TIMEOUT);
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	230e      	movs	r3, #14
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	223b      	movs	r2, #59	; 0x3b
 80017ac:	21d0      	movs	r1, #208	; 0xd0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 f8ce 	bl	8002950 <HAL_I2C_Mem_Read>

	/*
		one measurement is 16bits, but stored in two 8bit registers,
		therefore, they need to be concatenated.
	*/
	dataStore->acc_x_raw = (int16_t)(tempData[0] << 8 | tempData[1]);
 80017b4:	7a3b      	ldrb	r3, [r7, #8]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	7a7b      	ldrb	r3, [r7, #9]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	801a      	strh	r2, [r3, #0]
	dataStore->acc_y_raw = (int16_t)(tempData[2] << 8 | tempData[3]);
 80017c6:	7abb      	ldrb	r3, [r7, #10]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	805a      	strh	r2, [r3, #2]
	dataStore->acc_z_raw = (int16_t)(tempData[4] << 8 | tempData[5]);
 80017d8:	7b3b      	ldrb	r3, [r7, #12]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	809a      	strh	r2, [r3, #4]

	dataStore->temp_raw = (int16_t)(tempData[6] << 8 | tempData[7]);
 80017ea:	7bbb      	ldrb	r3, [r7, #14]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	825a      	strh	r2, [r3, #18]

	dataStore->gyro_x_raw = (int16_t)(tempData[8] << 8 | tempData[9]) - dataStore->gyro_x_raw_bias;
 80017fc:	7c3b      	ldrb	r3, [r7, #16]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	7c7b      	ldrb	r3, [r7, #17]
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b21b      	sxth	r3, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001812:	b29b      	uxth	r3, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	b21a      	sxth	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	80da      	strh	r2, [r3, #6]
	dataStore->gyro_y_raw = (int16_t)(tempData[10] << 8 | tempData[11]) - dataStore->gyro_y_raw_bias;
 800181e:	7cbb      	ldrb	r3, [r7, #18]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	7cfb      	ldrb	r3, [r7, #19]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001834:	b29b      	uxth	r3, r3
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21a      	sxth	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	811a      	strh	r2, [r3, #8]
	dataStore->gyro_z_raw = (int16_t)(tempData[12] << 8 | tempData[13]) - dataStore->gyro_z_raw_bias;
 8001840:	7d3b      	ldrb	r3, [r7, #20]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7d7b      	ldrb	r3, [r7, #21]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	b29a      	uxth	r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001856:	b29b      	uxth	r3, r3
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	815a      	strh	r2, [r3, #10]

	//convert to g
	dataStore->ax = ((double)dataStore->acc_x_raw)/AccLsbSensitivity;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fdcb 	bl	8000404 <__aeabi_i2d>
 800186e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001872:	f7fe ff5b 	bl	800072c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dataStore->ay = ((double)dataStore->acc_y_raw/AccLsbSensitivity);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdbc 	bl	8000404 <__aeabi_i2d>
 800188c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001890:	f7fe ff4c 	bl	800072c <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dataStore->az = ((double)dataStore->acc_z_raw/AccLsbSensitivity);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdad 	bl	8000404 <__aeabi_i2d>
 80018aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ae:	f7fe ff3d 	bl	800072c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// convert to Celsius
	dataStore->temp = (double)(dataStore->temp_raw/340 + 36.53);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018c2:	4a28      	ldr	r2, [pc, #160]	; (8001964 <mpu6050_read+0x1f4>)
 80018c4:	fb82 1203 	smull	r1, r2, r2, r3
 80018c8:	11d2      	asrs	r2, r2, #7
 80018ca:	17db      	asrs	r3, r3, #31
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fd97 	bl	8000404 <__aeabi_i2d>
 80018d6:	a320      	add	r3, pc, #128	; (adr r3, 8001958 <mpu6050_read+0x1e8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fc46 	bl	800016c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	//convert to rad/s
	dataStore->gx = (dataStore->gyro_x_raw/gyroLsbSensitivity);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd87 	bl	8000404 <__aeabi_i2d>
 80018f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fa:	f7fe ff17 	bl	800072c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dataStore->gy = (double)(dataStore->gyro_y_raw/gyroLsbSensitivity);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd78 	bl	8000404 <__aeabi_i2d>
 8001914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001918:	f7fe ff08 	bl	800072c <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	dataStore->gz = (dataStore->gyro_z_raw/gyroLsbSensitivity);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd69 	bl	8000404 <__aeabi_i2d>
 8001932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001936:	f7fe fef9 	bl	800072c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	40606000 	.word	0x40606000
 8001958:	0a3d70a4 	.word	0x0a3d70a4
 800195c:	404243d7 	.word	0x404243d7
 8001960:	40d00000 	.word	0x40d00000
 8001964:	60606061 	.word	0x60606061

08001968 <mpu6050_complimentary>:
void mpu6050_complimentary(mpu6050_t *dataStore, uint32_t dt) {
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]

	dataStore->th = dataStore->K_acc*atan2(dataStore->ax,sqrt(pow(dataStore->ay,2) + pow(dataStore->az,2))) + dataStore->K_gyr*(dataStore->th_prev + dataStore->gy*dt);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198e:	f00c f82d 	bl	800d9ec <pow>
 8001992:	4682      	mov	sl, r0
 8001994:	468b      	mov	fp, r1
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a4:	f00c f822 	bl	800d9ec <pow>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4650      	mov	r0, sl
 80019ae:	4659      	mov	r1, fp
 80019b0:	f7fe fbdc 	bl	800016c <__adddf3>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f00c f87e 	bl	800dabc <sqrt>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4640      	mov	r0, r8
 80019c6:	4649      	mov	r1, r9
 80019c8:	f00c f80e 	bl	800d9e8 <atan2>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fd80 	bl	80004d8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9c7 2300 	strd	r2, r3, [r7]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	e9d3 ab0e 	ldrd	sl, fp, [r3, #56]	; 0x38
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fcf6 	bl	80003e4 <__aeabi_ui2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4650      	mov	r0, sl
 80019fe:	4659      	mov	r1, fp
 8001a00:	f7fe fd6a 	bl	80004d8 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4640      	mov	r0, r8
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	f7fe fbae 	bl	800016c <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fd5e 	bl	80004d8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a24:	f7fe fba2 	bl	800016c <__adddf3>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	dataStore->th_prev = dataStore->th;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_MspInit+0x40>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_MspInit+0x40>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_MspInit+0x40>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x40>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_MspInit+0x40>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_MspInit+0x40>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_I2C_MspInit+0x70>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d123      	bne.n	8001af4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480b      	ldr	r0, [pc, #44]	; (8001b04 <HAL_I2C_MspInit+0x78>)
 8001ad8:	f000 fb30 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae6:	61d3      	str	r3, [r2, #28]
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_I2C_MspInit+0x74>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40005400 	.word	0x40005400
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d10b      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_TIM_PWM_MspInit+0x34>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_TIM_PWM_MspInit+0x34>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_TIM_PWM_MspInit+0x34>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5e:	d117      	bne.n	8001b90 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_TIM_MspPostInit+0x58>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_TIM_MspPostInit+0x58>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_TIM_MspPostInit+0x58>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <HAL_TIM_MspPostInit+0x5c>)
 8001b8c:	f000 fad6 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be6:	f000 f95b 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}

08001bee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_motor_B_Pin);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 fc56 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_motor_A_Pin);
 8001c00:	2002      	movs	r0, #2
 8001c02:	f000 fc4f 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_motor_B_Pin);
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f000 fc48 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c1e:	f001 fd8a 	bl	8003736 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20001150 	.word	0x20001150

08001c2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_motor_A_Pin);
 8001c30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c34:	f000 fc36 	bl	80024a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <_kill>:

int _kill(int pid, int sig)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c54:	f008 ffbe 	bl	800abd4 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2216      	movs	r2, #22
 8001c5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_exit>:

void _exit (int status)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c72:	f04f 31ff 	mov.w	r1, #4294967295
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffe7 	bl	8001c4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7c:	e7fe      	b.n	8001c7c <_exit+0x12>

08001c7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e00a      	b.n	8001ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c90:	f3af 8000 	nop.w
 8001c94:	4601      	mov	r1, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	60ba      	str	r2, [r7, #8]
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbf0      	blt.n	8001c90 <_read+0x12>
  }

  return len;
 8001cae:	687b      	ldr	r3, [r7, #4]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e009      	b.n	8001cde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbf1      	blt.n	8001cca <_write+0x12>
  }
  return len;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_close>:

int _close(int file)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <_isatty>:

int _isatty(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f008 ff28 	bl	800abd4 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20005000 	.word	0x20005000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	20000480 	.word	0x20000480
 8001db8:	20001670 	.word	0x20001670

08001dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de0:	4c0a      	ldr	r4, [pc, #40]	; (8001e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dee:	f7ff ffe5 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f008 fef5 	bl	800abe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001df6:	f7fe fed7 	bl	8000ba8 <main>
  bx lr
 8001dfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001e04:	0800f220 	.word	0x0800f220
  ldr r2, =_sbss
 8001e08:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001e0c:	2000166c 	.word	0x2000166c

08001e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC1_2_IRQHandler>
	...

08001e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x28>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x28>)
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f947 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f000 f808 	bl	8001e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fe0a 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x54>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x58>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f95f 	bl	8002122 <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d80a      	bhi.n	8001e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f927 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_InitTick+0x5c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x1c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x20>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_IncTick+0x20>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000010 	.word	0x20000010
 8001ec0:	20000484 	.word	0x20000484

08001ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_GetTick+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000484 	.word	0x20000484

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffe0 	bl	8001ec4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000010 	.word	0x20000010

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <__NVIC_EnableIRQ+0x34>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff90 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff2d 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff42 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff90 	bl	8002010 <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e169      	b.n	8002424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002150:	2201      	movs	r2, #1
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 8158 	bne.w	800241e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a9a      	ldr	r2, [pc, #616]	; (80023dc <HAL_GPIO_Init+0x2a0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d05e      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002178:	4a98      	ldr	r2, [pc, #608]	; (80023dc <HAL_GPIO_Init+0x2a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d875      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 800217e:	4a98      	ldr	r2, [pc, #608]	; (80023e0 <HAL_GPIO_Init+0x2a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d058      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002184:	4a96      	ldr	r2, [pc, #600]	; (80023e0 <HAL_GPIO_Init+0x2a4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d86f      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 800218a:	4a96      	ldr	r2, [pc, #600]	; (80023e4 <HAL_GPIO_Init+0x2a8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d052      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 8002190:	4a94      	ldr	r2, [pc, #592]	; (80023e4 <HAL_GPIO_Init+0x2a8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d869      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 8002196:	4a94      	ldr	r2, [pc, #592]	; (80023e8 <HAL_GPIO_Init+0x2ac>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d04c      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 800219c:	4a92      	ldr	r2, [pc, #584]	; (80023e8 <HAL_GPIO_Init+0x2ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d863      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021a2:	4a92      	ldr	r2, [pc, #584]	; (80023ec <HAL_GPIO_Init+0x2b0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d046      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
 80021a8:	4a90      	ldr	r2, [pc, #576]	; (80023ec <HAL_GPIO_Init+0x2b0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d85d      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d82a      	bhi.n	8002208 <HAL_GPIO_Init+0xcc>
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d859      	bhi.n	800226a <HAL_GPIO_Init+0x12e>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <HAL_GPIO_Init+0x80>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002211 	.word	0x08002211
 80021c4:	08002223 	.word	0x08002223
 80021c8:	08002265 	.word	0x08002265
 80021cc:	0800226b 	.word	0x0800226b
 80021d0:	0800226b 	.word	0x0800226b
 80021d4:	0800226b 	.word	0x0800226b
 80021d8:	0800226b 	.word	0x0800226b
 80021dc:	0800226b 	.word	0x0800226b
 80021e0:	0800226b 	.word	0x0800226b
 80021e4:	0800226b 	.word	0x0800226b
 80021e8:	0800226b 	.word	0x0800226b
 80021ec:	0800226b 	.word	0x0800226b
 80021f0:	0800226b 	.word	0x0800226b
 80021f4:	0800226b 	.word	0x0800226b
 80021f8:	0800226b 	.word	0x0800226b
 80021fc:	0800226b 	.word	0x0800226b
 8002200:	08002219 	.word	0x08002219
 8002204:	0800222d 	.word	0x0800222d
 8002208:	4a79      	ldr	r2, [pc, #484]	; (80023f0 <HAL_GPIO_Init+0x2b4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220e:	e02c      	b.n	800226a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e029      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	3304      	adds	r3, #4
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e024      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	3308      	adds	r3, #8
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e01f      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	330c      	adds	r3, #12
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e01a      	b.n	800226c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223e:	2304      	movs	r3, #4
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e013      	b.n	800226c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	611a      	str	r2, [r3, #16]
          break;
 8002256:	e009      	b.n	800226c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	615a      	str	r2, [r3, #20]
          break;
 8002262:	e003      	b.n	800226c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x130>
          break;
 800226a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d801      	bhi.n	8002276 <HAL_GPIO_Init+0x13a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	e001      	b.n	800227a <HAL_GPIO_Init+0x13e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2bff      	cmp	r3, #255	; 0xff
 8002280:	d802      	bhi.n	8002288 <HAL_GPIO_Init+0x14c>
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	e002      	b.n	800228e <HAL_GPIO_Init+0x152>
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	3b08      	subs	r3, #8
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	210f      	movs	r1, #15
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	6a39      	ldr	r1, [r7, #32]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80b1 	beq.w	800241e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022bc:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d4:	4a48      	ldr	r2, [pc, #288]	; (80023f8 <HAL_GPIO_Init+0x2bc>)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <HAL_GPIO_Init+0x2c0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_GPIO_Init+0x1ec>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3f      	ldr	r2, [pc, #252]	; (8002400 <HAL_GPIO_Init+0x2c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_GPIO_Init+0x1e8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3e      	ldr	r2, [pc, #248]	; (8002404 <HAL_GPIO_Init+0x2c8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x1e4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3d      	ldr	r2, [pc, #244]	; (8002408 <HAL_GPIO_Init+0x2cc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_GPIO_Init+0x1e0>
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 800231c:	2304      	movs	r3, #4
 800231e:	e004      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002320:	2302      	movs	r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_GPIO_Init+0x1ee>
 8002328:	2300      	movs	r3, #0
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800233a:	492f      	ldr	r1, [pc, #188]	; (80023f8 <HAL_GPIO_Init+0x2bc>)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_GPIO_Init+0x2d0>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	492c      	ldr	r1, [pc, #176]	; (800240c <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_GPIO_Init+0x2d0>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4928      	ldr	r1, [pc, #160]	; (800240c <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_GPIO_Init+0x2d0>)
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4922      	ldr	r1, [pc, #136]	; (800240c <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_GPIO_Init+0x2d0>)
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	43db      	mvns	r3, r3
 8002392:	491e      	ldr	r1, [pc, #120]	; (800240c <HAL_GPIO_Init+0x2d0>)
 8002394:	4013      	ands	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4918      	ldr	r1, [pc, #96]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4914      	ldr	r1, [pc, #80]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
 80023d8:	e021      	b.n	800241e <HAL_GPIO_Init+0x2e2>
 80023da:	bf00      	nop
 80023dc:	10320000 	.word	0x10320000
 80023e0:	10310000 	.word	0x10310000
 80023e4:	10220000 	.word	0x10220000
 80023e8:	10210000 	.word	0x10210000
 80023ec:	10120000 	.word	0x10120000
 80023f0:	10110000 	.word	0x10110000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40010800 	.word	0x40010800
 8002400:	40010c00 	.word	0x40010c00
 8002404:	40011000 	.word	0x40011000
 8002408:	40011400 	.word	0x40011400
 800240c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_GPIO_Init+0x304>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	43db      	mvns	r3, r3
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <HAL_GPIO_Init+0x304>)
 800241a:	4013      	ands	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae8e 	bne.w	8002150 <HAL_GPIO_Init+0x14>
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	372c      	adds	r7, #44	; 0x2c
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
 800247e:	4613      	mov	r3, r2
 8002480:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002482:	787b      	ldrb	r3, [r7, #1]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248e:	e003      	b.n	8002498 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	041a      	lsls	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe feea 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e12b      	b.n	800273e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fac6 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	; 0x24
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002538:	f003 f866 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a81      	ldr	r2, [pc, #516]	; (8002748 <HAL_I2C_Init+0x274>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d807      	bhi.n	8002558 <HAL_I2C_Init+0x84>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a80      	ldr	r2, [pc, #512]	; (800274c <HAL_I2C_Init+0x278>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf94      	ite	ls
 8002550:	2301      	movls	r3, #1
 8002552:	2300      	movhi	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e006      	b.n	8002566 <HAL_I2C_Init+0x92>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a7d      	ldr	r2, [pc, #500]	; (8002750 <HAL_I2C_Init+0x27c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0e7      	b.n	800273e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a78      	ldr	r2, [pc, #480]	; (8002754 <HAL_I2C_Init+0x280>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_I2C_Init+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d802      	bhi.n	80025a8 <HAL_I2C_Init+0xd4>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3301      	adds	r3, #1
 80025a6:	e009      	b.n	80025bc <HAL_I2C_Init+0xe8>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	4a69      	ldr	r2, [pc, #420]	; (8002758 <HAL_I2C_Init+0x284>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	3301      	adds	r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	495c      	ldr	r1, [pc, #368]	; (8002748 <HAL_I2C_Init+0x274>)
 80025d8:	428b      	cmp	r3, r1
 80025da:	d819      	bhi.n	8002610 <HAL_I2C_Init+0x13c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e59      	subs	r1, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025f0:	400b      	ands	r3, r1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_I2C_Init+0x138>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e59      	subs	r1, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fbb1 f3f3 	udiv	r3, r1, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	e051      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800260c:	2304      	movs	r3, #4
 800260e:	e04f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_I2C_Init+0x168>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e58      	subs	r0, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e012      	b.n	8002662 <HAL_I2C_Init+0x18e>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Init+0x196>
 8002666:	2301      	movs	r3, #1
 8002668:	e022      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10e      	bne.n	8002690 <HAL_I2C_Init+0x1bc>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e58      	subs	r0, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	440b      	add	r3, r1
 8002680:	fbb0 f3f3 	udiv	r3, r0, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	e00f      	b.n	80026b0 <HAL_I2C_Init+0x1dc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	0099      	lsls	r1, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6809      	ldr	r1, [r1, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6911      	ldr	r1, [r2, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68d2      	ldr	r2, [r2, #12]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	000186a0 	.word	0x000186a0
 800274c:	001e847f 	.word	0x001e847f
 8002750:	003d08ff 	.word	0x003d08ff
 8002754:	431bde83 	.word	0x431bde83
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002776:	f7ff fba5 	bl	8001ec4 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b20      	cmp	r3, #32
 8002786:	f040 80d9 	bne.w	800293c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2319      	movs	r3, #25
 8002790:	2201      	movs	r2, #1
 8002792:	496d      	ldr	r1, [pc, #436]	; (8002948 <HAL_I2C_Mem_Write+0x1ec>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fcc1 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0cc      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_Mem_Write+0x56>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0c5      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d007      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a4d      	ldr	r2, [pc, #308]	; (800294c <HAL_I2C_Mem_Write+0x1f0>)
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800281a:	88f8      	ldrh	r0, [r7, #6]
 800281c:	893a      	ldrh	r2, [r7, #8]
 800281e:	8979      	ldrh	r1, [r7, #10]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4603      	mov	r3, r0
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 faf8 	bl	8002e20 <I2C_RequestMemoryWrite>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d052      	beq.n	80028dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e081      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fd42 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b04      	cmp	r3, #4
 8002850:	d107      	bne.n	8002862 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002860:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d11b      	bne.n	80028dc <HAL_I2C_Mem_Write+0x180>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d017      	beq.n	80028dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1aa      	bne.n	800283a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fd2e 	bl	800334a <I2C_WaitOnBTFFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e016      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	00100002 	.word	0x00100002
 800294c:	ffff0000 	.word	0xffff0000

08002950 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800296e:	f7ff faa9 	bl	8001ec4 <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 8244 	bne.w	8002e0a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	4982      	ldr	r1, [pc, #520]	; (8002b94 <HAL_I2C_Mem_Read+0x244>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fbc5 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	e237      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Mem_Read+0x5a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e230      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d007      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a62      	ldr	r2, [pc, #392]	; (8002b98 <HAL_I2C_Mem_Read+0x248>)
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a12:	88f8      	ldrh	r0, [r7, #6]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4603      	mov	r3, r0
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa92 	bl	8002f4c <I2C_RequestMemoryRead>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1ec      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e1c0      	b.n	8002de4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d11e      	bne.n	8002aa8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7a:	b672      	cpsid	i
}
 8002a7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa4:	b662      	cpsie	i
}
 8002aa6:	e035      	b.n	8002b14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11e      	bne.n	8002aee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac0:	b672      	cpsid	i
}
 8002ac2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aea:	b662      	cpsie	i
}
 8002aec:	e012      	b.n	8002b14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002afc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b14:	e166      	b.n	8002de4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	f200 811f 	bhi.w	8002d5e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d123      	bne.n	8002b70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fc4d 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e167      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6e:	e139      	b.n	8002de4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d152      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4906      	ldr	r1, [pc, #24]	; (8002b9c <HAL_I2C_Mem_Read+0x24c>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 faca 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e13c      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
 8002b92:	bf00      	nop
 8002b94:	00100002 	.word	0x00100002
 8002b98:	ffff0000 	.word	0xffff0000
 8002b9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba0:	b672      	cpsid	i
}
 8002ba2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be6:	b662      	cpsie	i
}
 8002be8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1c:	e0e2      	b.n	8002de4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2200      	movs	r2, #0
 8002c26:	497b      	ldr	r1, [pc, #492]	; (8002e14 <HAL_I2C_Mem_Read+0x4c4>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fa77 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0e9      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c48:	b672      	cpsid	i
}
 8002c4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_I2C_Mem_Read+0x4c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_I2C_Mem_Read+0x4cc>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a1a      	lsrs	r2, r3, #8
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00da      	lsls	r2, r3, #3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc6:	b662      	cpsie	i
}
 8002cc8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e09a      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d1d9      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d26:	b662      	cpsie	i
}
 8002d28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5c:	e042      	b.n	8002de4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fb32 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04c      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d118      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f ae94 	bne.w	8002b16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	00010004 	.word	0x00010004
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	14f8b589 	.word	0x14f8b589

08002e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f960 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e70:	d103      	bne.n	8002e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e05f      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	492d      	ldr	r1, [pc, #180]	; (8002f48 <I2C_RequestMemoryWrite+0x128>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f998 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04c      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa02 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02b      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e021      	b.n	8002f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f9dc 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e005      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f32:	893b      	ldrh	r3, [r7, #8]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8c2 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d103      	bne.n	8002fb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0aa      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	4952      	ldr	r1, [pc, #328]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8fa 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e097      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f964 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e076      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e021      	b.n	8003078 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	b29b      	uxth	r3, r3
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	6a39      	ldr	r1, [r7, #32]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f93e 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b04      	cmp	r3, #4
 8003058:	d107      	bne.n	800306a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e050      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306e:	893b      	ldrh	r3, [r7, #8]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	6a39      	ldr	r1, [r7, #32]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f923 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e035      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f82b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030da:	d103      	bne.n	80030e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e013      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f863 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	e025      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d021      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe fec5 	bl	8001ec4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e023      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	e00c      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0b6      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	e051      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d123      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e046      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fe43 	bl	8001ec4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d18d      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f8ce 	bl	8003478 <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fde9 	bl	8001ec4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d1ca      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f88d 	bl	8003478 <I2C_IsAcknowledgeFailed>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d021      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe fda8 	bl	8001ec4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d1ca      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d8:	e042      	b.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d119      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e029      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fd52 	bl	8001ec4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d1b5      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	b08b      	sub	sp, #44	; 0x2c
 80034d8:	af06      	add	r7, sp, #24
 80034da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0fd      	b.n	80036e2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f007 f8c0 	bl	800a680 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2203      	movs	r2, #3
 8003504:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fda5 	bl	800605c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	687e      	ldr	r6, [r7, #4]
 800351a:	466d      	mov	r5, sp
 800351c:	f106 0410 	add.w	r4, r6, #16
 8003520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	602b      	str	r3, [r5, #0]
 8003528:	1d33      	adds	r3, r6, #4
 800352a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352c:	6838      	ldr	r0, [r7, #0]
 800352e:	f002 fd6f 	bl	8006010 <USB_CoreInit>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0ce      	b.n	80036e2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f002 fda0 	bl	8006090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e04c      	b.n	80035f0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	3301      	adds	r3, #1
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	b298      	uxth	r0, r3
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	3336      	adds	r3, #54	; 0x36
 8003594:	4602      	mov	r2, r0
 8003596:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	3303      	adds	r3, #3
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	3338      	adds	r3, #56	; 0x38
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	333c      	adds	r3, #60	; 0x3c
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	3340      	adds	r3, #64	; 0x40
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	3301      	adds	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d3ad      	bcc.n	8003556 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	3301      	adds	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d3b5      	bcc.n	8003600 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	687e      	ldr	r6, [r7, #4]
 800369c:	466d      	mov	r5, sp
 800369e:	f106 0410 	add.w	r4, r6, #16
 80036a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	1d33      	adds	r3, r6, #4
 80036ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	f002 fcfa 	bl	80060a8 <USB_DevInit>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00d      	b.n	80036e2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 f9ac 	bl	8008a38 <USB_DevDisconnect>

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_PCD_Start+0x16>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e016      	b.n	800372e <HAL_PCD_Start+0x44>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f002 fc8f 	bl	8006030 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003712:	2101      	movs	r1, #1
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f007 fa26 	bl	800ab66 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f005 f980 	bl	8008a24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f005 f982 	bl	8008a4c <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003752:	d102      	bne.n	800375a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb5f 	bl	8003e18 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f005 f974 	bl	8008a4c <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d112      	bne.n	8003796 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	b292      	uxth	r2, r2
 8003784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 fff4 	bl	800a776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800378e:	2100      	movs	r1, #0
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f923 	bl	80039dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f005 f956 	bl	8008a4c <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037aa:	d10b      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037be:	b292      	uxth	r2, r2
 80037c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f005 f93f 	bl	8008a4c <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d10b      	bne.n	80037f2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ec:	b292      	uxth	r2, r2
 80037ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f005 f928 	bl	8008a4c <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d126      	bne.n	8003856 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0208 	bic.w	r2, r2, #8
 8003832:	b292      	uxth	r2, r2
 8003834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f006 ffd5 	bl	800a7e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003850:	b292      	uxth	r2, r2
 8003852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f005 f8f6 	bl	8008a4c <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	f040 8082 	bne.w	8003972 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e010      	b.n	8003896 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	7ffb      	ldrb	r3, [r7, #31]
 8003882:	8812      	ldrh	r2, [r2, #0]
 8003884:	b292      	uxth	r2, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	3320      	adds	r3, #32
 800388a:	443b      	add	r3, r7
 800388c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003890:	7ffb      	ldrb	r3, [r7, #31]
 8003892:	3301      	adds	r3, #1
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	2b07      	cmp	r3, #7
 800389a:	d9eb      	bls.n	8003874 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	b292      	uxth	r2, r2
 80038b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	b292      	uxth	r2, r2
 80038c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80038cc:	bf00      	nop
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f6      	beq.n	80038ce <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f2:	b292      	uxth	r2, r2
 80038f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e00f      	b.n	800391e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4611      	mov	r1, r2
 8003906:	7ffa      	ldrb	r2, [r7, #31]
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	440a      	add	r2, r1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	3320      	adds	r3, #32
 8003910:	443b      	add	r3, r7
 8003912:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003916:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003918:	7ffb      	ldrb	r3, [r7, #31]
 800391a:	3301      	adds	r3, #1
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b07      	cmp	r3, #7
 8003922:	d9ec      	bls.n	80038fe <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0208 	orr.w	r2, r2, #8
 8003936:	b292      	uxth	r2, r2
 8003938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	b292      	uxth	r2, r2
 8003950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0204 	orr.w	r2, r2, #4
 8003966:	b292      	uxth	r2, r2
 8003968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f006 ff21 	bl	800a7b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f005 f868 	bl	8008a4c <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d10e      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800399a:	b292      	uxth	r2, r2
 800399c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f006 feda 	bl	800a75a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f005 f84e 	bl	8008a4c <USB_ReadInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d10b      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ce:	b292      	uxth	r2, r2
 80039d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_SetAddress+0x1a>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e013      	b.n	8003a1e <HAL_PCD_SetAddress+0x42>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fff5 	bl	80089fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	4608      	mov	r0, r1
 8003a30:	4611      	mov	r1, r2
 8003a32:	461a      	mov	r2, r3
 8003a34:	4603      	mov	r3, r0
 8003a36:	70fb      	strb	r3, [r7, #3]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	803b      	strh	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da0e      	bge.n	8003a6a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	705a      	strb	r2, [r3, #1]
 8003a68:	e00e      	b.n	8003a88 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0207 	and.w	r2, r3, #7
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a94:	883a      	ldrh	r2, [r7, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ab2:	78bb      	ldrb	r3, [r7, #2]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d102      	bne.n	8003abe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_EP_Open+0xa6>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e00e      	b.n	8003aea <HAL_PCD_EP_Open+0xc4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fb04 	bl	80060e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da0e      	bge.n	8003b24 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	705a      	strb	r2, [r3, #1]
 8003b22:	e00e      	b.n	8003b42 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 0207 	and.w	r2, r3, #7
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_PCD_EP_Close+0x6a>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e00e      	b.n	8003b7a <HAL_PCD_EP_Close+0x88>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 fe26 	bl	80067bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f003 0207 	and.w	r2, r3, #7
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bce:	7afb      	ldrb	r3, [r7, #11]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6979      	ldr	r1, [r7, #20]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 ffd8 	bl	8006b94 <USB_EPStartXfer>
 8003be4:	e005      	b.n	8003bf2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 ffd1 	bl	8006b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 0207 	and.w	r2, r3, #7
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	460b      	mov	r3, r1
 8003c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2201      	movs	r2, #1
 8003c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 ff7e 	bl	8006b94 <USB_EPStartXfer>
 8003c98:	e005      	b.n	8003ca6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f002 ff77 	bl	8006b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 0207 	and.w	r2, r3, #7
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d901      	bls.n	8003cce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e04c      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da0e      	bge.n	8003cf4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	705a      	strb	r2, [r3, #1]
 8003cf2:	e00c      	b.n	8003d0e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_PCD_EP_SetStall+0x7e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e01c      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xb8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f004 fd61 	bl	8008804 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f004 fe86 	bl	8008a6a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d901      	bls.n	8003d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e040      	b.n	8003e10 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0e      	bge.n	8003db4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	705a      	strb	r2, [r3, #1]
 8003db2:	e00e      	b.n	8003dd2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 0207 	and.w	r2, r3, #7
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_PCD_EP_ClrStall+0x82>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e00e      	b.n	8003e10 <HAL_PCD_EP_ClrStall+0xa0>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f004 fd4f 	bl	80088a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08e      	sub	sp, #56	; 0x38
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e20:	e2ec      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003e38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 8161 	bne.w	8004104 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d152      	bne.n	8003ef2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5c:	81fb      	strh	r3, [r7, #14]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	89fb      	ldrh	r3, [r7, #14]
 8003e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3328      	adds	r3, #40	; 0x28
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	441a      	add	r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f006 fc37 	bl	800a726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 829b 	beq.w	80043fc <PCD_EP_ISR_Handler+0x5e4>
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 8296 	bne.w	80043fc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ef0:	e284      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d034      	beq.n	8003f76 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3306      	adds	r3, #6
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f004 fddd 	bl	8008b0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	823b      	strh	r3, [r7, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	8a3a      	ldrh	r2, [r7, #16]
 8003f66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f006 fbac 	bl	800a6cc <HAL_PCD_SetupStageCallback>
 8003f74:	e242      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f280 823e 	bge.w	80043fc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	83bb      	strh	r3, [r7, #28]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	8bba      	ldrh	r2, [r7, #28]
 8003f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3306      	adds	r3, #6
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <PCD_EP_ISR_Handler+0x1ee>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6959      	ldr	r1, [r3, #20]
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f004 fd8d 	bl	8008b0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f006 fb75 	bl	800a6f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 81f2 	bne.w	80043fc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d112      	bne.n	8004066 <PCD_EP_ISR_Handler+0x24e>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800404a:	b29a      	uxth	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800405e:	b29a      	uxth	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	e02f      	b.n	80040c6 <PCD_EP_ISR_Handler+0x2ae>
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b3e      	cmp	r3, #62	; 0x3e
 800406c:	d813      	bhi.n	8004096 <PCD_EP_ISR_Handler+0x27e>
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <PCD_EP_ISR_Handler+0x270>
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	3301      	adds	r3, #1
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	b29b      	uxth	r3, r3
 800408c:	029b      	lsls	r3, r3, #10
 800408e:	b29a      	uxth	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	e017      	b.n	80040c6 <PCD_EP_ISR_Handler+0x2ae>
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <PCD_EP_ISR_Handler+0x298>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	3b01      	subs	r3, #1
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	827b      	strh	r3, [r7, #18]
 80040d8:	8a7b      	ldrh	r3, [r7, #18]
 80040da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040de:	827b      	strh	r3, [r7, #18]
 80040e0:	8a7b      	ldrh	r3, [r7, #18]
 80040e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e6:	827b      	strh	r3, [r7, #18]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	8a7b      	ldrh	r3, [r7, #18]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
 8004102:	e17b      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004116:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800411a:	2b00      	cmp	r3, #0
 800411c:	f280 80ea 	bge.w	80042f4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29a      	uxth	r2, r3
 8004132:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004136:	4013      	ands	r3, r2
 8004138:	853b      	strh	r3, [r7, #40]	; 0x28
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800414a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800414e:	b292      	uxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004152:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	7b1b      	ldrb	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d122      	bne.n	80041b6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004178:	b29b      	uxth	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	3306      	adds	r3, #6
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004198:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800419a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8087 	beq.w	80042b0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	6959      	ldr	r1, [r3, #20]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	88da      	ldrh	r2, [r3, #6]
 80041ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b0:	f004 fcab 	bl	8008b0a <USB_ReadPMA>
 80041b4:	e07c      	b.n	80042b0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	78db      	ldrb	r3, [r3, #3]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d108      	bne.n	80041d0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041c0:	461a      	mov	r2, r3
 80041c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f927 	bl	8004418 <HAL_PCD_EP_DB_Receive>
 80041ca:	4603      	mov	r3, r0
 80041cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041ce:	e06f      	b.n	80042b0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d021      	beq.n	800426e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	3302      	adds	r3, #2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004254:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02a      	beq.n	80042b0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	6959      	ldr	r1, [r3, #20]
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	891a      	ldrh	r2, [r3, #8]
 8004266:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004268:	f004 fc4f 	bl	8008b0a <USB_ReadPMA>
 800426c:	e020      	b.n	80042b0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004276:	b29b      	uxth	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	3306      	adds	r3, #6
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004296:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	6959      	ldr	r1, [r3, #20]
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	895a      	ldrh	r2, [r3, #10]
 80042aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042ac:	f004 fc2d 	bl	8008b0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042b6:	441a      	add	r2, r3
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042c2:	441a      	add	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <PCD_EP_ISR_Handler+0x4c2>
 80042d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d206      	bcs.n	80042e8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f006 fa05 	bl	800a6f0 <HAL_PCD_DataOutStageCallback>
 80042e6:	e005      	b.n	80042f4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f002 fc50 	bl	8006b94 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d07e      	beq.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80042fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	843b      	strh	r3, [r7, #32]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	8c3b      	ldrh	r3, [r7, #32]
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	78db      	ldrb	r3, [r3, #3]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d00c      	beq.n	800436c <PCD_EP_ISR_Handler+0x554>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	78db      	ldrb	r3, [r3, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800435e:	2b02      	cmp	r3, #2
 8004360:	d146      	bne.n	80043f0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004362:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d141      	bne.n	80043f0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	3302      	adds	r3, #2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004394:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	8bfb      	ldrh	r3, [r7, #30]
 800439c:	429a      	cmp	r2, r3
 800439e:	d906      	bls.n	80043ae <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	8bfb      	ldrh	r3, [r7, #30]
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	e002      	b.n	80043b4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f006 f9af 	bl	800a726 <HAL_PCD_DataInStageCallback>
 80043c8:	e018      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	8bfb      	ldrh	r3, [r7, #30]
 80043d0:	441a      	add	r2, r3
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	8bfb      	ldrh	r3, [r7, #30]
 80043dc:	441a      	add	r2, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fbd3 	bl	8006b94 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80043ee:	e005      	b.n	80043fc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80043f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043f2:	461a      	mov	r2, r3
 80043f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f91b 	bl	8004632 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004404:	b29b      	uxth	r3, r3
 8004406:	b21b      	sxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f6ff ad0a 	blt.w	8003e22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3738      	adds	r7, #56	; 0x38
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d07e      	beq.n	800452e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	3302      	adds	r3, #2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004458:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	8b7b      	ldrh	r3, [r7, #26]
 8004460:	429a      	cmp	r2, r3
 8004462:	d306      	bcc.n	8004472 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	8b7b      	ldrh	r3, [r7, #26]
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	619a      	str	r2, [r3, #24]
 8004470:	e002      	b.n	8004478 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d123      	bne.n	80044c8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	833b      	strh	r3, [r7, #24]
 800449c:	8b3b      	ldrh	r3, [r7, #24]
 800449e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044a2:	833b      	strh	r3, [r7, #24]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	8b3b      	ldrh	r3, [r7, #24]
 80044b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01f      	beq.n	8004512 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ec:	82fb      	strh	r3, [r7, #22]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	8afb      	ldrh	r3, [r7, #22]
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004512:	8b7b      	ldrh	r3, [r7, #26]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8087 	beq.w	8004628 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6959      	ldr	r1, [r3, #20]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	891a      	ldrh	r2, [r3, #8]
 8004526:	8b7b      	ldrh	r3, [r7, #26]
 8004528:	f004 faef 	bl	8008b0a <USB_ReadPMA>
 800452c:	e07c      	b.n	8004628 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	3306      	adds	r3, #6
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004556:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	429a      	cmp	r2, r3
 8004560:	d306      	bcc.n	8004570 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	1ad2      	subs	r2, r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	619a      	str	r2, [r3, #24]
 800456e:	e002      	b.n	8004576 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d123      	bne.n	80045c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	83fb      	strh	r3, [r7, #30]
 800459a:	8bfb      	ldrh	r3, [r7, #30]
 800459c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a0:	83fb      	strh	r3, [r7, #30]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8bfb      	ldrh	r3, [r7, #30]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11f      	bne.n	8004610 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	83bb      	strh	r3, [r7, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	8bbb      	ldrh	r3, [r7, #28]
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004610:	8b7b      	ldrh	r3, [r7, #26]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6959      	ldr	r1, [r3, #20]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	895a      	ldrh	r2, [r3, #10]
 8004622:	8b7b      	ldrh	r3, [r7, #26]
 8004624:	f004 fa71 	bl	8008b0a <USB_ReadPMA>
    }
  }

  return count;
 8004628:	8b7b      	ldrh	r3, [r7, #26]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b0a2      	sub	sp, #136	; 0x88
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 81c7 	beq.w	80049da <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004654:	b29b      	uxth	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	3302      	adds	r3, #2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004680:	429a      	cmp	r2, r3
 8004682:	d907      	bls.n	8004694 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800468c:	1ad2      	subs	r2, r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	619a      	str	r2, [r3, #24]
 8004692:	e002      	b.n	800469a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80b9 	bne.w	8004816 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d126      	bne.n	80046fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	4413      	add	r3, r2
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	4413      	add	r3, r2
 80046ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	e01a      	b.n	8004730 <HAL_PCD_EP_DB_Transmit+0xfe>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d116      	bne.n	8004730 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004710:	b29b      	uxth	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	4413      	add	r3, r2
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	011a      	lsls	r2, r3, #4
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	4413      	add	r3, r2
 8004724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2200      	movs	r2, #0
 800472e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d126      	bne.n	800478c <HAL_PCD_EP_DB_Transmit+0x15a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	4413      	add	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4413      	add	r3, r2
 8004760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004770:	b29a      	uxth	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004784:	b29a      	uxth	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	e017      	b.n	80047bc <HAL_PCD_EP_DB_Transmit+0x18a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d113      	bne.n	80047bc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479c:	b29b      	uxth	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	4413      	add	r3, r2
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	011a      	lsls	r2, r3, #4
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	4413      	add	r3, r2
 80047b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2200      	movs	r2, #0
 80047ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4619      	mov	r1, r3
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f005 ffaf 	bl	800a726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 82d4 	beq.w	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	827b      	strh	r3, [r7, #18]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	8a7b      	ldrh	r3, [r7, #18]
 8004800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	b29b      	uxth	r3, r3
 8004812:	8013      	strh	r3, [r2, #0]
 8004814:	e2b2      	b.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d021      	beq.n	8004864 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 8286 	bne.w	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004878:	441a      	add	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004886:	441a      	add	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d309      	bcc.n	80048ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a4:	1ad2      	subs	r2, r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	621a      	str	r2, [r3, #32]
 80048aa:	e015      	b.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80048b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80048c2:	e009      	b.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d155      	bne.n	800498c <HAL_PCD_EP_DB_Transmit+0x35a>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	4413      	add	r3, r2
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	4413      	add	r3, r2
 8004902:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d112      	bne.n	8004934 <HAL_PCD_EP_DB_Transmit+0x302>
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004918:	b29a      	uxth	r2, r3
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492c:	b29a      	uxth	r2, r3
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e047      	b.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004936:	2b3e      	cmp	r3, #62	; 0x3e
 8004938:	d811      	bhi.n	800495e <HAL_PCD_EP_DB_Transmit+0x32c>
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_PCD_EP_DB_Transmit+0x31e>
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	3301      	adds	r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	b29b      	uxth	r3, r3
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	b29a      	uxth	r2, r3
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e032      	b.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	64bb      	str	r3, [r7, #72]	; 0x48
 8004964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <HAL_PCD_EP_DB_Transmit+0x342>
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004970:	3b01      	subs	r3, #1
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	b29b      	uxth	r3, r3
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	b29b      	uxth	r3, r3
 800497c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004984:	b29a      	uxth	r2, r3
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e01b      	b.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d117      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a8:	4413      	add	r3, r2
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b4:	4413      	add	r3, r2
 80049b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6959      	ldr	r1, [r3, #20]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	891a      	ldrh	r2, [r3, #8]
 80049d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f004 f854 	bl	8008a80 <USB_WritePMA>
 80049d8:	e1d0      	b.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	3306      	adds	r3, #6
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d307      	bcc.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	619a      	str	r2, [r3, #24]
 8004a20:	e002      	b.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 80c4 	bne.w	8004bba <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d126      	bne.n	8004a88 <HAL_PCD_EP_DB_Transmit+0x456>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	4413      	add	r3, r2
 8004a50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	011a      	lsls	r2, r3, #4
 8004a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	e01a      	b.n	8004abe <HAL_PCD_EP_DB_Transmit+0x48c>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d116      	bne.n	8004abe <HAL_PCD_EP_DB_Transmit+0x48c>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	677b      	str	r3, [r7, #116]	; 0x74
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa4:	4413      	add	r3, r2
 8004aa6:	677b      	str	r3, [r7, #116]	; 0x74
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	011a      	lsls	r2, r3, #4
 8004aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aba:	2200      	movs	r2, #0
 8004abc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d12f      	bne.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af4:	4413      	add	r3, r2
 8004af6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004afa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	801a      	strh	r2, [r3, #0]
 8004b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	e017      	b.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d113      	bne.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	4413      	add	r3, r2
 8004b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	011a      	lsls	r2, r3, #4
 8004b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f005 fddf 	bl	800a726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 8104 	bne.w	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
 8004bb8:	e0e0      	b.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d121      	bne.n	8004c08 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 80b4 	bne.w	8004d7c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c2a:	441a      	add	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d309      	bcc.n	8004c50 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	621a      	str	r2, [r3, #32]
 8004c4e:	e015      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d107      	bne.n	8004c68 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c66:	e009      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2200      	movs	r2, #0
 8004c72:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	667b      	str	r3, [r7, #100]	; 0x64
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d155      	bne.n	8004d36 <HAL_PCD_EP_DB_Transmit+0x704>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9e:	4413      	add	r3, r2
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	011a      	lsls	r2, r3, #4
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d112      	bne.n	8004cde <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	e044      	b.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x736>
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce2:	d811      	bhi.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	e02f      	b.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x736>
 8004d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e018      	b.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x736>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d114      	bne.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x736>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4c:	4413      	add	r3, r2
 8004d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	011a      	lsls	r2, r3, #4
 8004d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d66:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6959      	ldr	r1, [r3, #20]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	895a      	ldrh	r2, [r3, #10]
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f003 fe82 	bl	8008a80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d96:	823b      	strh	r3, [r7, #16]
 8004d98:	8a3b      	ldrh	r3, [r7, #16]
 8004d9a:	f083 0310 	eor.w	r3, r3, #16
 8004d9e:	823b      	strh	r3, [r7, #16]
 8004da0:	8a3b      	ldrh	r3, [r7, #16]
 8004da2:	f083 0320 	eor.w	r3, r3, #32
 8004da6:	823b      	strh	r3, [r7, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	8a3b      	ldrh	r3, [r7, #16]
 8004db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3788      	adds	r7, #136	; 0x88
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b087      	sub	sp, #28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	607b      	str	r3, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	817b      	strh	r3, [r7, #10]
 8004de4:	4613      	mov	r3, r2
 8004de6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004de8:	897b      	ldrh	r3, [r7, #10]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df4:	897b      	ldrh	r3, [r7, #10]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e009      	b.n	8004e20 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e0c:	897a      	ldrh	r2, [r7, #10]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e20:	893b      	ldrh	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	80da      	strh	r2, [r3, #6]
 8004e34:	e00b      	b.n	8004e4e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e272      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8087 	beq.w	8004f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7c:	4b92      	ldr	r3, [pc, #584]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d00c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e88:	4b8f      	ldr	r3, [pc, #572]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d112      	bne.n	8004eba <HAL_RCC_OscConfig+0x5e>
 8004e94:	4b8c      	ldr	r3, [pc, #560]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d06c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x12c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d168      	bne.n	8004f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e24c      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x76>
 8004ec4:	4b80      	ldr	r3, [pc, #512]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7f      	ldr	r2, [pc, #508]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e02e      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x98>
 8004eda:	4b7b      	ldr	r3, [pc, #492]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7a      	ldr	r2, [pc, #488]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b78      	ldr	r3, [pc, #480]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a77      	ldr	r2, [pc, #476]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e01d      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0xbc>
 8004efe:	4b72      	ldr	r3, [pc, #456]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a71      	ldr	r2, [pc, #452]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b6f      	ldr	r3, [pc, #444]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6e      	ldr	r2, [pc, #440]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xd4>
 8004f18:	4b6b      	ldr	r3, [pc, #428]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a67      	ldr	r2, [pc, #412]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fc ffc4 	bl	8001ec4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc ffc0 	bl	8001ec4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e200      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b5d      	ldr	r3, [pc, #372]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0xe4>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc ffb0 	bl	8001ec4 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc ffac 	bl	8001ec4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1ec      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b53      	ldr	r3, [pc, #332]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x10c>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d063      	beq.n	800505e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f96:	4b4c      	ldr	r3, [pc, #304]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fa2:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x18c>
 8004fae:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x176>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e1c0      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b3d      	ldr	r3, [pc, #244]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4939      	ldr	r1, [pc, #228]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e03a      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fc ff65 	bl	8001ec4 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fc ff61 	bl	8001ec4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e1a1      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b2a      	ldr	r3, [pc, #168]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4927      	ldr	r1, [pc, #156]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	e015      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b26      	ldr	r3, [pc, #152]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fc ff44 	bl	8001ec4 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005040:	f7fc ff40 	bl	8001ec4 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e180      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03a      	beq.n	80050e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d019      	beq.n	80050a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <HAL_RCC_OscConfig+0x274>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005078:	f7fc ff24 	bl	8001ec4 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005080:	f7fc ff20 	bl	8001ec4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e160      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_RCC_OscConfig+0x26c>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800509e:	2001      	movs	r0, #1
 80050a0:	f000 fac6 	bl	8005630 <RCC_Delay>
 80050a4:	e01c      	b.n	80050e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_RCC_OscConfig+0x274>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ac:	f7fc ff0a 	bl	8001ec4 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b2:	e00f      	b.n	80050d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b4:	f7fc ff06 	bl	8001ec4 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d908      	bls.n	80050d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e146      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	42420000 	.word	0x42420000
 80050d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	4b92      	ldr	r3, [pc, #584]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e9      	bne.n	80050b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a6 	beq.w	800523a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b8b      	ldr	r3, [pc, #556]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b88      	ldr	r3, [pc, #544]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4a87      	ldr	r2, [pc, #540]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	61d3      	str	r3, [r2, #28]
 800510a:	4b85      	ldr	r3, [pc, #532]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_RCC_OscConfig+0x4c8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <HAL_RCC_OscConfig+0x4c8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7e      	ldr	r2, [pc, #504]	; (8005324 <HAL_RCC_OscConfig+0x4c8>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fc fec7 	bl	8001ec4 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fc fec3 	bl	8001ec4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e103      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b75      	ldr	r3, [pc, #468]	; (8005324 <HAL_RCC_OscConfig+0x4c8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x312>
 8005160:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4a6e      	ldr	r2, [pc, #440]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6213      	str	r3, [r2, #32]
 800516c:	e02d      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x334>
 8005176:	4b6a      	ldr	r3, [pc, #424]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4a69      	ldr	r2, [pc, #420]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6213      	str	r3, [r2, #32]
 8005182:	4b67      	ldr	r3, [pc, #412]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4a66      	ldr	r2, [pc, #408]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6213      	str	r3, [r2, #32]
 800518e:	e01c      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b05      	cmp	r3, #5
 8005196:	d10c      	bne.n	80051b2 <HAL_RCC_OscConfig+0x356>
 8005198:	4b61      	ldr	r3, [pc, #388]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	4a60      	ldr	r2, [pc, #384]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800519e:	f043 0304 	orr.w	r3, r3, #4
 80051a2:	6213      	str	r3, [r2, #32]
 80051a4:	4b5e      	ldr	r3, [pc, #376]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	4a5d      	ldr	r2, [pc, #372]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6213      	str	r3, [r2, #32]
 80051b0:	e00b      	b.n	80051ca <HAL_RCC_OscConfig+0x36e>
 80051b2:	4b5b      	ldr	r3, [pc, #364]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4a5a      	ldr	r2, [pc, #360]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6213      	str	r3, [r2, #32]
 80051be:	4b58      	ldr	r3, [pc, #352]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4a57      	ldr	r2, [pc, #348]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fc fe77 	bl	8001ec4 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fc fe73 	bl	8001ec4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0b1      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ee      	beq.n	80051da <HAL_RCC_OscConfig+0x37e>
 80051fc:	e014      	b.n	8005228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fc fe61 	bl	8001ec4 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fc fe5d 	bl	8001ec4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e09b      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521c:	4b40      	ldr	r3, [pc, #256]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1ee      	bne.n	8005206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b3c      	ldr	r3, [pc, #240]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8087 	beq.w	8005352 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005244:	4b36      	ldr	r3, [pc, #216]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b08      	cmp	r3, #8
 800524e:	d061      	beq.n	8005314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d146      	bne.n	80052e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b33      	ldr	r3, [pc, #204]	; (8005328 <HAL_RCC_OscConfig+0x4cc>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fc fe31 	bl	8001ec4 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005266:	f7fc fe2d 	bl	8001ec4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e06d      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005278:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f0      	bne.n	8005266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d108      	bne.n	80052a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4921      	ldr	r1, [pc, #132]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a0:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a19      	ldr	r1, [r3, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	430b      	orrs	r3, r1
 80052b2:	491b      	ldr	r1, [pc, #108]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b8:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x4cc>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052be:	f7fc fe01 	bl	8001ec4 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fc fdfd 	bl	8001ec4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e03d      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x46a>
 80052e4:	e035      	b.n	8005352 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <HAL_RCC_OscConfig+0x4cc>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fc fdea 	bl	8001ec4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fc fde6 	bl	8001ec4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e026      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x498>
 8005312:	e01e      	b.n	8005352 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e019      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
 8005328:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x500>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	429a      	cmp	r2, r3
 800533e:	d106      	bne.n	800534e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d001      	beq.n	8005352 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0d0      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005374:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d910      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b67      	ldr	r3, [pc, #412]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	4965      	ldr	r1, [pc, #404]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0b8      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053bc:	4b59      	ldr	r3, [pc, #356]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	4a58      	ldr	r2, [pc, #352]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d4:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a52      	ldr	r2, [pc, #328]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	494d      	ldr	r1, [pc, #308]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d040      	beq.n	8005480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d107      	bne.n	8005416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d115      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e07f      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541e:	4b41      	ldr	r3, [pc, #260]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e073      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542e:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e06b      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543e:	4b39      	ldr	r3, [pc, #228]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4936      	ldr	r1, [pc, #216]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc fd38 	bl	8001ec4 <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc fd34 	bl	8001ec4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e053      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 020c 	and.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	429a      	cmp	r2, r3
 800547e:	d1eb      	bne.n	8005458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d210      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	4922      	ldr	r1, [pc, #136]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e032      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4916      	ldr	r1, [pc, #88]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	490e      	ldr	r1, [pc, #56]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ee:	f000 f821 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490a      	ldr	r1, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1cc>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1d0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fc fc96 	bl	8001e40 <HAL_InitTick>

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40022000 	.word	0x40022000
 8005524:	40021000 	.word	0x40021000
 8005528:	0800ed80 	.word	0x0800ed80
 800552c:	20000008 	.word	0x20000008
 8005530:	2000000c 	.word	0x2000000c

08005534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	b490      	push	{r4, r7}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800553a:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800553c:	1d3c      	adds	r4, r7, #4
 800553e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005544:	f240 2301 	movw	r3, #513	; 0x201
 8005548:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800555e:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b04      	cmp	r3, #4
 800556c:	d002      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x40>
 800556e:	2b08      	cmp	r3, #8
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x46>
 8005572:	e02b      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005576:	623b      	str	r3, [r7, #32]
      break;
 8005578:	e02b      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	0c9b      	lsrs	r3, r3, #18
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	3328      	adds	r3, #40	; 0x28
 8005584:	443b      	add	r3, r7
 8005586:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800558a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d012      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	0c5b      	lsrs	r3, r3, #17
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	3328      	adds	r3, #40	; 0x28
 80055a2:	443b      	add	r3, r7
 80055a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80055ae:	fb03 f202 	mul.w	r2, r3, r2
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ba:	e004      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4a0b      	ldr	r2, [pc, #44]	; (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	623b      	str	r3, [r7, #32]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055ce:	623b      	str	r3, [r7, #32]
      break;
 80055d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc90      	pop	{r4, r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	0800ed28 	.word	0x0800ed28
 80055e4:	40021000 	.word	0x40021000
 80055e8:	00f42400 	.word	0x00f42400
 80055ec:	003d0900 	.word	0x003d0900
 80055f0:	007a1200 	.word	0x007a1200

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <HAL_RCC_GetHCLKFreq+0x10>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	20000008 	.word	0x20000008

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800560c:	f7ff fff2 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	; (800562c <HAL_RCC_GetPCLK1Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	0800ed90 	.word	0x0800ed90

08005630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <RCC_Delay+0x34>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <RCC_Delay+0x38>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	0a5b      	lsrs	r3, r3, #9
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800564c:	bf00      	nop
  }
  while (Delay --);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f9      	bne.n	800564c <RCC_Delay+0x1c>
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	20000008 	.word	0x20000008
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d07d      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568c:	4b4f      	ldr	r3, [pc, #316]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005698:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4a4b      	ldr	r2, [pc, #300]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a2:	61d3      	str	r3, [r2, #28]
 80056a4:	4b49      	ldr	r3, [pc, #292]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d118      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c0:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056cc:	f7fc fbfa 	bl	8001ec4 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	e008      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d4:	f7fc fbf6 	bl	8001ec4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e06d      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f2:	4b36      	ldr	r3, [pc, #216]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02e      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d027      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005710:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571a:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005726:	4a29      	ldr	r2, [pc, #164]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d014      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005736:	f7fc fbc5 	bl	8001ec4 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	e00a      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fc fbc1 	bl	8001ec4 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e036      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ee      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005760:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4917      	ldr	r1, [pc, #92]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	4313      	orrs	r3, r2
 8005770:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b14      	ldr	r3, [pc, #80]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005782:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	490b      	ldr	r1, [pc, #44]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4904      	ldr	r1, [pc, #16]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40007000 	.word	0x40007000
 80057d4:	42420440 	.word	0x42420440

080057d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e041      	b.n	800586e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fc f982 	bl	8001b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 f98e 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_TIM_PWM_Start+0x24>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e022      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d109      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x3e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	e015      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d109      	bne.n	80058d0 <HAL_TIM_PWM_Start+0x58>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e008      	b.n	80058e2 <HAL_TIM_PWM_Start+0x6a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e05e      	b.n	80059a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0x82>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f8:	e013      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0x92>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	e00b      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005918:	e003      	b.n	8005922 <HAL_TIM_PWM_Start+0xaa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 faee 	bl	8005f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <HAL_TIM_PWM_Start+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d107      	bne.n	800594a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_TIM_PWM_Start+0x138>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIM_PWM_Start+0xfa>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d009      	beq.n	8005972 <HAL_TIM_PWM_Start+0xfa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <HAL_TIM_PWM_Start+0x13c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIM_PWM_Start+0xfa>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <HAL_TIM_PWM_Start+0x140>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d111      	bne.n	8005996 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d010      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	e007      	b.n	80059a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800

080059bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0ac      	b.n	8005b30 <HAL_TIM_PWM_ConfigChannel+0x174>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	f200 809f 	bhi.w	8005b24 <HAL_TIM_PWM_ConfigChannel+0x168>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005b25 	.word	0x08005b25
 80059f4:	08005b25 	.word	0x08005b25
 80059f8:	08005b25 	.word	0x08005b25
 80059fc:	08005a61 	.word	0x08005a61
 8005a00:	08005b25 	.word	0x08005b25
 8005a04:	08005b25 	.word	0x08005b25
 8005a08:	08005b25 	.word	0x08005b25
 8005a0c:	08005aa3 	.word	0x08005aa3
 8005a10:	08005b25 	.word	0x08005b25
 8005a14:	08005b25 	.word	0x08005b25
 8005a18:	08005b25 	.word	0x08005b25
 8005a1c:	08005ae3 	.word	0x08005ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f8e8 	bl	8005bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0208 	orr.w	r2, r2, #8
 8005a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0204 	bic.w	r2, r2, #4
 8005a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
      break;
 8005a5e:	e062      	b.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f92e 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6999      	ldr	r1, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	619a      	str	r2, [r3, #24]
      break;
 8005aa0:	e041      	b.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f977 	bl	8005d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0208 	orr.w	r2, r2, #8
 8005abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0204 	bic.w	r2, r2, #4
 8005acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69d9      	ldr	r1, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	61da      	str	r2, [r3, #28]
      break;
 8005ae0:	e021      	b.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f9c1 	bl	8005e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	021a      	lsls	r2, r3, #8
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	61da      	str	r2, [r3, #28]
      break;
 8005b22:	e000      	b.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005b24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <TIM_Base_SetConfig+0xb8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0x30>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0x30>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <TIM_Base_SetConfig+0xbc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0x30>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a25      	ldr	r2, [pc, #148]	; (8005bf8 <TIM_Base_SetConfig+0xc0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d108      	bne.n	8005b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	; (8005bf0 <TIM_Base_SetConfig+0xb8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <TIM_Base_SetConfig+0x62>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d007      	beq.n	8005b9a <TIM_Base_SetConfig+0x62>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <TIM_Base_SetConfig+0xbc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_Base_SetConfig+0x62>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <TIM_Base_SetConfig+0xc0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <TIM_Base_SetConfig+0xb8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	615a      	str	r2, [r3, #20]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800

08005bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d10c      	bne.n	8005c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0308 	bic.w	r3, r3, #8
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 0304 	bic.w	r3, r3, #4
 8005c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d111      	bne.n	8005c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <TIM_OC2_SetConfig+0xd0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10d      	bne.n	8005d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <TIM_OC2_SetConfig+0xd0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d113      	bne.n	8005d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr
 8005d98:	40012c00 	.word	0x40012c00

08005d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <TIM_OC3_SetConfig+0xd0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10d      	bne.n	8005e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <TIM_OC3_SetConfig+0xd0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d113      	bne.n	8005e46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00

08005e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <TIM_OC4_SetConfig+0x98>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d109      	bne.n	8005ee4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	40012c00 	.word	0x40012c00

08005f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	2201      	movs	r2, #1
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e046      	b.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a16      	ldr	r2, [pc, #88]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d009      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a12      	ldr	r2, [pc, #72]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a10      	ldr	r2, [pc, #64]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800

08006010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006010:	b084      	sub	sp, #16
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	f107 0014 	add.w	r0, r7, #20
 800601e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	b004      	add	sp, #16
 800602e:	4770      	bx	lr

08006030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006040:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006044:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	b29a      	uxth	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006064:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006068:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	b29b      	uxth	r3, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	b29b      	uxth	r3, r3
 800607a:	4013      	ands	r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060a8:	b084      	sub	sp, #16
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	f107 0014 	add.w	r0, r7, #20
 80060b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	b004      	add	sp, #16
 80060e6:	4770      	bx	lr

080060e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b09b      	sub	sp, #108	; 0x6c
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	78db      	ldrb	r3, [r3, #3]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d81f      	bhi.n	800615a <USB_ActivateEndpoint+0x72>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <USB_ActivateEndpoint+0x38>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006131 	.word	0x08006131
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006163 	.word	0x08006163
 800612c:	0800613f 	.word	0x0800613f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006130:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006138:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800613c:	e012      	b.n	8006164 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800613e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006142:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006146:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800614a:	e00b      	b.n	8006164 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800614c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006154:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006158:	e004      	b.n	8006164 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006160:	e000      	b.n	8006164 <USB_ActivateEndpoint+0x7c>
      break;
 8006162:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	b29a      	uxth	r2, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80061b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	7b1b      	ldrb	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8149 	bne.w	8006468 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8084 	beq.w	80062e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	011a      	lsls	r2, r3, #4
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	88db      	ldrh	r3, [r3, #6]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	81fb      	strh	r3, [r7, #14]
 8006222:	89fb      	ldrh	r3, [r7, #14]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01b      	beq.n	8006264 <USB_ActivateEndpoint+0x17c>
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	81bb      	strh	r3, [r7, #12]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	89bb      	ldrh	r3, [r7, #12]
 8006250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	78db      	ldrb	r3, [r3, #3]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d020      	beq.n	80062ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006282:	813b      	strh	r3, [r7, #8]
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	f083 0320 	eor.w	r3, r3, #32
 800628a:	813b      	strh	r3, [r7, #8]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	893b      	ldrh	r3, [r7, #8]
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e27f      	b.n	80067ae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c4:	817b      	strh	r3, [r7, #10]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]
 80062e6:	e262      	b.n	80067ae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	4413      	add	r3, r2
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	011a      	lsls	r2, r3, #4
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	4413      	add	r3, r2
 8006306:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	4413      	add	r3, r2
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	011a      	lsls	r2, r3, #4
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	4413      	add	r3, r2
 800633a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d112      	bne.n	800636e <USB_ActivateEndpoint+0x286>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006352:	b29a      	uxth	r2, r3
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e02f      	b.n	80063ce <USB_ActivateEndpoint+0x2e6>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b3e      	cmp	r3, #62	; 0x3e
 8006374:	d813      	bhi.n	800639e <USB_ActivateEndpoint+0x2b6>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	663b      	str	r3, [r7, #96]	; 0x60
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <USB_ActivateEndpoint+0x2a8>
 800638a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638c:	3301      	adds	r3, #1
 800638e:	663b      	str	r3, [r7, #96]	; 0x60
 8006390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29a      	uxth	r2, r3
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e017      	b.n	80063ce <USB_ActivateEndpoint+0x2e6>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	663b      	str	r3, [r7, #96]	; 0x60
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USB_ActivateEndpoint+0x2d0>
 80063b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b4:	3b01      	subs	r3, #1
 80063b6:	663b      	str	r3, [r7, #96]	; 0x60
 80063b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	029b      	lsls	r3, r3, #10
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	83fb      	strh	r3, [r7, #30]
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01b      	beq.n	800641e <USB_ActivateEndpoint+0x336>
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	83bb      	strh	r3, [r7, #28]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8bbb      	ldrh	r3, [r7, #28]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	837b      	strh	r3, [r7, #26]
 8006436:	8b7b      	ldrh	r3, [r7, #26]
 8006438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800643c:	837b      	strh	r3, [r7, #26]
 800643e:	8b7b      	ldrh	r3, [r7, #26]
 8006440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006444:	837b      	strh	r3, [r7, #26]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	8b7b      	ldrh	r3, [r7, #26]
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]
 8006466:	e1a2      	b.n	80067ae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006498:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b4:	4413      	add	r3, r2
 80064b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c6:	657b      	str	r3, [r7, #84]	; 0x54
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	891b      	ldrh	r3, [r3, #8]
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	653b      	str	r3, [r7, #80]	; 0x50
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e8:	4413      	add	r3, r2
 80064ea:	653b      	str	r3, [r7, #80]	; 0x50
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	011a      	lsls	r2, r3, #4
 80064f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	895b      	ldrh	r3, [r3, #10]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 8091 	bne.w	8006638 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006524:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01b      	beq.n	8006566 <USB_ActivateEndpoint+0x47e>
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	873b      	strh	r3, [r7, #56]	; 0x38
 8006574:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01b      	beq.n	80065b6 <USB_ActivateEndpoint+0x4ce>
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006594:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80065ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80065d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	867b      	strh	r3, [r7, #50]	; 0x32
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
 8006636:	e0ba      	b.n	80067ae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006648:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800664c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01d      	beq.n	8006690 <USB_ActivateEndpoint+0x5a8>
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01d      	beq.n	80066e8 <USB_ActivateEndpoint+0x600>
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d024      	beq.n	800673a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006706:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800670a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800670e:	f083 0320 	eor.w	r3, r3, #32
 8006712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
 8006738:	e01d      	b.n	8006776 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006750:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80067ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	376c      	adds	r7, #108	; 0x6c
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067bc:	b480      	push	{r7}
 80067be:	b08d      	sub	sp, #52	; 0x34
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 808e 	bne.w	80068ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d044      	beq.n	8006862 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	81bb      	strh	r3, [r7, #12]
 80067e6:	89bb      	ldrh	r3, [r7, #12]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01b      	beq.n	8006828 <USB_DeactivateEndpoint+0x6c>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	817b      	strh	r3, [r7, #10]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683e:	813b      	strh	r3, [r7, #8]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
 8006860:	e192      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	827b      	strh	r3, [r7, #18]
 8006870:	8a7b      	ldrh	r3, [r7, #18]
 8006872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01b      	beq.n	80068b2 <USB_DeactivateEndpoint+0xf6>
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006890:	823b      	strh	r3, [r7, #16]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8a3b      	ldrh	r3, [r7, #16]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c8:	81fb      	strh	r3, [r7, #14]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	e14d      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f040 80a5 	bne.w	8006a40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	843b      	strh	r3, [r7, #32]
 8006904:	8c3b      	ldrh	r3, [r7, #32]
 8006906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <USB_DeactivateEndpoint+0x18a>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	83fb      	strh	r3, [r7, #30]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	8bfb      	ldrh	r3, [r7, #30]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800693e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	83bb      	strh	r3, [r7, #28]
 8006954:	8bbb      	ldrh	r3, [r7, #28]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01b      	beq.n	8006996 <USB_DeactivateEndpoint+0x1da>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	837b      	strh	r3, [r7, #26]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	8b7b      	ldrh	r3, [r7, #26]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	833b      	strh	r3, [r7, #24]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	8b3b      	ldrh	r3, [r7, #24]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	82fb      	strh	r3, [r7, #22]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	8afb      	ldrh	r3, [r7, #22]
 80069f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	82bb      	strh	r3, [r7, #20]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8abb      	ldrh	r3, [r7, #20]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
 8006a3e:	e0a3      	b.n	8006b88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <USB_DeactivateEndpoint+0x2d4>
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01b      	beq.n	8006ae0 <USB_DeactivateEndpoint+0x324>
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3734      	adds	r7, #52	; 0x34
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b0cc      	sub	sp, #304	; 0x130
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba2:	6018      	str	r0, [r3, #0]
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	f041 817d 	bne.w	8007eba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d908      	bls.n	8006bee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006bec:	e007      	b.n	8006bfe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	7b1b      	ldrb	r3, [r3, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d152      	bne.n	8006cb4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	88da      	ldrh	r2, [r3, #6]
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c30:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c34:	6800      	ldr	r0, [r0, #0]
 8006c36:	f001 ff23 	bl	8008a80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c46:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c6c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	440a      	add	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011a      	lsls	r2, r3, #4
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	f001 b8b5 	b.w	8007e1e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f040 84c6 	bne.w	8007652 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	f240 8443 	bls.w	800756a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 823e 	beq.w	8007202 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d92:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 809a 	bne.w	8006ee0 <USB_EPStartXfer+0x34c>
 8006dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006db8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dde:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	440a      	add	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	011a      	lsls	r2, r3, #4
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d122      	bne.n	8006e5e <USB_EPStartXfer+0x2ca>
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e079      	b.n	8006f52 <USB_EPStartXfer+0x3be>
 8006e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e62:	2b3e      	cmp	r3, #62	; 0x3e
 8006e64:	d81b      	bhi.n	8006e9e <USB_EPStartXfer+0x30a>
 8006e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <USB_EPStartXfer+0x2f2>
 8006e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e80:	3301      	adds	r3, #1
 8006e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e059      	b.n	8006f52 <USB_EPStartXfer+0x3be>
 8006e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <USB_EPStartXfer+0x32a>
 8006eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	029b      	lsls	r3, r3, #10
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	e038      	b.n	8006f52 <USB_EPStartXfer+0x3be>
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d130      	bne.n	8006f52 <USB_EPStartXfer+0x3be>
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	440a      	add	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	011a      	lsls	r2, r3, #4
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	895b      	ldrh	r3, [r3, #10]
 8006f5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6959      	ldr	r1, [r3, #20]
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f80:	6800      	ldr	r0, [r0, #0]
 8006f82:	f001 fd7d 	bl	8008a80 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f96:	441a      	add	r2, r3
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d90f      	bls.n	8006fe0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	621a      	str	r2, [r3, #32]
 8006fde:	e00e      	b.n	8006ffe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 809a 	bne.w	8007144 <USB_EPStartXfer+0x5b0>
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007018:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800701c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007020:	6812      	ldr	r2, [r2, #0]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800703e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007042:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	440a      	add	r2, r1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	011a      	lsls	r2, r3, #4
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4413      	add	r3, r2
 8007066:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d122      	bne.n	80070c2 <USB_EPStartXfer+0x52e>
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800708e:	b29a      	uxth	r2, r3
 8007090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007094:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e083      	b.n	80071ca <USB_EPStartXfer+0x636>
 80070c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c6:	2b3e      	cmp	r3, #62	; 0x3e
 80070c8:	d81b      	bhi.n	8007102 <USB_EPStartXfer+0x56e>
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <USB_EPStartXfer+0x556>
 80070e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070e4:	3301      	adds	r3, #1
 80070e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	e063      	b.n	80071ca <USB_EPStartXfer+0x636>
 8007102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800710c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <USB_EPStartXfer+0x58e>
 8007118:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800711c:	3b01      	subs	r3, #1
 800711e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007122:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007126:	b29b      	uxth	r3, r3
 8007128:	029b      	lsls	r3, r3, #10
 800712a:	b29b      	uxth	r3, r3
 800712c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007134:	b29a      	uxth	r2, r3
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e042      	b.n	80071ca <USB_EPStartXfer+0x636>
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d13a      	bne.n	80071ca <USB_EPStartXfer+0x636>
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800715c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007160:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007186:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	440a      	add	r2, r1
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	891b      	ldrh	r3, [r3, #8]
 80071d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6959      	ldr	r1, [r3, #20]
 80071e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071f8:	6800      	ldr	r0, [r0, #0]
 80071fa:	f001 fc41 	bl	8008a80 <USB_WritePMA>
 80071fe:	f000 be0e 	b.w	8007e1e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d16d      	bne.n	80072ee <USB_EPStartXfer+0x75a>
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	64bb      	str	r3, [r7, #72]	; 0x48
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722c:	b29b      	uxth	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007232:	4413      	add	r3, r2
 8007234:	64bb      	str	r3, [r7, #72]	; 0x48
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011a      	lsls	r2, r3, #4
 8007244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007246:	4413      	add	r3, r2
 8007248:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
 800724e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d112      	bne.n	800727c <USB_EPStartXfer+0x6e8>
 8007256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007260:	b29a      	uxth	r2, r3
 8007262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007274:	b29a      	uxth	r2, r3
 8007276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	e063      	b.n	8007344 <USB_EPStartXfer+0x7b0>
 800727c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007280:	2b3e      	cmp	r3, #62	; 0x3e
 8007282:	d817      	bhi.n	80072b4 <USB_EPStartXfer+0x720>
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800728e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <USB_EPStartXfer+0x710>
 800729a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80072a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e047      	b.n	8007344 <USB_EPStartXfer+0x7b0>
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <USB_EPStartXfer+0x740>
 80072ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80072d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e02a      	b.n	8007344 <USB_EPStartXfer+0x7b0>
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d122      	bne.n	8007344 <USB_EPStartXfer+0x7b0>
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	653b      	str	r3, [r7, #80]	; 0x50
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731e:	4413      	add	r3, r2
 8007320:	653b      	str	r3, [r7, #80]	; 0x50
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	011a      	lsls	r2, r3, #4
 8007330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007332:	4413      	add	r3, r2
 8007334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733e:	b29a      	uxth	r2, r3
 8007340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007342:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	891b      	ldrh	r3, [r3, #8]
 8007350:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	b29b      	uxth	r3, r3
 8007366:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800736a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800736e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	f001 fb84 	bl	8008a80 <USB_WritePMA>
            ep->xfer_buff += len;
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	441a      	add	r2, r3
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d90f      	bls.n	80073d2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80073b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	621a      	str	r2, [r3, #32]
 80073d0:	e00e      	b.n	80073f0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80073d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	643b      	str	r3, [r7, #64]	; 0x40
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d16d      	bne.n	80074e8 <USB_EPStartXfer+0x954>
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	4413      	add	r3, r2
 800742e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	011a      	lsls	r2, r3, #4
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	4413      	add	r3, r2
 8007442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
 8007448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USB_EPStartXfer+0x8e2>
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745a:	b29a      	uxth	r2, r3
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746e:	b29a      	uxth	r2, r3
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e05d      	b.n	8007532 <USB_EPStartXfer+0x99e>
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	2b3e      	cmp	r3, #62	; 0x3e
 800747c:	d817      	bhi.n	80074ae <USB_EPStartXfer+0x91a>
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <USB_EPStartXfer+0x90a>
 8007494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800749e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e041      	b.n	8007532 <USB_EPStartXfer+0x99e>
 80074ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d104      	bne.n	80074ce <USB_EPStartXfer+0x93a>
 80074c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074c8:	3b01      	subs	r3, #1
 80074ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	029b      	lsls	r3, r3, #10
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e024      	b.n	8007532 <USB_EPStartXfer+0x99e>
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d11c      	bne.n	8007532 <USB_EPStartXfer+0x99e>
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007506:	b29b      	uxth	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750c:	4413      	add	r3, r2
 800750e:	643b      	str	r3, [r7, #64]	; 0x40
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	011a      	lsls	r2, r3, #4
 800751e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007520:	4413      	add	r3, r2
 8007522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	b29a      	uxth	r2, r3
 800752e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007530:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	895b      	ldrh	r3, [r3, #10]
 800753e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6959      	ldr	r1, [r3, #20]
 800754e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007552:	b29b      	uxth	r3, r3
 8007554:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007558:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800755c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007560:	6800      	ldr	r0, [r0, #0]
 8007562:	f001 fa8d 	bl	8008a80 <USB_WritePMA>
 8007566:	f000 bc5a 	b.w	8007e1e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f6:	4413      	add	r3, r2
 80075f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	011a      	lsls	r2, r3, #4
 8007608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800760a:	4413      	add	r3, r2
 800760c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007610:	65bb      	str	r3, [r7, #88]	; 0x58
 8007612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007616:	b29a      	uxth	r2, r3
 8007618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800761a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	891b      	ldrh	r3, [r3, #8]
 8007628:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6959      	ldr	r1, [r3, #20]
 8007638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763c:	b29b      	uxth	r3, r3
 800763e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007642:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007646:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800764a:	6800      	ldr	r0, [r0, #0]
 800764c:	f001 fa18 	bl	8008a80 <USB_WritePMA>
 8007650:	e3e5      	b.n	8007e1e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007678:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800769a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80076a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 81bc 	beq.w	8007a6c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d16d      	bne.n	80077ee <USB_EPStartXfer+0xc5a>
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	67bb      	str	r3, [r7, #120]	; 0x78
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007732:	4413      	add	r3, r2
 8007734:	67bb      	str	r3, [r7, #120]	; 0x78
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	011a      	lsls	r2, r3, #4
 8007744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007746:	4413      	add	r3, r2
 8007748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774c:	677b      	str	r3, [r7, #116]	; 0x74
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d112      	bne.n	800777c <USB_EPStartXfer+0xbe8>
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007760:	b29a      	uxth	r2, r3
 8007762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007774:	b29a      	uxth	r2, r3
 8007776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007778:	801a      	strh	r2, [r3, #0]
 800777a:	e060      	b.n	800783e <USB_EPStartXfer+0xcaa>
 800777c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007780:	2b3e      	cmp	r3, #62	; 0x3e
 8007782:	d817      	bhi.n	80077b4 <USB_EPStartXfer+0xc20>
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800778e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <USB_EPStartXfer+0xc10>
 800779a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800779e:	3301      	adds	r3, #1
 80077a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80077a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e044      	b.n	800783e <USB_EPStartXfer+0xcaa>
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <USB_EPStartXfer+0xc40>
 80077ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80077d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80077d8:	b29b      	uxth	r3, r3
 80077da:	029b      	lsls	r3, r3, #10
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	e027      	b.n	800783e <USB_EPStartXfer+0xcaa>
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d11f      	bne.n	800783e <USB_EPStartXfer+0xcaa>
 80077fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780c:	b29b      	uxth	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007814:	4413      	add	r3, r2
 8007816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800782c:	4413      	add	r3, r2
 800782e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	b29a      	uxth	r2, r3
 800783a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800783c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	895b      	ldrh	r3, [r3, #10]
 800784a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6959      	ldr	r1, [r3, #20]
 800785a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785e:	b29b      	uxth	r3, r3
 8007860:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007864:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007868:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f001 f907 	bl	8008a80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	441a      	add	r2, r3
 8007884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d90f      	bls.n	80078cc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	1ad2      	subs	r2, r2, r3
 80078be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	621a      	str	r2, [r3, #32]
 80078ca:	e00e      	b.n	80078ea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2200      	movs	r2, #0
 80078e8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8295 	beq.w	8007e1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d16d      	bne.n	80079e0 <USB_EPStartXfer+0xe4c>
 8007904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007924:	4413      	add	r3, r2
 8007926:	66bb      	str	r3, [r7, #104]	; 0x68
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007938:	4413      	add	r3, r2
 800793a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800793e:	667b      	str	r3, [r7, #100]	; 0x64
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <USB_EPStartXfer+0xdda>
 8007948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007952:	b29a      	uxth	r2, r3
 8007954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007966:	b29a      	uxth	r2, r3
 8007968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e063      	b.n	8007a36 <USB_EPStartXfer+0xea2>
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	2b3e      	cmp	r3, #62	; 0x3e
 8007974:	d817      	bhi.n	80079a6 <USB_EPStartXfer+0xe12>
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <USB_EPStartXfer+0xe02>
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007990:	3301      	adds	r3, #1
 8007992:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e047      	b.n	8007a36 <USB_EPStartXfer+0xea2>
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <USB_EPStartXfer+0xe32>
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	3b01      	subs	r3, #1
 80079c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e02a      	b.n	8007a36 <USB_EPStartXfer+0xea2>
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d122      	bne.n	8007a36 <USB_EPStartXfer+0xea2>
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	673b      	str	r3, [r7, #112]	; 0x70
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a10:	4413      	add	r3, r2
 8007a12:	673b      	str	r3, [r7, #112]	; 0x70
 8007a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	011a      	lsls	r2, r3, #4
 8007a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a24:	4413      	add	r3, r2
 8007a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	891b      	ldrh	r3, [r3, #8]
 8007a42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6959      	ldr	r1, [r3, #20]
 8007a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a64:	6800      	ldr	r0, [r0, #0]
 8007a66:	f001 f80b 	bl	8008a80 <USB_WritePMA>
 8007a6a:	e1d8      	b.n	8007e1e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d178      	bne.n	8007b6e <USB_EPStartXfer+0xfda>
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	011a      	lsls	r2, r3, #4
 8007ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab8:	4413      	add	r3, r2
 8007aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d116      	bne.n	8007af8 <USB_EPStartXfer+0xf64>
 8007aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e06b      	b.n	8007bd0 <USB_EPStartXfer+0x103c>
 8007af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afc:	2b3e      	cmp	r3, #62	; 0x3e
 8007afe:	d818      	bhi.n	8007b32 <USB_EPStartXfer+0xf9e>
 8007b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b04:	085b      	lsrs	r3, r3, #1
 8007b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USB_EPStartXfer+0xf8c>
 8007b16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	029b      	lsls	r3, r3, #10
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	e04e      	b.n	8007bd0 <USB_EPStartXfer+0x103c>
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <USB_EPStartXfer+0xfbe>
 8007b48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	029b      	lsls	r3, r3, #10
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e030      	b.n	8007bd0 <USB_EPStartXfer+0x103c>
 8007b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d128      	bne.n	8007bd0 <USB_EPStartXfer+0x103c>
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	011a      	lsls	r2, r3, #4
 8007bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	891b      	ldrh	r3, [r3, #8]
 8007bdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6959      	ldr	r1, [r3, #20]
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bf6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bfa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bfe:	6800      	ldr	r0, [r0, #0]
 8007c00:	f000 ff3e 	bl	8008a80 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c14:	441a      	add	r2, r3
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6a1a      	ldr	r2, [r3, #32]
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d90f      	bls.n	8007c5e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	621a      	str	r2, [r3, #32]
 8007c5c:	e00e      	b.n	8007c7c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80cc 	beq.w	8007e1e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d178      	bne.n	8007d96 <USB_EPStartXfer+0x1202>
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc8:	4413      	add	r3, r2
 8007cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	011a      	lsls	r2, r3, #4
 8007cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d116      	bne.n	8007d20 <USB_EPStartXfer+0x118c>
 8007cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d1c:	801a      	strh	r2, [r3, #0]
 8007d1e:	e064      	b.n	8007dea <USB_EPStartXfer+0x1256>
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d24:	2b3e      	cmp	r3, #62	; 0x3e
 8007d26:	d818      	bhi.n	8007d5a <USB_EPStartXfer+0x11c6>
 8007d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <USB_EPStartXfer+0x11b4>
 8007d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d42:	3301      	adds	r3, #1
 8007d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	029b      	lsls	r3, r3, #10
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e047      	b.n	8007dea <USB_EPStartXfer+0x1256>
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <USB_EPStartXfer+0x11e6>
 8007d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d74:	3b01      	subs	r3, #1
 8007d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e029      	b.n	8007dea <USB_EPStartXfer+0x1256>
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d121      	bne.n	8007dea <USB_EPStartXfer+0x1256>
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	011a      	lsls	r2, r3, #4
 8007dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6959      	ldr	r1, [r3, #20]
 8007e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e18:	6800      	ldr	r0, [r0, #0]
 8007e1a:	f000 fe31 	bl	8008a80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e40:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4c:	8013      	strh	r3, [r2, #0]
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e5a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e5e:	8812      	ldrh	r2, [r2, #0]
 8007e60:	f082 0210 	eor.w	r2, r2, #16
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e72:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	f082 0220 	eor.w	r2, r2, #32
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	441a      	add	r2, r3
 8007e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]
 8007eb6:	f000 bc9f 	b.w	80087f8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	7b1b      	ldrb	r3, [r3, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 80ae 	bne.w	8008028 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d917      	bls.n	8007f18 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	619a      	str	r2, [r3, #24]
 8007f16:	e00e      	b.n	8007f36 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	011a      	lsls	r2, r3, #4
 8007f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f72:	4413      	add	r3, r2
 8007f74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d116      	bne.n	8007fb2 <USB_EPStartXfer+0x141e>
 8007f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e3e8      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
 8007fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fb8:	d818      	bhi.n	8007fec <USB_EPStartXfer+0x1458>
 8007fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <USB_EPStartXfer+0x1446>
 8007fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	029b      	lsls	r3, r3, #10
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	e3cb      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <USB_EPStartXfer+0x1478>
 8008002:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008006:	3b01      	subs	r3, #1
 8008008:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800800c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008010:	b29b      	uxth	r3, r3
 8008012:	029b      	lsls	r3, r3, #10
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801e:	b29a      	uxth	r2, r3
 8008020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e3ad      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	2b02      	cmp	r3, #2
 8008036:	f040 8200 	bne.w	800843a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 8091 	bne.w	800816e <USB_EPStartXfer+0x15da>
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008068:	b29b      	uxth	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008070:	4413      	add	r3, r2
 8008072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	011a      	lsls	r2, r3, #4
 8008084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008088:	4413      	add	r3, r2
 800808a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800808e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <USB_EPStartXfer+0x153c>
 80080a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e083      	b.n	80081d8 <USB_EPStartXfer+0x1644>
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b3e      	cmp	r3, #62	; 0x3e
 80080de:	d820      	bhi.n	8008122 <USB_EPStartXfer+0x158e>
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <USB_EPStartXfer+0x157c>
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810a:	3301      	adds	r3, #1
 800810c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29a      	uxth	r2, r3
 800811a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800811e:	801a      	strh	r2, [r3, #0]
 8008120:	e05a      	b.n	80081d8 <USB_EPStartXfer+0x1644>
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <USB_EPStartXfer+0x15be>
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814c:	3b01      	subs	r3, #1
 800814e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008156:	b29b      	uxth	r3, r3
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e034      	b.n	80081d8 <USB_EPStartXfer+0x1644>
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d12c      	bne.n	80081d8 <USB_EPStartXfer+0x1644>
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a2:	4413      	add	r3, r2
 80081a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	011a      	lsls	r2, r3, #4
 80081b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ba:	4413      	add	r3, r2
 80081bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8091 	bne.w	800831a <USB_EPStartXfer+0x1786>
 80081f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008214:	b29b      	uxth	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800821c:	4413      	add	r3, r2
 800821e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	011a      	lsls	r2, r3, #4
 8008230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008234:	4413      	add	r3, r2
 8008236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800823a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d116      	bne.n	800827c <USB_EPStartXfer+0x16e8>
 800824e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800825a:	b29a      	uxth	r2, r3
 800825c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008272:	b29a      	uxth	r2, r3
 8008274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	e07c      	b.n	8008376 <USB_EPStartXfer+0x17e2>
 800827c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b3e      	cmp	r3, #62	; 0x3e
 800828a:	d820      	bhi.n	80082ce <USB_EPStartXfer+0x173a>
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <USB_EPStartXfer+0x1728>
 80082b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082b6:	3301      	adds	r3, #1
 80082b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	029b      	lsls	r3, r3, #10
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	e053      	b.n	8008376 <USB_EPStartXfer+0x17e2>
 80082ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <USB_EPStartXfer+0x176a>
 80082f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082f8:	3b01      	subs	r3, #1
 80082fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008302:	b29b      	uxth	r3, r3
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008310:	b29a      	uxth	r2, r3
 8008312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008316:	801a      	strh	r2, [r3, #0]
 8008318:	e02d      	b.n	8008376 <USB_EPStartXfer+0x17e2>
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d125      	bne.n	8008376 <USB_EPStartXfer+0x17e2>
 800832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008338:	b29b      	uxth	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008340:	4413      	add	r3, r2
 8008342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	011a      	lsls	r2, r3, #4
 8008354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008358:	4413      	add	r3, r2
 800835a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800835e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008374:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 81fe 	beq.w	8008784 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <USB_EPStartXfer+0x182c>
 80083b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10d      	bne.n	80083dc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 81db 	bne.w	8008784 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 81d4 	bne.w	8008784 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80083dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008402:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008434:	b29b      	uxth	r3, r3
 8008436:	8013      	strh	r3, [r2, #0]
 8008438:	e1a4      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800843a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	78db      	ldrb	r3, [r3, #3]
 8008446:	2b01      	cmp	r3, #1
 8008448:	f040 819a 	bne.w	8008780 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d917      	bls.n	8008498 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	619a      	str	r2, [r3, #24]
 8008496:	e00e      	b.n	80084b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2200      	movs	r2, #0
 80084b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d178      	bne.n	80085b8 <USB_EPStartXfer+0x1a24>
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084ea:	4413      	add	r3, r2
 80084ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	011a      	lsls	r2, r3, #4
 80084fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008502:	4413      	add	r3, r2
 8008504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800850c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d116      	bne.n	8008542 <USB_EPStartXfer+0x19ae>
 8008514:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e06b      	b.n	800861a <USB_EPStartXfer+0x1a86>
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	2b3e      	cmp	r3, #62	; 0x3e
 8008548:	d818      	bhi.n	800857c <USB_EPStartXfer+0x19e8>
 800854a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d004      	beq.n	800856a <USB_EPStartXfer+0x19d6>
 8008560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008564:	3301      	adds	r3, #1
 8008566:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800856a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856e:	b29b      	uxth	r3, r3
 8008570:	029b      	lsls	r3, r3, #10
 8008572:	b29a      	uxth	r2, r3
 8008574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008578:	801a      	strh	r2, [r3, #0]
 800857a:	e04e      	b.n	800861a <USB_EPStartXfer+0x1a86>
 800857c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <USB_EPStartXfer+0x1a08>
 8008592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008596:	3b01      	subs	r3, #1
 8008598:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800859c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	e030      	b.n	800861a <USB_EPStartXfer+0x1a86>
 80085b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d128      	bne.n	800861a <USB_EPStartXfer+0x1a86>
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ec:	4413      	add	r3, r2
 80085ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	011a      	lsls	r2, r3, #4
 8008600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008604:	4413      	add	r3, r2
 8008606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800860a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800860e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008612:	b29a      	uxth	r2, r3
 8008614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d178      	bne.n	800872a <USB_EPStartXfer+0x1b96>
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008654:	b29b      	uxth	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800865c:	4413      	add	r3, r2
 800865e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	011a      	lsls	r2, r3, #4
 8008670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008674:	4413      	add	r3, r2
 8008676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800867a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800867e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d116      	bne.n	80086b4 <USB_EPStartXfer+0x1b20>
 8008686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008692:	b29a      	uxth	r2, r3
 8008694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086b0:	801a      	strh	r2, [r3, #0]
 80086b2:	e067      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
 80086b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b8:	2b3e      	cmp	r3, #62	; 0x3e
 80086ba:	d818      	bhi.n	80086ee <USB_EPStartXfer+0x1b5a>
 80086bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <USB_EPStartXfer+0x1b48>
 80086d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086d6:	3301      	adds	r3, #1
 80086d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	029b      	lsls	r3, r3, #10
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e04a      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
 80086ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USB_EPStartXfer+0x1b7a>
 8008704:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008708:	3b01      	subs	r3, #1
 800870a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800870e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008712:	b29b      	uxth	r3, r3
 8008714:	029b      	lsls	r3, r3, #10
 8008716:	b29b      	uxth	r3, r3
 8008718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008720:	b29a      	uxth	r2, r3
 8008722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e02c      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d124      	bne.n	8008784 <USB_EPStartXfer+0x1bf0>
 800873a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008748:	b29b      	uxth	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	4413      	add	r3, r2
 8008752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	011a      	lsls	r2, r3, #4
 8008764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008768:	4413      	add	r3, r2
 800876a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800876e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008776:	b29a      	uxth	r2, r3
 8008778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	e001      	b.n	8008784 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e03a      	b.n	80087fa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	441a      	add	r2, r3
 80087e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d020      	beq.n	8008858 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	81bb      	strh	r3, [r7, #12]
 800882e:	89bb      	ldrh	r3, [r7, #12]
 8008830:	f083 0310 	eor.w	r3, r3, #16
 8008834:	81bb      	strh	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	441a      	add	r2, r3
 8008840:	89bb      	ldrh	r3, [r7, #12]
 8008842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800884a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008852:	b29b      	uxth	r3, r3
 8008854:	8013      	strh	r3, [r2, #0]
 8008856:	e01f      	b.n	8008898 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800886a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886e:	81fb      	strh	r3, [r7, #14]
 8008870:	89fb      	ldrh	r3, [r7, #14]
 8008872:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008876:	81fb      	strh	r3, [r7, #14]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	89fb      	ldrh	r3, [r7, #14]
 8008884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008894:	b29b      	uxth	r3, r3
 8008896:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	7b1b      	ldrb	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 809d 	bne.w	80089f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d04c      	beq.n	800895a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	823b      	strh	r3, [r7, #16]
 80088ce:	8a3b      	ldrh	r3, [r7, #16]
 80088d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01b      	beq.n	8008910 <USB_EPClearStall+0x6c>
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	81fb      	strh	r3, [r7, #14]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	89fb      	ldrh	r3, [r7, #14]
 80088fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800890c:	b29b      	uxth	r3, r3
 800890e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	78db      	ldrb	r3, [r3, #3]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d06c      	beq.n	80089f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800892a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800892e:	81bb      	strh	r3, [r7, #12]
 8008930:	89bb      	ldrh	r3, [r7, #12]
 8008932:	f083 0320 	eor.w	r3, r3, #32
 8008936:	81bb      	strh	r3, [r7, #12]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	441a      	add	r2, r3
 8008942:	89bb      	ldrh	r3, [r7, #12]
 8008944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]
 8008958:	e04b      	b.n	80089f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	82fb      	strh	r3, [r7, #22]
 8008968:	8afb      	ldrh	r3, [r7, #22]
 800896a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01b      	beq.n	80089aa <USB_EPClearStall+0x106>
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008988:	82bb      	strh	r3, [r7, #20]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	441a      	add	r2, r3
 8008994:	8abb      	ldrh	r3, [r7, #20]
 8008996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800899e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	827b      	strh	r3, [r7, #18]
 80089c2:	8a7b      	ldrh	r3, [r7, #18]
 80089c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089c8:	827b      	strh	r3, [r7, #18]
 80089ca:	8a7b      	ldrh	r3, [r7, #18]
 80089cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089d0:	827b      	strh	r3, [r7, #18]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	441a      	add	r2, r3
 80089dc:	8a7b      	ldrh	r3, [r7, #18]
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr

080089fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2280      	movs	r2, #128	; 0x80
 8008a14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr

08008a6a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr

08008a80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b08d      	sub	sp, #52	; 0x34
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	460b      	mov	r3, r1
 8008a90:	80fb      	strh	r3, [r7, #6]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a96:	88bb      	ldrh	r3, [r7, #4]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	005a      	lsls	r2, r3, #1
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab8:	e01e      	b.n	8008af8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	3302      	adds	r3, #2
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	3301      	adds	r3, #1
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	3b01      	subs	r3, #1
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1dd      	bne.n	8008aba <USB_WritePMA+0x3a>
  }
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	3734      	adds	r7, #52	; 0x34
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr

08008b0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b08b      	sub	sp, #44	; 0x2c
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	460b      	mov	r3, r1
 8008b1a:	80fb      	strh	r3, [r7, #6]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b20:	88bb      	ldrh	r3, [r7, #4]
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b30:	88fb      	ldrh	r3, [r7, #6]
 8008b32:	005a      	lsls	r2, r3, #1
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
 8008b42:	e01b      	b.n	8008b7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	3302      	adds	r3, #2
 8008b50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	3302      	adds	r3, #2
 8008b74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e0      	bne.n	8008b44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b82:	88bb      	ldrh	r3, [r7, #4]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	701a      	strb	r2, [r3, #0]
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	372c      	adds	r7, #44	; 0x2c
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc80      	pop	{r7}
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7c1b      	ldrb	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d115      	bne.n	8008bec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	2181      	movs	r1, #129	; 0x81
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fe90 	bl	800a8ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd8:	2202      	movs	r2, #2
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 fe86 	bl	800a8ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008bea:	e012      	b.n	8008c12 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bec:	2340      	movs	r3, #64	; 0x40
 8008bee:	2202      	movs	r2, #2
 8008bf0:	2181      	movs	r1, #129	; 0x81
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 fe7b 	bl	800a8ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	2202      	movs	r2, #2
 8008c02:	2101      	movs	r1, #1
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fe72 	bl	800a8ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c12:	2308      	movs	r3, #8
 8008c14:	2203      	movs	r2, #3
 8008c16:	2182      	movs	r1, #130	; 0x82
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 fe68 	bl	800a8ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c28:	f001 ff88 	bl	800ab3c <USBD_static_malloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
   memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 fff1 	bl	800ac28 <memset>

  if (pdev->pClassData == NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <USBD_CDC_Init+0xae>
  {
    ret = 1U;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
 8008c54:	e026      	b.n	8008ca4 <USBD_CDC_Init+0xfc>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	7c1b      	ldrb	r3, [r3, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <USBD_CDC_Init+0xec>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 ff1f 	bl	800aad0 <USBD_LL_PrepareReceive>
 8008c92:	e007      	b.n	8008ca4 <USBD_CDC_Init+0xfc>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 ff16 	bl	800aad0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cbe:	2181      	movs	r1, #129	; 0x81
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fe3a 	bl	800a93a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fe33 	bl	800a93a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cdc:	2182      	movs	r1, #130	; 0x82
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fe2b 	bl	800a93a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00e      	beq.n	8008d12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 ff25 	bl	800ab54 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d039      	beq.n	8008dba <USBD_CDC_Setup+0x9e>
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d17f      	bne.n	8008e4a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	88db      	ldrh	r3, [r3, #6]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d029      	beq.n	8008da6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da11      	bge.n	8008d80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	88d2      	ldrh	r2, [r2, #6]
 8008d6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d70:	6939      	ldr	r1, [r7, #16]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	461a      	mov	r2, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fa0a 	bl	800a192 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d7e:	e06b      	b.n	8008e58 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	785a      	ldrb	r2, [r3, #1]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d96:	6939      	ldr	r1, [r7, #16]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	88db      	ldrh	r3, [r3, #6]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fa25 	bl	800a1ee <USBD_CtlPrepareRx>
      break;
 8008da4:	e058      	b.n	8008e58 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	7850      	ldrb	r0, [r2, #1]
 8008db2:	2200      	movs	r2, #0
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	4798      	blx	r3
      break;
 8008db8:	e04e      	b.n	8008e58 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	785b      	ldrb	r3, [r3, #1]
 8008dbe:	2b0b      	cmp	r3, #11
 8008dc0:	d02e      	beq.n	8008e20 <USBD_CDC_Setup+0x104>
 8008dc2:	2b0b      	cmp	r3, #11
 8008dc4:	dc38      	bgt.n	8008e38 <USBD_CDC_Setup+0x11c>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <USBD_CDC_Setup+0xb4>
 8008dca:	2b0a      	cmp	r3, #10
 8008dcc:	d014      	beq.n	8008df8 <USBD_CDC_Setup+0xdc>
 8008dce:	e033      	b.n	8008e38 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d107      	bne.n	8008dea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dda:	f107 030c 	add.w	r3, r7, #12
 8008dde:	2202      	movs	r2, #2
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 f9d5 	bl	800a192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008de8:	e02e      	b.n	8008e48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f966 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 8008df2:	2302      	movs	r3, #2
 8008df4:	75fb      	strb	r3, [r7, #23]
          break;
 8008df6:	e027      	b.n	8008e48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d107      	bne.n	8008e12 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e02:	f107 030f 	add.w	r3, r7, #15
 8008e06:	2201      	movs	r2, #1
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 f9c1 	bl	800a192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e10:	e01a      	b.n	8008e48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f952 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e1e:	e013      	b.n	8008e48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d00d      	beq.n	8008e46 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f946 	bl	800a0be <USBD_CtlError>
            ret = USBD_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e36:	e006      	b.n	8008e46 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f93f 	bl	800a0be <USBD_CtlError>
          ret = USBD_FAIL;
 8008e40:	2302      	movs	r3, #2
 8008e42:	75fb      	strb	r3, [r7, #23]
          break;
 8008e44:	e000      	b.n	8008e48 <USBD_CDC_Setup+0x12c>
          break;
 8008e46:	bf00      	nop
      }
      break;
 8008e48:	e006      	b.n	8008e58 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 f936 	bl	800a0be <USBD_CtlError>
      ret = USBD_FAIL;
 8008e52:	2302      	movs	r3, #2
 8008e54:	75fb      	strb	r3, [r7, #23]
      break;
 8008e56:	bf00      	nop
  }

  return ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d03a      	beq.n	8008efe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	440b      	add	r3, r1
 8008e96:	331c      	adds	r3, #28
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d029      	beq.n	8008ef2 <USBD_CDC_DataIn+0x90>
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	331c      	adds	r3, #28
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	78f9      	ldrb	r1, [r7, #3]
 8008eb2:	68b8      	ldr	r0, [r7, #8]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	4403      	add	r3, r0
 8008ebe:	3338      	adds	r3, #56	; 0x38
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d110      	bne.n	8008ef2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	331c      	adds	r3, #28
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ee4:	78f9      	ldrb	r1, [r7, #3]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2200      	movs	r2, #0
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fdcd 	bl	800aa8a <USBD_LL_Transmit>
 8008ef0:	e003      	b.n	8008efa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e000      	b.n	8008f00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008efe:	2302      	movs	r3, #2
  }
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fdf8 	bl	800ab16 <USBD_LL_GetRxDataSize>
 8008f26:	4602      	mov	r2, r0
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4798      	blx	r3

    return USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e000      	b.n	8008f56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f54:	2302      	movs	r3, #2
  }
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d015      	beq.n	8008fa4 <USBD_CDC_EP0_RxReady+0x46>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f7e:	2bff      	cmp	r3, #255	; 0xff
 8008f80:	d010      	beq.n	8008fa4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	22ff      	movs	r2, #255	; 0xff
 8008fa0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2243      	movs	r2, #67	; 0x43
 8008fbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fbe:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	2000009c 	.word	0x2000009c

08008fd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2243      	movs	r2, #67	; 0x43
 8008fdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008fde:	4b03      	ldr	r3, [pc, #12]	; (8008fec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000058 	.word	0x20000058

08008ff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2243      	movs	r2, #67	; 0x43
 8008ffc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ffe:	4b03      	ldr	r3, [pc, #12]	; (800900c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	200000e0 	.word	0x200000e0

08009010 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	220a      	movs	r2, #10
 800901c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000014 	.word	0x20000014

08009030 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800903a:	2302      	movs	r3, #2
 800903c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr

0800905c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800907a:	88fa      	ldrh	r2, [r7, #6]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr

0800908e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr

080090b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01c      	beq.n	8009108 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d115      	bne.n	8009104 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	2181      	movs	r1, #129	; 0x81
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 fcc5 	bl	800aa8a <USBD_LL_Transmit>

      return USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	e002      	b.n	800910a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009120:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009128:	2b00      	cmp	r3, #0
 800912a:	d017      	beq.n	800915c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d109      	bne.n	8009148 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800913a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800913e:	2101      	movs	r1, #1
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fcc5 	bl	800aad0 <USBD_LL_PrepareReceive>
 8009146:	e007      	b.n	8009158 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fcbc 	bl	800aad0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	e000      	b.n	800915e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800915c:	2302      	movs	r3, #2
  }
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	4613      	mov	r3, r2
 8009172:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800917a:	2302      	movs	r3, #2
 800917c:	e01a      	b.n	80091b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	79fa      	ldrb	r2, [r7, #7]
 80091aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 fb29 	bl	800a804 <USBD_LL_Init>

  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
 80091dc:	e001      	b.n	80091e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091de:	2302      	movs	r3, #2
 80091e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr

080091ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fb5e 	bl	800a8b8 <USBD_LL_Start>

  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr

0800921a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009226:	2302      	movs	r3, #2
 8009228:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00c      	beq.n	800924e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	4611      	mov	r1, r2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fed8 	bl	800a046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d016      	beq.n	80092e8 <USBD_LL_SetupStage+0x6a>
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d81c      	bhi.n	80092f8 <USBD_LL_SetupStage+0x7a>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <USBD_LL_SetupStage+0x4a>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d008      	beq.n	80092d8 <USBD_LL_SetupStage+0x5a>
 80092c6:	e017      	b.n	80092f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9cb 	bl	800966c <USBD_StdDevReq>
      break;
 80092d6:	e01a      	b.n	800930e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa2d 	bl	8009740 <USBD_StdItfReq>
      break;
 80092e6:	e012      	b.n	800930e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa6d 	bl	80097d0 <USBD_StdEPReq>
      break;
 80092f6:	e00a      	b.n	800930e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 fb36 	bl	800a978 <USBD_LL_StallEP>
      break;
 800930c:	bf00      	nop
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d14b      	bne.n	80093c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009332:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800933a:	2b03      	cmp	r3, #3
 800933c:	d134      	bne.n	80093a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	429a      	cmp	r2, r3
 8009348:	d919      	bls.n	800937e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	1ad2      	subs	r2, r2, r3
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009360:	429a      	cmp	r2, r3
 8009362:	d203      	bcs.n	800936c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009368:	b29b      	uxth	r3, r3
 800936a:	e002      	b.n	8009372 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009370:	b29b      	uxth	r3, r3
 8009372:	461a      	mov	r2, r3
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 ff57 	bl	800a22a <USBD_CtlContinueRx>
 800937c:	e038      	b.n	80093f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009390:	2b03      	cmp	r3, #3
 8009392:	d105      	bne.n	80093a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 ff54 	bl	800a24e <USBD_CtlSendStatus>
 80093a6:	e023      	b.n	80093f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d11e      	bne.n	80093f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093ba:	2100      	movs	r1, #0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f001 fadb 	bl	800a978 <USBD_LL_StallEP>
 80093c2:	e015      	b.n	80093f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00d      	beq.n	80093ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d108      	bne.n	80093ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	7afa      	ldrb	r2, [r7, #11]
 80093e4:	4611      	mov	r1, r2
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	4798      	blx	r3
 80093ea:	e001      	b.n	80093f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093ec:	2302      	movs	r3, #2
 80093ee:	e000      	b.n	80093f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	460b      	mov	r3, r1
 8009404:	607a      	str	r2, [r7, #4]
 8009406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d17f      	bne.n	800950e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3314      	adds	r3, #20
 8009412:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800941a:	2b02      	cmp	r3, #2
 800941c:	d15c      	bne.n	80094d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	429a      	cmp	r2, r3
 8009428:	d915      	bls.n	8009456 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	b29b      	uxth	r3, r3
 800943e:	461a      	mov	r2, r3
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fec1 	bl	800a1ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f001 fb3e 	bl	800aad0 <USBD_LL_PrepareReceive>
 8009454:	e04e      	b.n	80094f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	6912      	ldr	r2, [r2, #16]
 800945e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009462:	fb01 f202 	mul.w	r2, r1, r2
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d11c      	bne.n	80094a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009474:	429a      	cmp	r2, r3
 8009476:	d316      	bcc.n	80094a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009482:	429a      	cmp	r2, r3
 8009484:	d20f      	bcs.n	80094a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fe9d 	bl	800a1ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009498:	2300      	movs	r3, #0
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f001 fb16 	bl	800aad0 <USBD_LL_PrepareReceive>
 80094a4:	e026      	b.n	80094f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d105      	bne.n	80094c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f001 fa54 	bl	800a978 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fecf 	bl	800a274 <USBD_CtlReceiveStatus>
 80094d6:	e00d      	b.n	80094f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d004      	beq.n	80094ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d103      	bne.n	80094f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	; 0x80
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f001 fa42 	bl	800a978 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d11d      	bne.n	800953a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fe81 	bl	8009206 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800950c:	e015      	b.n	800953a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00d      	beq.n	8009536 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009520:	2b03      	cmp	r3, #3
 8009522:	d108      	bne.n	8009536 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	7afa      	ldrb	r2, [r7, #11]
 800952e:	4611      	mov	r1, r2
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	4798      	blx	r3
 8009534:	e001      	b.n	800953a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009536:	2302      	movs	r3, #2
 8009538:	e000      	b.n	800953c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f9cb 	bl	800a8ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2240      	movs	r2, #64	; 0x40
 8009564:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009568:	2340      	movs	r3, #64	; 0x40
 800956a:	2200      	movs	r2, #0
 800956c:	2180      	movs	r1, #128	; 0x80
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f9bd 	bl	800a8ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2240      	movs	r2, #64	; 0x40
 800957e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6852      	ldr	r2, [r2, #4]
 80095b4:	b2d2      	uxtb	r2, r2
 80095b6:	4611      	mov	r1, r2
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
  }

  return USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	bc80      	pop	{r7}
 80095e2:	4770      	bx	lr

080095e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2204      	movs	r2, #4
 80095fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr

0800960c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961a:	2b04      	cmp	r3, #4
 800961c:	d105      	bne.n	800962a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	2b03      	cmp	r3, #3
 8009646:	d10b      	bne.n	8009660 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009682:	2b40      	cmp	r3, #64	; 0x40
 8009684:	d005      	beq.n	8009692 <USBD_StdDevReq+0x26>
 8009686:	2b40      	cmp	r3, #64	; 0x40
 8009688:	d84f      	bhi.n	800972a <USBD_StdDevReq+0xbe>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d009      	beq.n	80096a2 <USBD_StdDevReq+0x36>
 800968e:	2b20      	cmp	r3, #32
 8009690:	d14b      	bne.n	800972a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
      break;
 80096a0:	e048      	b.n	8009734 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d839      	bhi.n	800971e <USBD_StdDevReq+0xb2>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_StdDevReq+0x44>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	08009701 	.word	0x08009701
 80096b4:	08009715 	.word	0x08009715
 80096b8:	0800971f 	.word	0x0800971f
 80096bc:	0800970b 	.word	0x0800970b
 80096c0:	0800971f 	.word	0x0800971f
 80096c4:	080096e3 	.word	0x080096e3
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	0800971f 	.word	0x0800971f
 80096d0:	080096f7 	.word	0x080096f7
 80096d4:	080096ed 	.word	0x080096ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f9dc 	bl	8009a98 <USBD_GetDescriptor>
          break;
 80096e0:	e022      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fb3f 	bl	8009d68 <USBD_SetAddress>
          break;
 80096ea:	e01d      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fb7e 	bl	8009df0 <USBD_SetConfig>
          break;
 80096f4:	e018      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fc07 	bl	8009f0c <USBD_GetConfig>
          break;
 80096fe:	e013      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fc37 	bl	8009f76 <USBD_GetStatus>
          break;
 8009708:	e00e      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc65 	bl	8009fdc <USBD_SetFeature>
          break;
 8009712:	e009      	b.n	8009728 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fc74 	bl	800a004 <USBD_ClrFeature>
          break;
 800971c:	e004      	b.n	8009728 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fccc 	bl	800a0be <USBD_CtlError>
          break;
 8009726:	bf00      	nop
      }
      break;
 8009728:	e004      	b.n	8009734 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fcc6 	bl	800a0be <USBD_CtlError>
      break;
 8009732:	bf00      	nop
  }

  return ret;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d005      	beq.n	8009766 <USBD_StdItfReq+0x26>
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d82e      	bhi.n	80097bc <USBD_StdItfReq+0x7c>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <USBD_StdItfReq+0x26>
 8009762:	2b20      	cmp	r3, #32
 8009764:	d12a      	bne.n	80097bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976c:	3b01      	subs	r3, #1
 800976e:	2b02      	cmp	r3, #2
 8009770:	d81d      	bhi.n	80097ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	889b      	ldrh	r3, [r3, #4]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b01      	cmp	r3, #1
 800977a:	d813      	bhi.n	80097a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	88db      	ldrh	r3, [r3, #6]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d110      	bne.n	80097b8 <USBD_StdItfReq+0x78>
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10d      	bne.n	80097b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fd56 	bl	800a24e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097a2:	e009      	b.n	80097b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fc89 	bl	800a0be <USBD_CtlError>
          break;
 80097ac:	e004      	b.n	80097b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fc84 	bl	800a0be <USBD_CtlError>
          break;
 80097b6:	e000      	b.n	80097ba <USBD_StdItfReq+0x7a>
          break;
 80097b8:	bf00      	nop
      }
      break;
 80097ba:	e004      	b.n	80097c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc7d 	bl	800a0be <USBD_CtlError>
      break;
 80097c4:	bf00      	nop
  }

  return USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	889b      	ldrh	r3, [r3, #4]
 80097e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d007      	beq.n	8009800 <USBD_StdEPReq+0x30>
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	f200 8146 	bhi.w	8009a82 <USBD_StdEPReq+0x2b2>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <USBD_StdEPReq+0x40>
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	f040 8141 	bne.w	8009a82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
      break;
 800980e:	e13d      	b.n	8009a8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009818:	2b20      	cmp	r3, #32
 800981a:	d10a      	bne.n	8009832 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	e12d      	b.n	8009a8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d007      	beq.n	800984a <USBD_StdEPReq+0x7a>
 800983a:	2b03      	cmp	r3, #3
 800983c:	f300 811b 	bgt.w	8009a76 <USBD_StdEPReq+0x2a6>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d072      	beq.n	800992a <USBD_StdEPReq+0x15a>
 8009844:	2b01      	cmp	r3, #1
 8009846:	d03a      	beq.n	80098be <USBD_StdEPReq+0xee>
 8009848:	e115      	b.n	8009a76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009850:	2b02      	cmp	r3, #2
 8009852:	d002      	beq.n	800985a <USBD_StdEPReq+0x8a>
 8009854:	2b03      	cmp	r3, #3
 8009856:	d015      	beq.n	8009884 <USBD_StdEPReq+0xb4>
 8009858:	e02b      	b.n	80098b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <USBD_StdEPReq+0xaa>
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d009      	beq.n	800987a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f884 	bl	800a978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009870:	2180      	movs	r1, #128	; 0x80
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 f880 	bl	800a978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009878:	e020      	b.n	80098bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fc1e 	bl	800a0be <USBD_CtlError>
              break;
 8009882:	e01b      	b.n	80098bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	885b      	ldrh	r3, [r3, #2]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10e      	bne.n	80098aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <USBD_StdEPReq+0xda>
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b80      	cmp	r3, #128	; 0x80
 8009896:	d008      	beq.n	80098aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 f867 	bl	800a978 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fccf 	bl	800a24e <USBD_CtlSendStatus>

              break;
 80098b0:	e004      	b.n	80098bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fc02 	bl	800a0be <USBD_CtlError>
              break;
 80098ba:	bf00      	nop
          }
          break;
 80098bc:	e0e0      	b.n	8009a80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d002      	beq.n	80098ce <USBD_StdEPReq+0xfe>
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d015      	beq.n	80098f8 <USBD_StdEPReq+0x128>
 80098cc:	e026      	b.n	800991c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00c      	beq.n	80098ee <USBD_StdEPReq+0x11e>
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	2b80      	cmp	r3, #128	; 0x80
 80098d8:	d009      	beq.n	80098ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 f84a 	bl	800a978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098e4:	2180      	movs	r1, #128	; 0x80
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 f846 	bl	800a978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098ec:	e01c      	b.n	8009928 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fbe4 	bl	800a0be <USBD_CtlError>
              break;
 80098f6:	e017      	b.n	8009928 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d112      	bne.n	8009926 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f851 	bl	800a9b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc9a 	bl	800a24e <USBD_CtlSendStatus>
              }
              break;
 800991a:	e004      	b.n	8009926 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fbcd 	bl	800a0be <USBD_CtlError>
              break;
 8009924:	e000      	b.n	8009928 <USBD_StdEPReq+0x158>
              break;
 8009926:	bf00      	nop
          }
          break;
 8009928:	e0aa      	b.n	8009a80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009930:	2b02      	cmp	r3, #2
 8009932:	d002      	beq.n	800993a <USBD_StdEPReq+0x16a>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d032      	beq.n	800999e <USBD_StdEPReq+0x1ce>
 8009938:	e097      	b.n	8009a6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <USBD_StdEPReq+0x180>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d004      	beq.n	8009950 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fbb8 	bl	800a0be <USBD_CtlError>
                break;
 800994e:	e091      	b.n	8009a74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	da0b      	bge.n	8009970 <USBD_StdEPReq+0x1a0>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	3310      	adds	r3, #16
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4413      	add	r3, r2
 800996c:	3304      	adds	r3, #4
 800996e:	e00b      	b.n	8009988 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	3304      	adds	r3, #4
 8009988:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2202      	movs	r2, #2
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fbfb 	bl	800a192 <USBD_CtlSendData>
              break;
 800999c:	e06a      	b.n	8009a74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800999e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da11      	bge.n	80099ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3318      	adds	r3, #24
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d117      	bne.n	80099f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb7b 	bl	800a0be <USBD_CtlError>
                  break;
 80099c8:	e054      	b.n	8009a74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fb68 	bl	800a0be <USBD_CtlError>
                  break;
 80099ee:	e041      	b.n	8009a74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da0b      	bge.n	8009a10 <USBD_StdEPReq+0x240>
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	3310      	adds	r3, #16
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	e00b      	b.n	8009a28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	3304      	adds	r3, #4
 8009a28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <USBD_StdEPReq+0x266>
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b80      	cmp	r3, #128	; 0x80
 8009a34:	d103      	bne.n	8009a3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e00e      	b.n	8009a5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 ffd6 	bl	800a9f4 <USBD_LL_IsStallEP>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e002      	b.n	8009a5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fb95 	bl	800a192 <USBD_CtlSendData>
              break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb26 	bl	800a0be <USBD_CtlError>
              break;
 8009a72:	bf00      	nop
          }
          break;
 8009a74:	e004      	b.n	8009a80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fb20 	bl	800a0be <USBD_CtlError>
          break;
 8009a7e:	bf00      	nop
      }
      break;
 8009a80:	e004      	b.n	8009a8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb1a 	bl	800a0be <USBD_CtlError>
      break;
 8009a8a:	bf00      	nop
  }

  return ret;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	2b06      	cmp	r3, #6
 8009aba:	f200 8128 	bhi.w	8009d0e <USBD_GetDescriptor+0x276>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_GetDescriptor+0x2c>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009b39 	.word	0x08009b39
 8009ad0:	08009d0f 	.word	0x08009d0f
 8009ad4:	08009d0f 	.word	0x08009d0f
 8009ad8:	08009caf 	.word	0x08009caf
 8009adc:	08009cdb 	.word	0x08009cdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
      break;
 8009af6:	e112      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7c1b      	ldrb	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4798      	blx	r3
 8009b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	2202      	movs	r2, #2
 8009b18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b1a:	e100      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	f107 0208 	add.w	r2, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	2202      	movs	r2, #2
 8009b34:	701a      	strb	r2, [r3, #0]
      break;
 8009b36:	e0f2      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	885b      	ldrh	r3, [r3, #2]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	f200 80ac 	bhi.w	8009c9c <USBD_GetDescriptor+0x204>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <USBD_GetDescriptor+0xb4>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b99 	.word	0x08009b99
 8009b54:	08009bcd 	.word	0x08009bcd
 8009b58:	08009c01 	.word	0x08009c01
 8009b5c:	08009c35 	.word	0x08009c35
 8009b60:	08009c69 	.word	0x08009c69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e091      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa97 	bl	800a0be <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e089      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e077      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa7d 	bl	800a0be <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e06f      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e05d      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa63 	bl	800a0be <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e055      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e043      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa49 	bl	800a0be <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e03b      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e029      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa2f 	bl	800a0be <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e021      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e00f      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa15 	bl	800a0be <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e007      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa0d 	bl	800a0be <USBD_CtlError>
          err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009caa:	e038      	b.n	8009d1e <USBD_GetDescriptor+0x286>
 8009cac:	e037      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	f107 0208 	add.w	r2, r7, #8
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4798      	blx	r3
 8009cc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cc8:	e029      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9f6 	bl	800a0be <USBD_CtlError>
        err++;
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009cd8:	e021      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7c1b      	ldrb	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10d      	bne.n	8009cfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	f107 0208 	add.w	r2, r7, #8
 8009cee:	4610      	mov	r0, r2
 8009cf0:	4798      	blx	r3
 8009cf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	2207      	movs	r2, #7
 8009cfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cfc:	e00f      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f9dc 	bl	800a0be <USBD_CtlError>
        err++;
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d0c:	e007      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9d4 	bl	800a0be <USBD_CtlError>
      err++;
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d1c:	bf00      	nop
  }

  if (err != 0U)
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d11c      	bne.n	8009d5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d24:	893b      	ldrh	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d011      	beq.n	8009d4e <USBD_GetDescriptor+0x2b6>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	88db      	ldrh	r3, [r3, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00d      	beq.n	8009d4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88da      	ldrh	r2, [r3, #6]
 8009d36:	893b      	ldrh	r3, [r7, #8]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	bf28      	it	cs
 8009d3c:	4613      	movcs	r3, r2
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d42:	893b      	ldrh	r3, [r7, #8]
 8009d44:	461a      	mov	r2, r3
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fa22 	bl	800a192 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	88db      	ldrh	r3, [r3, #6]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa79 	bl	800a24e <USBD_CtlSendStatus>
 8009d5c:	e000      	b.n	8009d60 <USBD_GetDescriptor+0x2c8>
    return;
 8009d5e:	bf00      	nop
    }
  }
}
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop

08009d68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	889b      	ldrh	r3, [r3, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d130      	bne.n	8009ddc <USBD_SetAddress+0x74>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d12c      	bne.n	8009ddc <USBD_SetAddress+0x74>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	885b      	ldrh	r3, [r3, #2]
 8009d86:	2b7f      	cmp	r3, #127	; 0x7f
 8009d88:	d828      	bhi.n	8009ddc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d104      	bne.n	8009daa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f98b 	bl	800a0be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da8:	e01d      	b.n	8009de6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7bfa      	ldrb	r2, [r7, #15]
 8009dae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fe48 	bl	800aa4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa46 	bl	800a24e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd0:	e009      	b.n	8009de6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	e004      	b.n	8009de6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f96d 	bl	800a0be <USBD_CtlError>
  }
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	885b      	ldrh	r3, [r3, #2]
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e04:	4b40      	ldr	r3, [pc, #256]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d904      	bls.n	8009e16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f955 	bl	800a0be <USBD_CtlError>
 8009e14:	e075      	b.n	8009f02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d002      	beq.n	8009e26 <USBD_SetConfig+0x36>
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d023      	beq.n	8009e6c <USBD_SetConfig+0x7c>
 8009e24:	e062      	b.n	8009eec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e26:	4b38      	ldr	r3, [pc, #224]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01a      	beq.n	8009e64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e2e:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e40:	4b31      	ldr	r3, [pc, #196]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff f9e7 	bl	800921a <USBD_SetClassConfig>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d104      	bne.n	8009e5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f932 	bl	800a0be <USBD_CtlError>
            return;
 8009e5a:	e052      	b.n	8009f02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f9f6 	bl	800a24e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e62:	e04e      	b.n	8009f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9f2 	bl	800a24e <USBD_CtlSendStatus>
        break;
 8009e6a:	e04a      	b.n	8009f02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e6c:	4b26      	ldr	r3, [pc, #152]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d112      	bne.n	8009e9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e7c:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e86:	4b20      	ldr	r3, [pc, #128]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff f9e3 	bl	8009258 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f9db 	bl	800a24e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e98:	e033      	b.n	8009f02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <USBD_SetConfig+0x118>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d01d      	beq.n	8009ee4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff f9d1 	bl	8009258 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <USBD_SetConfig+0x118>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff f9a7 	bl	800921a <USBD_SetClassConfig>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d104      	bne.n	8009edc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f8f2 	bl	800a0be <USBD_CtlError>
            return;
 8009eda:	e012      	b.n	8009f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9b6 	bl	800a24e <USBD_CtlSendStatus>
        break;
 8009ee2:	e00e      	b.n	8009f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9b2 	bl	800a24e <USBD_CtlSendStatus>
        break;
 8009eea:	e00a      	b.n	8009f02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f8e5 	bl	800a0be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <USBD_SetConfig+0x118>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff f9ac 	bl	8009258 <USBD_ClrClassConfig>
        break;
 8009f00:	bf00      	nop
    }
  }
}
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000488 	.word	0x20000488

08009f0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	88db      	ldrh	r3, [r3, #6]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d004      	beq.n	8009f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f8cc 	bl	800a0be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f26:	e022      	b.n	8009f6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	dc02      	bgt.n	8009f38 <USBD_GetConfig+0x2c>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc03      	bgt.n	8009f3e <USBD_GetConfig+0x32>
 8009f36:	e015      	b.n	8009f64 <USBD_GetConfig+0x58>
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetConfig+0x48>
 8009f3c:	e012      	b.n	8009f64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3308      	adds	r3, #8
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f920 	bl	800a192 <USBD_CtlSendData>
        break;
 8009f52:	e00c      	b.n	8009f6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3304      	adds	r3, #4
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f918 	bl	800a192 <USBD_CtlSendData>
        break;
 8009f62:	e004      	b.n	8009f6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8a9 	bl	800a0be <USBD_CtlError>
        break;
 8009f6c:	bf00      	nop
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f86:	3b01      	subs	r3, #1
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d81e      	bhi.n	8009fca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	88db      	ldrh	r3, [r3, #6]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d004      	beq.n	8009f9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f891 	bl	800a0be <USBD_CtlError>
        break;
 8009f9c:	e01a      	b.n	8009fd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f043 0202 	orr.w	r2, r3, #2
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8e5 	bl	800a192 <USBD_CtlSendData>
      break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f876 	bl	800a0be <USBD_CtlError>
      break;
 8009fd2:	bf00      	nop
  }
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d106      	bne.n	8009ffc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f929 	bl	800a24e <USBD_CtlSendStatus>
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a014:	3b01      	subs	r3, #1
 800a016:	2b02      	cmp	r3, #2
 800a018:	d80b      	bhi.n	800a032 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d10c      	bne.n	800a03c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f90f 	bl	800a24e <USBD_CtlSendStatus>
      }
      break;
 800a030:	e004      	b.n	800a03c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f842 	bl	800a0be <USBD_CtlError>
      break;
 800a03a:	e000      	b.n	800a03e <USBD_ClrFeature+0x3a>
      break;
 800a03c:	bf00      	nop
  }
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	785a      	ldrb	r2, [r3, #1]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	3302      	adds	r3, #2
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b29a      	uxth	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3303      	adds	r3, #3
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	b29b      	uxth	r3, r3
 800a074:	4413      	add	r3, r2
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3304      	adds	r3, #4
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b29a      	uxth	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	3305      	adds	r3, #5
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4413      	add	r3, r2
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	3306      	adds	r3, #6
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	3307      	adds	r3, #7
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	021b      	lsls	r3, r3, #8
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	80da      	strh	r2, [r3, #6]

}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr

0800a0be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fc54 	bl	800a978 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fc50 	bl	800a978 <USBD_LL_StallEP>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d032      	beq.n	800a15c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f834 	bl	800a164 <USBD_GetLen>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	3301      	adds	r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	75fa      	strb	r2, [r7, #23]
 800a110:	461a      	mov	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	75fa      	strb	r2, [r7, #23]
 800a122:	461a      	mov	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	2203      	movs	r2, #3
 800a12a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a12c:	e012      	b.n	800a154 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	60fa      	str	r2, [r7, #12]
 800a134:	7dfa      	ldrb	r2, [r7, #23]
 800a136:	1c51      	adds	r1, r2, #1
 800a138:	75f9      	strb	r1, [r7, #23]
 800a13a:	4611      	mov	r1, r2
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	440a      	add	r2, r1
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	75fa      	strb	r2, [r7, #23]
 800a14a:	461a      	mov	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4413      	add	r3, r2
 800a150:	2200      	movs	r2, #0
 800a152:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e8      	bne.n	800a12e <USBD_GetString+0x4e>
    }
  }
}
 800a15c:	bf00      	nop
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a170:	e005      	b.n	800a17e <USBD_GetLen+0x1a>
  {
    len++;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	3301      	adds	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3301      	adds	r3, #1
 800a17c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f5      	bne.n	800a172 <USBD_GetLen+0xe>
  }

  return len;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1a8:	88fa      	ldrh	r2, [r7, #6]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1ae:	88fa      	ldrh	r2, [r7, #6]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b4:	88fb      	ldrh	r3, [r7, #6]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fc65 	bl	800aa8a <USBD_LL_Transmit>

  return USBD_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fc53 	bl	800aa8a <USBD_LL_Transmit>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2203      	movs	r2, #3
 800a200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a214:	88fb      	ldrh	r3, [r7, #6]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	2100      	movs	r1, #0
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fc58 	bl	800aad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	4613      	mov	r3, r2
 800a236:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	2100      	movs	r1, #0
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fc46 	bl	800aad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2204      	movs	r2, #4
 800a25a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc10 	bl	800aa8a <USBD_LL_Transmit>

  return USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2205      	movs	r2, #5
 800a280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fc20 	bl	800aad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4912      	ldr	r1, [pc, #72]	; (800a2ec <MX_USB_DEVICE_Init+0x50>)
 800a2a4:	4812      	ldr	r0, [pc, #72]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2a6:	f7fe ff5e 	bl	8009166 <USBD_Init>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2b0:	f7f7 f946 	bl	8001540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2b4:	490f      	ldr	r1, [pc, #60]	; (800a2f4 <MX_USB_DEVICE_Init+0x58>)
 800a2b6:	480e      	ldr	r0, [pc, #56]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2b8:	f7fe ff80 	bl	80091bc <USBD_RegisterClass>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2c2:	f7f7 f93d 	bl	8001540 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2c6:	490c      	ldr	r1, [pc, #48]	; (800a2f8 <MX_USB_DEVICE_Init+0x5c>)
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2ca:	f7fe feb1 	bl	8009030 <USBD_CDC_RegisterInterface>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2d4:	f7f7 f934 	bl	8001540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2d8:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <MX_USB_DEVICE_Init+0x54>)
 800a2da:	f7fe ff88 	bl	80091ee <USBD_Start>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2e4:	f7f7 f92c 	bl	8001540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2e8:	bf00      	nop
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20000134 	.word	0x20000134
 800a2f0:	2000048c 	.word	0x2000048c
 800a2f4:	20000020 	.word	0x20000020
 800a2f8:	20000124 	.word	0x20000124

0800a2fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a300:	2200      	movs	r2, #0
 800a302:	4905      	ldr	r1, [pc, #20]	; (800a318 <CDC_Init_FS+0x1c>)
 800a304:	4805      	ldr	r0, [pc, #20]	; (800a31c <CDC_Init_FS+0x20>)
 800a306:	f7fe fea9 	bl	800905c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a30a:	4905      	ldr	r1, [pc, #20]	; (800a320 <CDC_Init_FS+0x24>)
 800a30c:	4803      	ldr	r0, [pc, #12]	; (800a31c <CDC_Init_FS+0x20>)
 800a30e:	f7fe febe 	bl	800908e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a312:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a314:	4618      	mov	r0, r3
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000b50 	.word	0x20000b50
 800a31c:	2000048c 	.word	0x2000048c
 800a320:	20000750 	.word	0x20000750

0800a324 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a328:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bc80      	pop	{r7}
 800a330:	4770      	bx	lr
	...

0800a334 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
 800a340:	4613      	mov	r3, r2
 800a342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	2b23      	cmp	r3, #35	; 0x23
 800a348:	d84a      	bhi.n	800a3e0 <CDC_Control_FS+0xac>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <CDC_Control_FS+0x1c>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a3e1 	.word	0x0800a3e1
 800a354:	0800a3e1 	.word	0x0800a3e1
 800a358:	0800a3e1 	.word	0x0800a3e1
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a3e1 	.word	0x0800a3e1
 800a364:	0800a3e1 	.word	0x0800a3e1
 800a368:	0800a3e1 	.word	0x0800a3e1
 800a36c:	0800a3e1 	.word	0x0800a3e1
 800a370:	0800a3e1 	.word	0x0800a3e1
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a3e1 	.word	0x0800a3e1
 800a37c:	0800a3e1 	.word	0x0800a3e1
 800a380:	0800a3e1 	.word	0x0800a3e1
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3e1 	.word	0x0800a3e1
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3e1 	.word	0x0800a3e1
 800a3a4:	0800a3e1 	.word	0x0800a3e1
 800a3a8:	0800a3e1 	.word	0x0800a3e1
 800a3ac:	0800a3e1 	.word	0x0800a3e1
 800a3b0:	0800a3e1 	.word	0x0800a3e1
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3e1 	.word	0x0800a3e1
 800a3c0:	0800a3e1 	.word	0x0800a3e1
 800a3c4:	0800a3e1 	.word	0x0800a3e1
 800a3c8:	0800a3e1 	.word	0x0800a3e1
 800a3cc:	0800a3e1 	.word	0x0800a3e1
 800a3d0:	0800a3e1 	.word	0x0800a3e1
 800a3d4:	0800a3e1 	.word	0x0800a3e1
 800a3d8:	0800a3e1 	.word	0x0800a3e1
 800a3dc:	0800a3e1 	.word	0x0800a3e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3e0:	bf00      	nop
  }

  return (USBD_OK);
 800a3e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop

0800a3f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4805      	ldr	r0, [pc, #20]	; (800a414 <CDC_Receive_FS+0x24>)
 800a3fe:	f7fe fe46 	bl	800908e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a402:	4804      	ldr	r0, [pc, #16]	; (800a414 <CDC_Receive_FS+0x24>)
 800a404:	f7fe fe85 	bl	8009112 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a408:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2000048c 	.word	0x2000048c

0800a418 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a428:	4b0d      	ldr	r3, [pc, #52]	; (800a460 <CDC_Transmit_FS+0x48>)
 800a42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a42e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e00b      	b.n	800a456 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a43e:	887b      	ldrh	r3, [r7, #2]
 800a440:	461a      	mov	r2, r3
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	4806      	ldr	r0, [pc, #24]	; (800a460 <CDC_Transmit_FS+0x48>)
 800a446:	f7fe fe09 	bl	800905c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a44a:	4805      	ldr	r0, [pc, #20]	; (800a460 <CDC_Transmit_FS+0x48>)
 800a44c:	f7fe fe32 	bl	80090b4 <USBD_CDC_TransmitPacket>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	2000048c 	.word	0x2000048c

0800a464 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	6039      	str	r1, [r7, #0]
 800a46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2212      	movs	r2, #18
 800a474:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000150 	.word	0x20000150

0800a488 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2204      	movs	r2, #4
 800a498:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a49a:	4b03      	ldr	r3, [pc, #12]	; (800a4a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	20000164 	.word	0x20000164

0800a4ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	6039      	str	r1, [r7, #0]
 800a4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4907      	ldr	r1, [pc, #28]	; (800a4e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4c2:	4808      	ldr	r0, [pc, #32]	; (800a4e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4c4:	f7ff fe0c 	bl	800a0e0 <USBD_GetString>
 800a4c8:	e004      	b.n	800a4d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	4904      	ldr	r1, [pc, #16]	; (800a4e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ce:	4805      	ldr	r0, [pc, #20]	; (800a4e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4d0:	f7ff fe06 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d4:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000f50 	.word	0x20000f50
 800a4e4:	0800ed38 	.word	0x0800ed38

0800a4e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	4904      	ldr	r1, [pc, #16]	; (800a508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4f8:	4804      	ldr	r0, [pc, #16]	; (800a50c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4fa:	f7ff fdf1 	bl	800a0e0 <USBD_GetString>
  return USBD_StrDesc;
 800a4fe:	4b02      	ldr	r3, [pc, #8]	; (800a508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000f50 	.word	0x20000f50
 800a50c:	0800ed50 	.word	0x0800ed50

0800a510 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	6039      	str	r1, [r7, #0]
 800a51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	221a      	movs	r2, #26
 800a520:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a522:	f000 f843 	bl	800a5ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a526:	4b02      	ldr	r3, [pc, #8]	; (800a530 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000168 	.word	0x20000168

0800a534 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d105      	bne.n	800a552 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	4907      	ldr	r1, [pc, #28]	; (800a568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a54a:	4808      	ldr	r0, [pc, #32]	; (800a56c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a54c:	f7ff fdc8 	bl	800a0e0 <USBD_GetString>
 800a550:	e004      	b.n	800a55c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	4904      	ldr	r1, [pc, #16]	; (800a568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a556:	4805      	ldr	r0, [pc, #20]	; (800a56c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a558:	f7ff fdc2 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a55c:	4b02      	ldr	r3, [pc, #8]	; (800a568 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000f50 	.word	0x20000f50
 800a56c:	0800ed64 	.word	0x0800ed64

0800a570 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4907      	ldr	r1, [pc, #28]	; (800a5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a586:	4808      	ldr	r0, [pc, #32]	; (800a5a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a588:	f7ff fdaa 	bl	800a0e0 <USBD_GetString>
 800a58c:	e004      	b.n	800a598 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4904      	ldr	r1, [pc, #16]	; (800a5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a592:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a594:	f7ff fda4 	bl	800a0e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000f50 	.word	0x20000f50
 800a5a8:	0800ed70 	.word	0x0800ed70

0800a5ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5b2:	4b0f      	ldr	r3, [pc, #60]	; (800a5f0 <Get_SerialNum+0x44>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5b8:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <Get_SerialNum+0x48>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5be:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <Get_SerialNum+0x4c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	4909      	ldr	r1, [pc, #36]	; (800a5fc <Get_SerialNum+0x50>)
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f814 	bl	800a604 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5dc:	2204      	movs	r2, #4
 800a5de:	4908      	ldr	r1, [pc, #32]	; (800a600 <Get_SerialNum+0x54>)
 800a5e0:	68b8      	ldr	r0, [r7, #8]
 800a5e2:	f000 f80f 	bl	800a604 <IntToUnicode>
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	1ffff7e8 	.word	0x1ffff7e8
 800a5f4:	1ffff7ec 	.word	0x1ffff7ec
 800a5f8:	1ffff7f0 	.word	0x1ffff7f0
 800a5fc:	2000016a 	.word	0x2000016a
 800a600:	2000017a 	.word	0x2000017a

0800a604 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]
 800a61a:	e027      	b.n	800a66c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	0f1b      	lsrs	r3, r3, #28
 800a620:	2b09      	cmp	r3, #9
 800a622:	d80b      	bhi.n	800a63c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	0f1b      	lsrs	r3, r3, #28
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4619      	mov	r1, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	440b      	add	r3, r1
 800a634:	3230      	adds	r2, #48	; 0x30
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	e00a      	b.n	800a652 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	0f1b      	lsrs	r3, r3, #28
 800a640:	b2da      	uxtb	r2, r3
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4619      	mov	r1, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	440b      	add	r3, r1
 800a64c:	3237      	adds	r2, #55	; 0x37
 800a64e:	b2d2      	uxtb	r2, r2
 800a650:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	3301      	adds	r3, #1
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	4413      	add	r3, r2
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	3301      	adds	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
 800a66c:	7dfa      	ldrb	r2, [r7, #23]
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	429a      	cmp	r2, r3
 800a672:	d3d3      	bcc.n	800a61c <IntToUnicode+0x18>
  }
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a0d      	ldr	r2, [pc, #52]	; (800a6c4 <HAL_PCD_MspInit+0x44>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d113      	bne.n	800a6ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a692:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <HAL_PCD_MspInit+0x48>)
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	4a0c      	ldr	r2, [pc, #48]	; (800a6c8 <HAL_PCD_MspInit+0x48>)
 800a698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a69c:	61d3      	str	r3, [r2, #28]
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <HAL_PCD_MspInit+0x48>)
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	2014      	movs	r0, #20
 800a6b0:	f7f7 fd0d 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a6b4:	2014      	movs	r0, #20
 800a6b6:	f7f7 fd26 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	40005c00 	.word	0x40005c00
 800a6c8:	40021000 	.word	0x40021000

0800a6cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f7fe fdcb 	bl	800927e <USBD_LL_SetupStage>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a702:	78fa      	ldrb	r2, [r7, #3]
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	440b      	add	r3, r1
 800a710:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	4619      	mov	r1, r3
 800a71a:	f7fe fdfd 	bl	8009318 <USBD_LL_DataOutStage>
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a738:	78fa      	ldrb	r2, [r7, #3]
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	440b      	add	r3, r1
 800a746:	333c      	adds	r3, #60	; 0x3c
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	4619      	mov	r1, r3
 800a74e:	f7fe fe54 	bl	80093fa <USBD_LL_DataInStage>
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b082      	sub	sp, #8
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe ff64 	bl	8009636 <USBD_LL_SOF>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a77e:	2301      	movs	r3, #1
 800a780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d001      	beq.n	800a78e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a78a:	f7f6 fed9 	bl	8001540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a794:	7bfa      	ldrb	r2, [r7, #15]
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe ff14 	bl	80095c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fecd 	bl	8009544 <USBD_LL_Reset>
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe ff0e 	bl	80095e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7d0:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <HAL_PCD_SuspendCallback+0x30>)
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	4a03      	ldr	r2, [pc, #12]	; (800a7e4 <HAL_PCD_SuspendCallback+0x30>)
 800a7d6:	f043 0306 	orr.w	r3, r3, #6
 800a7da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	e000ed00 	.word	0xe000ed00

0800a7e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe ff08 	bl	800960c <USBD_LL_Resume>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a80c:	4a28      	ldr	r2, [pc, #160]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a26      	ldr	r2, [pc, #152]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a818:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a81c:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a81e:	4a25      	ldr	r2, [pc, #148]	; (800a8b4 <USBD_LL_Init+0xb0>)
 800a820:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a822:	4b23      	ldr	r3, [pc, #140]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a824:	2208      	movs	r2, #8
 800a826:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a828:	4b21      	ldr	r3, [pc, #132]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a82a:	2202      	movs	r2, #2
 800a82c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a82e:	4b20      	ldr	r3, [pc, #128]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a830:	2200      	movs	r2, #0
 800a832:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a834:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a836:	2200      	movs	r2, #0
 800a838:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a83a:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a840:	481b      	ldr	r0, [pc, #108]	; (800a8b0 <USBD_LL_Init+0xac>)
 800a842:	f7f8 fe47 	bl	80034d4 <HAL_PCD_Init>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a84c:	f7f6 fe78 	bl	8001540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a856:	2318      	movs	r3, #24
 800a858:	2200      	movs	r2, #0
 800a85a:	2100      	movs	r1, #0
 800a85c:	f7fa fabb 	bl	8004dd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a866:	2358      	movs	r3, #88	; 0x58
 800a868:	2200      	movs	r2, #0
 800a86a:	2180      	movs	r1, #128	; 0x80
 800a86c:	f7fa fab3 	bl	8004dd6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a876:	23c0      	movs	r3, #192	; 0xc0
 800a878:	2200      	movs	r2, #0
 800a87a:	2181      	movs	r1, #129	; 0x81
 800a87c:	f7fa faab 	bl	8004dd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a886:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a88a:	2200      	movs	r2, #0
 800a88c:	2101      	movs	r1, #1
 800a88e:	f7fa faa2 	bl	8004dd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a89c:	2200      	movs	r2, #0
 800a89e:	2182      	movs	r1, #130	; 0x82
 800a8a0:	f7fa fa99 	bl	8004dd6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20001150 	.word	0x20001150
 800a8b4:	40005c00 	.word	0x40005c00

0800a8b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7f8 ff0b 	bl	80036ea <HAL_PCD_Start>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 f94e 	bl	800ab7c <USBD_Get_USB_Status>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	70fb      	strb	r3, [r7, #3]
 800a900:	460b      	mov	r3, r1
 800a902:	70bb      	strb	r3, [r7, #2]
 800a904:	4613      	mov	r3, r2
 800a906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a916:	78bb      	ldrb	r3, [r7, #2]
 800a918:	883a      	ldrh	r2, [r7, #0]
 800a91a:	78f9      	ldrb	r1, [r7, #3]
 800a91c:	f7f9 f883 	bl	8003a26 <HAL_PCD_EP_Open>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f928 	bl	800ab7c <USBD_Get_USB_Status>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a930:	7bbb      	ldrb	r3, [r7, #14]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f7f9 f8ca 	bl	8003af2 <HAL_PCD_EP_Close>
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	4618      	mov	r0, r3
 800a966:	f000 f909 	bl	800ab7c <USBD_Get_USB_Status>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a992:	78fa      	ldrb	r2, [r7, #3]
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7f9 f98a 	bl	8003cb0 <HAL_PCD_EP_SetStall>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f8ea 	bl	800ab7c <USBD_Get_USB_Status>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9d0:	78fa      	ldrb	r2, [r7, #3]
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f9 f9cb 	bl	8003d70 <HAL_PCD_EP_ClrStall>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 f8cb 	bl	800ab7c <USBD_Get_USB_Status>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da0c      	bge.n	800aa2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa16:	68f9      	ldr	r1, [r7, #12]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	440b      	add	r3, r1
 800aa24:	3302      	adds	r3, #2
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	e00b      	b.n	800aa42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa2a:	78fb      	ldrb	r3, [r7, #3]
 800aa2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa30:	68f9      	ldr	r1, [r7, #12]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	440b      	add	r3, r1
 800aa3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aa40:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bc80      	pop	{r7}
 800aa4a:	4770      	bx	lr

0800aa4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f8 ffb6 	bl	80039dc <HAL_PCD_SetAddress>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f880 	bl	800ab7c <USBD_Get_USB_Status>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b086      	sub	sp, #24
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	461a      	mov	r2, r3
 800aa96:	460b      	mov	r3, r1
 800aa98:	72fb      	strb	r3, [r7, #11]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	7af9      	ldrb	r1, [r7, #11]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	f7f9 f8ba 	bl	8003c2a <HAL_PCD_EP_Transmit>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f85d 	bl	800ab7c <USBD_Get_USB_Status>
 800aac2:	4603      	mov	r3, r0
 800aac4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aac6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	461a      	mov	r2, r3
 800aadc:	460b      	mov	r3, r1
 800aade:	72fb      	strb	r3, [r7, #11]
 800aae0:	4613      	mov	r3, r2
 800aae2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaf2:	893b      	ldrh	r3, [r7, #8]
 800aaf4:	7af9      	ldrb	r1, [r7, #11]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	f7f9 f843 	bl	8003b82 <HAL_PCD_EP_Receive>
 800aafc:	4603      	mov	r3, r0
 800aafe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 f83a 	bl	800ab7c <USBD_Get_USB_Status>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f9 f865 	bl	8003bfc <HAL_PCD_EP_GetRxCount>
 800ab32:	4603      	mov	r3, r0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab44:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <USBD_static_malloc+0x14>)
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bc80      	pop	{r7}
 800ab4e:	4770      	bx	lr
 800ab50:	2000143c 	.word	0x2000143c

0800ab54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]

}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr

0800ab66 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d817      	bhi.n	800abc0 <USBD_Get_USB_Status+0x44>
 800ab90:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <USBD_Get_USB_Status+0x1c>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abaf 	.word	0x0800abaf
 800aba0:	0800abb5 	.word	0x0800abb5
 800aba4:	0800abbb 	.word	0x0800abbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
    break;
 800abac:	e00b      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abae:	2302      	movs	r3, #2
 800abb0:	73fb      	strb	r3, [r7, #15]
    break;
 800abb2:	e008      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
    break;
 800abb8:	e005      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abba:	2302      	movs	r3, #2
 800abbc:	73fb      	strb	r3, [r7, #15]
    break;
 800abbe:	e002      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abc0:	2302      	movs	r3, #2
 800abc2:	73fb      	strb	r3, [r7, #15]
    break;
 800abc4:	bf00      	nop
  }
  return usb_status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop

0800abd4 <__errno>:
 800abd4:	4b01      	ldr	r3, [pc, #4]	; (800abdc <__errno+0x8>)
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000184 	.word	0x20000184

0800abe0 <__libc_init_array>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	2600      	movs	r6, #0
 800abe4:	4d0c      	ldr	r5, [pc, #48]	; (800ac18 <__libc_init_array+0x38>)
 800abe6:	4c0d      	ldr	r4, [pc, #52]	; (800ac1c <__libc_init_array+0x3c>)
 800abe8:	1b64      	subs	r4, r4, r5
 800abea:	10a4      	asrs	r4, r4, #2
 800abec:	42a6      	cmp	r6, r4
 800abee:	d109      	bne.n	800ac04 <__libc_init_array+0x24>
 800abf0:	f004 f864 	bl	800ecbc <_init>
 800abf4:	2600      	movs	r6, #0
 800abf6:	4d0a      	ldr	r5, [pc, #40]	; (800ac20 <__libc_init_array+0x40>)
 800abf8:	4c0a      	ldr	r4, [pc, #40]	; (800ac24 <__libc_init_array+0x44>)
 800abfa:	1b64      	subs	r4, r4, r5
 800abfc:	10a4      	asrs	r4, r4, #2
 800abfe:	42a6      	cmp	r6, r4
 800ac00:	d105      	bne.n	800ac0e <__libc_init_array+0x2e>
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac08:	4798      	blx	r3
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	e7ee      	b.n	800abec <__libc_init_array+0xc>
 800ac0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac12:	4798      	blx	r3
 800ac14:	3601      	adds	r6, #1
 800ac16:	e7f2      	b.n	800abfe <__libc_init_array+0x1e>
 800ac18:	0800f218 	.word	0x0800f218
 800ac1c:	0800f218 	.word	0x0800f218
 800ac20:	0800f218 	.word	0x0800f218
 800ac24:	0800f21c 	.word	0x0800f21c

0800ac28 <memset>:
 800ac28:	4603      	mov	r3, r0
 800ac2a:	4402      	add	r2, r0
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d100      	bne.n	800ac32 <memset+0xa>
 800ac30:	4770      	bx	lr
 800ac32:	f803 1b01 	strb.w	r1, [r3], #1
 800ac36:	e7f9      	b.n	800ac2c <memset+0x4>

0800ac38 <__cvt>:
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3e:	461f      	mov	r7, r3
 800ac40:	bfbb      	ittet	lt
 800ac42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ac46:	461f      	movlt	r7, r3
 800ac48:	2300      	movge	r3, #0
 800ac4a:	232d      	movlt	r3, #45	; 0x2d
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	4614      	mov	r4, r2
 800ac50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ac54:	7013      	strb	r3, [r2, #0]
 800ac56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ac5c:	f023 0820 	bic.w	r8, r3, #32
 800ac60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac64:	d005      	beq.n	800ac72 <__cvt+0x3a>
 800ac66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac6a:	d100      	bne.n	800ac6e <__cvt+0x36>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	2302      	movs	r3, #2
 800ac70:	e000      	b.n	800ac74 <__cvt+0x3c>
 800ac72:	2303      	movs	r3, #3
 800ac74:	aa07      	add	r2, sp, #28
 800ac76:	9204      	str	r2, [sp, #16]
 800ac78:	aa06      	add	r2, sp, #24
 800ac7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ac7e:	e9cd 3500 	strd	r3, r5, [sp]
 800ac82:	4622      	mov	r2, r4
 800ac84:	463b      	mov	r3, r7
 800ac86:	f000 fce3 	bl	800b650 <_dtoa_r>
 800ac8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac8e:	4606      	mov	r6, r0
 800ac90:	d102      	bne.n	800ac98 <__cvt+0x60>
 800ac92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac94:	07db      	lsls	r3, r3, #31
 800ac96:	d522      	bpl.n	800acde <__cvt+0xa6>
 800ac98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac9c:	eb06 0905 	add.w	r9, r6, r5
 800aca0:	d110      	bne.n	800acc4 <__cvt+0x8c>
 800aca2:	7833      	ldrb	r3, [r6, #0]
 800aca4:	2b30      	cmp	r3, #48	; 0x30
 800aca6:	d10a      	bne.n	800acbe <__cvt+0x86>
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	4620      	mov	r0, r4
 800acae:	4639      	mov	r1, r7
 800acb0:	f7f5 fe7a 	bl	80009a8 <__aeabi_dcmpeq>
 800acb4:	b918      	cbnz	r0, 800acbe <__cvt+0x86>
 800acb6:	f1c5 0501 	rsb	r5, r5, #1
 800acba:	f8ca 5000 	str.w	r5, [sl]
 800acbe:	f8da 3000 	ldr.w	r3, [sl]
 800acc2:	4499      	add	r9, r3
 800acc4:	2200      	movs	r2, #0
 800acc6:	2300      	movs	r3, #0
 800acc8:	4620      	mov	r0, r4
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 800acd0:	b108      	cbz	r0, 800acd6 <__cvt+0x9e>
 800acd2:	f8cd 901c 	str.w	r9, [sp, #28]
 800acd6:	2230      	movs	r2, #48	; 0x30
 800acd8:	9b07      	ldr	r3, [sp, #28]
 800acda:	454b      	cmp	r3, r9
 800acdc:	d307      	bcc.n	800acee <__cvt+0xb6>
 800acde:	4630      	mov	r0, r6
 800ace0:	9b07      	ldr	r3, [sp, #28]
 800ace2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ace4:	1b9b      	subs	r3, r3, r6
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	b008      	add	sp, #32
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acee:	1c59      	adds	r1, r3, #1
 800acf0:	9107      	str	r1, [sp, #28]
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	e7f0      	b.n	800acd8 <__cvt+0xa0>

0800acf6 <__exponent>:
 800acf6:	4603      	mov	r3, r0
 800acf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acfa:	2900      	cmp	r1, #0
 800acfc:	f803 2b02 	strb.w	r2, [r3], #2
 800ad00:	bfb6      	itet	lt
 800ad02:	222d      	movlt	r2, #45	; 0x2d
 800ad04:	222b      	movge	r2, #43	; 0x2b
 800ad06:	4249      	neglt	r1, r1
 800ad08:	2909      	cmp	r1, #9
 800ad0a:	7042      	strb	r2, [r0, #1]
 800ad0c:	dd2b      	ble.n	800ad66 <__exponent+0x70>
 800ad0e:	f10d 0407 	add.w	r4, sp, #7
 800ad12:	46a4      	mov	ip, r4
 800ad14:	270a      	movs	r7, #10
 800ad16:	fb91 f6f7 	sdiv	r6, r1, r7
 800ad1a:	460a      	mov	r2, r1
 800ad1c:	46a6      	mov	lr, r4
 800ad1e:	fb07 1516 	mls	r5, r7, r6, r1
 800ad22:	2a63      	cmp	r2, #99	; 0x63
 800ad24:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ad28:	4631      	mov	r1, r6
 800ad2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad32:	dcf0      	bgt.n	800ad16 <__exponent+0x20>
 800ad34:	3130      	adds	r1, #48	; 0x30
 800ad36:	f1ae 0502 	sub.w	r5, lr, #2
 800ad3a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ad3e:	4629      	mov	r1, r5
 800ad40:	1c44      	adds	r4, r0, #1
 800ad42:	4561      	cmp	r1, ip
 800ad44:	d30a      	bcc.n	800ad5c <__exponent+0x66>
 800ad46:	f10d 0209 	add.w	r2, sp, #9
 800ad4a:	eba2 020e 	sub.w	r2, r2, lr
 800ad4e:	4565      	cmp	r5, ip
 800ad50:	bf88      	it	hi
 800ad52:	2200      	movhi	r2, #0
 800ad54:	4413      	add	r3, r2
 800ad56:	1a18      	subs	r0, r3, r0
 800ad58:	b003      	add	sp, #12
 800ad5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad60:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ad64:	e7ed      	b.n	800ad42 <__exponent+0x4c>
 800ad66:	2330      	movs	r3, #48	; 0x30
 800ad68:	3130      	adds	r1, #48	; 0x30
 800ad6a:	7083      	strb	r3, [r0, #2]
 800ad6c:	70c1      	strb	r1, [r0, #3]
 800ad6e:	1d03      	adds	r3, r0, #4
 800ad70:	e7f1      	b.n	800ad56 <__exponent+0x60>
	...

0800ad74 <_printf_float>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	b091      	sub	sp, #68	; 0x44
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ad80:	4616      	mov	r6, r2
 800ad82:	461f      	mov	r7, r3
 800ad84:	4605      	mov	r5, r0
 800ad86:	f001 fa51 	bl	800c22c <_localeconv_r>
 800ad8a:	6803      	ldr	r3, [r0, #0]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad90:	f7f5 f9de 	bl	8000150 <strlen>
 800ad94:	2300      	movs	r3, #0
 800ad96:	930e      	str	r3, [sp, #56]	; 0x38
 800ad98:	f8d8 3000 	ldr.w	r3, [r8]
 800ad9c:	900a      	str	r0, [sp, #40]	; 0x28
 800ad9e:	3307      	adds	r3, #7
 800ada0:	f023 0307 	bic.w	r3, r3, #7
 800ada4:	f103 0208 	add.w	r2, r3, #8
 800ada8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800adac:	f8d4 b000 	ldr.w	fp, [r4]
 800adb0:	f8c8 2000 	str.w	r2, [r8]
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800adbc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800adc0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800adc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	4640      	mov	r0, r8
 800adcc:	4b9c      	ldr	r3, [pc, #624]	; (800b040 <_printf_float+0x2cc>)
 800adce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800add0:	f7f5 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 800add4:	bb70      	cbnz	r0, 800ae34 <_printf_float+0xc0>
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	4640      	mov	r0, r8
 800addc:	4b98      	ldr	r3, [pc, #608]	; (800b040 <_printf_float+0x2cc>)
 800adde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ade0:	f7f5 fdf6 	bl	80009d0 <__aeabi_dcmple>
 800ade4:	bb30      	cbnz	r0, 800ae34 <_printf_float+0xc0>
 800ade6:	2200      	movs	r2, #0
 800ade8:	2300      	movs	r3, #0
 800adea:	4640      	mov	r0, r8
 800adec:	4651      	mov	r1, sl
 800adee:	f7f5 fde5 	bl	80009bc <__aeabi_dcmplt>
 800adf2:	b110      	cbz	r0, 800adfa <_printf_float+0x86>
 800adf4:	232d      	movs	r3, #45	; 0x2d
 800adf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adfa:	4b92      	ldr	r3, [pc, #584]	; (800b044 <_printf_float+0x2d0>)
 800adfc:	4892      	ldr	r0, [pc, #584]	; (800b048 <_printf_float+0x2d4>)
 800adfe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ae02:	bf94      	ite	ls
 800ae04:	4698      	movls	r8, r3
 800ae06:	4680      	movhi	r8, r0
 800ae08:	2303      	movs	r3, #3
 800ae0a:	f04f 0a00 	mov.w	sl, #0
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	f02b 0304 	bic.w	r3, fp, #4
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	4633      	mov	r3, r6
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	9700      	str	r7, [sp, #0]
 800ae1e:	aa0f      	add	r2, sp, #60	; 0x3c
 800ae20:	f000 f9d4 	bl	800b1cc <_printf_common>
 800ae24:	3001      	adds	r0, #1
 800ae26:	f040 8090 	bne.w	800af4a <_printf_float+0x1d6>
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	b011      	add	sp, #68	; 0x44
 800ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	4642      	mov	r2, r8
 800ae36:	4653      	mov	r3, sl
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4651      	mov	r1, sl
 800ae3c:	f7f5 fde6 	bl	8000a0c <__aeabi_dcmpun>
 800ae40:	b148      	cbz	r0, 800ae56 <_printf_float+0xe2>
 800ae42:	f1ba 0f00 	cmp.w	sl, #0
 800ae46:	bfb8      	it	lt
 800ae48:	232d      	movlt	r3, #45	; 0x2d
 800ae4a:	4880      	ldr	r0, [pc, #512]	; (800b04c <_printf_float+0x2d8>)
 800ae4c:	bfb8      	it	lt
 800ae4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae52:	4b7f      	ldr	r3, [pc, #508]	; (800b050 <_printf_float+0x2dc>)
 800ae54:	e7d3      	b.n	800adfe <_printf_float+0x8a>
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	d142      	bne.n	800aee6 <_printf_float+0x172>
 800ae60:	2306      	movs	r3, #6
 800ae62:	6063      	str	r3, [r4, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	9206      	str	r2, [sp, #24]
 800ae68:	aa0e      	add	r2, sp, #56	; 0x38
 800ae6a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ae6e:	aa0d      	add	r2, sp, #52	; 0x34
 800ae70:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ae74:	9203      	str	r2, [sp, #12]
 800ae76:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ae7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	6863      	ldr	r3, [r4, #4]
 800ae82:	4642      	mov	r2, r8
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	4628      	mov	r0, r5
 800ae88:	4653      	mov	r3, sl
 800ae8a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae8c:	f7ff fed4 	bl	800ac38 <__cvt>
 800ae90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae92:	4680      	mov	r8, r0
 800ae94:	2947      	cmp	r1, #71	; 0x47
 800ae96:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae98:	d108      	bne.n	800aeac <_printf_float+0x138>
 800ae9a:	1cc8      	adds	r0, r1, #3
 800ae9c:	db02      	blt.n	800aea4 <_printf_float+0x130>
 800ae9e:	6863      	ldr	r3, [r4, #4]
 800aea0:	4299      	cmp	r1, r3
 800aea2:	dd40      	ble.n	800af26 <_printf_float+0x1b2>
 800aea4:	f1a9 0902 	sub.w	r9, r9, #2
 800aea8:	fa5f f989 	uxtb.w	r9, r9
 800aeac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aeb0:	d81f      	bhi.n	800aef2 <_printf_float+0x17e>
 800aeb2:	464a      	mov	r2, r9
 800aeb4:	3901      	subs	r1, #1
 800aeb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aeba:	910d      	str	r1, [sp, #52]	; 0x34
 800aebc:	f7ff ff1b 	bl	800acf6 <__exponent>
 800aec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aec2:	4682      	mov	sl, r0
 800aec4:	1813      	adds	r3, r2, r0
 800aec6:	2a01      	cmp	r2, #1
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	dc02      	bgt.n	800aed2 <_printf_float+0x15e>
 800aecc:	6822      	ldr	r2, [r4, #0]
 800aece:	07d2      	lsls	r2, r2, #31
 800aed0:	d501      	bpl.n	800aed6 <_printf_float+0x162>
 800aed2:	3301      	adds	r3, #1
 800aed4:	6123      	str	r3, [r4, #16]
 800aed6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d09b      	beq.n	800ae16 <_printf_float+0xa2>
 800aede:	232d      	movs	r3, #45	; 0x2d
 800aee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aee4:	e797      	b.n	800ae16 <_printf_float+0xa2>
 800aee6:	2947      	cmp	r1, #71	; 0x47
 800aee8:	d1bc      	bne.n	800ae64 <_printf_float+0xf0>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1ba      	bne.n	800ae64 <_printf_float+0xf0>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7b7      	b.n	800ae62 <_printf_float+0xee>
 800aef2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800aef6:	d118      	bne.n	800af2a <_printf_float+0x1b6>
 800aef8:	2900      	cmp	r1, #0
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	dd0b      	ble.n	800af16 <_printf_float+0x1a2>
 800aefe:	6121      	str	r1, [r4, #16]
 800af00:	b913      	cbnz	r3, 800af08 <_printf_float+0x194>
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	07d0      	lsls	r0, r2, #31
 800af06:	d502      	bpl.n	800af0e <_printf_float+0x19a>
 800af08:	3301      	adds	r3, #1
 800af0a:	440b      	add	r3, r1
 800af0c:	6123      	str	r3, [r4, #16]
 800af0e:	f04f 0a00 	mov.w	sl, #0
 800af12:	65a1      	str	r1, [r4, #88]	; 0x58
 800af14:	e7df      	b.n	800aed6 <_printf_float+0x162>
 800af16:	b913      	cbnz	r3, 800af1e <_printf_float+0x1aa>
 800af18:	6822      	ldr	r2, [r4, #0]
 800af1a:	07d2      	lsls	r2, r2, #31
 800af1c:	d501      	bpl.n	800af22 <_printf_float+0x1ae>
 800af1e:	3302      	adds	r3, #2
 800af20:	e7f4      	b.n	800af0c <_printf_float+0x198>
 800af22:	2301      	movs	r3, #1
 800af24:	e7f2      	b.n	800af0c <_printf_float+0x198>
 800af26:	f04f 0967 	mov.w	r9, #103	; 0x67
 800af2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2c:	4299      	cmp	r1, r3
 800af2e:	db05      	blt.n	800af3c <_printf_float+0x1c8>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	6121      	str	r1, [r4, #16]
 800af34:	07d8      	lsls	r0, r3, #31
 800af36:	d5ea      	bpl.n	800af0e <_printf_float+0x19a>
 800af38:	1c4b      	adds	r3, r1, #1
 800af3a:	e7e7      	b.n	800af0c <_printf_float+0x198>
 800af3c:	2900      	cmp	r1, #0
 800af3e:	bfcc      	ite	gt
 800af40:	2201      	movgt	r2, #1
 800af42:	f1c1 0202 	rsble	r2, r1, #2
 800af46:	4413      	add	r3, r2
 800af48:	e7e0      	b.n	800af0c <_printf_float+0x198>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	055a      	lsls	r2, r3, #21
 800af4e:	d407      	bmi.n	800af60 <_printf_float+0x1ec>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	4642      	mov	r2, r8
 800af54:	4631      	mov	r1, r6
 800af56:	4628      	mov	r0, r5
 800af58:	47b8      	blx	r7
 800af5a:	3001      	adds	r0, #1
 800af5c:	d12b      	bne.n	800afb6 <_printf_float+0x242>
 800af5e:	e764      	b.n	800ae2a <_printf_float+0xb6>
 800af60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800af64:	f240 80dd 	bls.w	800b122 <_printf_float+0x3ae>
 800af68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af6c:	2200      	movs	r2, #0
 800af6e:	2300      	movs	r3, #0
 800af70:	f7f5 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 800af74:	2800      	cmp	r0, #0
 800af76:	d033      	beq.n	800afe0 <_printf_float+0x26c>
 800af78:	2301      	movs	r3, #1
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	4a35      	ldr	r2, [pc, #212]	; (800b054 <_printf_float+0x2e0>)
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	f43f af51 	beq.w	800ae2a <_printf_float+0xb6>
 800af88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800af8c:	429a      	cmp	r2, r3
 800af8e:	db02      	blt.n	800af96 <_printf_float+0x222>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	07d8      	lsls	r0, r3, #31
 800af94:	d50f      	bpl.n	800afb6 <_printf_float+0x242>
 800af96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af9a:	4631      	mov	r1, r6
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b8      	blx	r7
 800afa0:	3001      	adds	r0, #1
 800afa2:	f43f af42 	beq.w	800ae2a <_printf_float+0xb6>
 800afa6:	f04f 0800 	mov.w	r8, #0
 800afaa:	f104 091a 	add.w	r9, r4, #26
 800afae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4543      	cmp	r3, r8
 800afb4:	dc09      	bgt.n	800afca <_printf_float+0x256>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	079b      	lsls	r3, r3, #30
 800afba:	f100 8102 	bmi.w	800b1c2 <_printf_float+0x44e>
 800afbe:	68e0      	ldr	r0, [r4, #12]
 800afc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afc2:	4298      	cmp	r0, r3
 800afc4:	bfb8      	it	lt
 800afc6:	4618      	movlt	r0, r3
 800afc8:	e731      	b.n	800ae2e <_printf_float+0xba>
 800afca:	2301      	movs	r3, #1
 800afcc:	464a      	mov	r2, r9
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f43f af28 	beq.w	800ae2a <_printf_float+0xb6>
 800afda:	f108 0801 	add.w	r8, r8, #1
 800afde:	e7e6      	b.n	800afae <_printf_float+0x23a>
 800afe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc38      	bgt.n	800b058 <_printf_float+0x2e4>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	4a19      	ldr	r2, [pc, #100]	; (800b054 <_printf_float+0x2e0>)
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f af1a 	beq.w	800ae2a <_printf_float+0xb6>
 800aff6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800affa:	4313      	orrs	r3, r2
 800affc:	d102      	bne.n	800b004 <_printf_float+0x290>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	07d9      	lsls	r1, r3, #31
 800b002:	d5d8      	bpl.n	800afb6 <_printf_float+0x242>
 800b004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	47b8      	blx	r7
 800b00e:	3001      	adds	r0, #1
 800b010:	f43f af0b 	beq.w	800ae2a <_printf_float+0xb6>
 800b014:	f04f 0900 	mov.w	r9, #0
 800b018:	f104 0a1a 	add.w	sl, r4, #26
 800b01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b01e:	425b      	negs	r3, r3
 800b020:	454b      	cmp	r3, r9
 800b022:	dc01      	bgt.n	800b028 <_printf_float+0x2b4>
 800b024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b026:	e794      	b.n	800af52 <_printf_float+0x1de>
 800b028:	2301      	movs	r3, #1
 800b02a:	4652      	mov	r2, sl
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f aef9 	beq.w	800ae2a <_printf_float+0xb6>
 800b038:	f109 0901 	add.w	r9, r9, #1
 800b03c:	e7ee      	b.n	800b01c <_printf_float+0x2a8>
 800b03e:	bf00      	nop
 800b040:	7fefffff 	.word	0x7fefffff
 800b044:	0800ed9c 	.word	0x0800ed9c
 800b048:	0800eda0 	.word	0x0800eda0
 800b04c:	0800eda8 	.word	0x0800eda8
 800b050:	0800eda4 	.word	0x0800eda4
 800b054:	0800edac 	.word	0x0800edac
 800b058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b05a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b05c:	429a      	cmp	r2, r3
 800b05e:	bfa8      	it	ge
 800b060:	461a      	movge	r2, r3
 800b062:	2a00      	cmp	r2, #0
 800b064:	4691      	mov	r9, r2
 800b066:	dc37      	bgt.n	800b0d8 <_printf_float+0x364>
 800b068:	f04f 0b00 	mov.w	fp, #0
 800b06c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b070:	f104 021a 	add.w	r2, r4, #26
 800b074:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b078:	ebaa 0309 	sub.w	r3, sl, r9
 800b07c:	455b      	cmp	r3, fp
 800b07e:	dc33      	bgt.n	800b0e8 <_printf_float+0x374>
 800b080:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b084:	429a      	cmp	r2, r3
 800b086:	db3b      	blt.n	800b100 <_printf_float+0x38c>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	07da      	lsls	r2, r3, #31
 800b08c:	d438      	bmi.n	800b100 <_printf_float+0x38c>
 800b08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b090:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b092:	eba3 020a 	sub.w	r2, r3, sl
 800b096:	eba3 0901 	sub.w	r9, r3, r1
 800b09a:	4591      	cmp	r9, r2
 800b09c:	bfa8      	it	ge
 800b09e:	4691      	movge	r9, r2
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	dc34      	bgt.n	800b110 <_printf_float+0x39c>
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0ae:	f104 0a1a 	add.w	sl, r4, #26
 800b0b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b0b6:	1a9b      	subs	r3, r3, r2
 800b0b8:	eba3 0309 	sub.w	r3, r3, r9
 800b0bc:	4543      	cmp	r3, r8
 800b0be:	f77f af7a 	ble.w	800afb6 <_printf_float+0x242>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f aeac 	beq.w	800ae2a <_printf_float+0xb6>
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	e7ec      	b.n	800b0b2 <_printf_float+0x33e>
 800b0d8:	4613      	mov	r3, r2
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4642      	mov	r2, r8
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d1c0      	bne.n	800b068 <_printf_float+0x2f4>
 800b0e6:	e6a0      	b.n	800ae2a <_printf_float+0xb6>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	920b      	str	r2, [sp, #44]	; 0x2c
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f ae99 	beq.w	800ae2a <_printf_float+0xb6>
 800b0f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0fa:	f10b 0b01 	add.w	fp, fp, #1
 800b0fe:	e7b9      	b.n	800b074 <_printf_float+0x300>
 800b100:	4631      	mov	r1, r6
 800b102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b106:	4628      	mov	r0, r5
 800b108:	47b8      	blx	r7
 800b10a:	3001      	adds	r0, #1
 800b10c:	d1bf      	bne.n	800b08e <_printf_float+0x31a>
 800b10e:	e68c      	b.n	800ae2a <_printf_float+0xb6>
 800b110:	464b      	mov	r3, r9
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	eb08 020a 	add.w	r2, r8, sl
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	d1c2      	bne.n	800b0a6 <_printf_float+0x332>
 800b120:	e683      	b.n	800ae2a <_printf_float+0xb6>
 800b122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b124:	2a01      	cmp	r2, #1
 800b126:	dc01      	bgt.n	800b12c <_printf_float+0x3b8>
 800b128:	07db      	lsls	r3, r3, #31
 800b12a:	d537      	bpl.n	800b19c <_printf_float+0x428>
 800b12c:	2301      	movs	r3, #1
 800b12e:	4642      	mov	r2, r8
 800b130:	4631      	mov	r1, r6
 800b132:	4628      	mov	r0, r5
 800b134:	47b8      	blx	r7
 800b136:	3001      	adds	r0, #1
 800b138:	f43f ae77 	beq.w	800ae2a <_printf_float+0xb6>
 800b13c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f ae6f 	beq.w	800ae2a <_printf_float+0xb6>
 800b14c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b150:	2200      	movs	r2, #0
 800b152:	2300      	movs	r3, #0
 800b154:	f7f5 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 800b158:	b9d8      	cbnz	r0, 800b192 <_printf_float+0x41e>
 800b15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15c:	f108 0201 	add.w	r2, r8, #1
 800b160:	3b01      	subs	r3, #1
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d10e      	bne.n	800b18a <_printf_float+0x416>
 800b16c:	e65d      	b.n	800ae2a <_printf_float+0xb6>
 800b16e:	2301      	movs	r3, #1
 800b170:	464a      	mov	r2, r9
 800b172:	4631      	mov	r1, r6
 800b174:	4628      	mov	r0, r5
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	f43f ae56 	beq.w	800ae2a <_printf_float+0xb6>
 800b17e:	f108 0801 	add.w	r8, r8, #1
 800b182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b184:	3b01      	subs	r3, #1
 800b186:	4543      	cmp	r3, r8
 800b188:	dcf1      	bgt.n	800b16e <_printf_float+0x3fa>
 800b18a:	4653      	mov	r3, sl
 800b18c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b190:	e6e0      	b.n	800af54 <_printf_float+0x1e0>
 800b192:	f04f 0800 	mov.w	r8, #0
 800b196:	f104 091a 	add.w	r9, r4, #26
 800b19a:	e7f2      	b.n	800b182 <_printf_float+0x40e>
 800b19c:	2301      	movs	r3, #1
 800b19e:	4642      	mov	r2, r8
 800b1a0:	e7df      	b.n	800b162 <_printf_float+0x3ee>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	464a      	mov	r2, r9
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b8      	blx	r7
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f43f ae3c 	beq.w	800ae2a <_printf_float+0xb6>
 800b1b2:	f108 0801 	add.w	r8, r8, #1
 800b1b6:	68e3      	ldr	r3, [r4, #12]
 800b1b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1ba:	1a5b      	subs	r3, r3, r1
 800b1bc:	4543      	cmp	r3, r8
 800b1be:	dcf0      	bgt.n	800b1a2 <_printf_float+0x42e>
 800b1c0:	e6fd      	b.n	800afbe <_printf_float+0x24a>
 800b1c2:	f04f 0800 	mov.w	r8, #0
 800b1c6:	f104 0919 	add.w	r9, r4, #25
 800b1ca:	e7f4      	b.n	800b1b6 <_printf_float+0x442>

0800b1cc <_printf_common>:
 800b1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	4616      	mov	r6, r2
 800b1d2:	4699      	mov	r9, r3
 800b1d4:	688a      	ldr	r2, [r1, #8]
 800b1d6:	690b      	ldr	r3, [r1, #16]
 800b1d8:	4607      	mov	r7, r0
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	bfb8      	it	lt
 800b1de:	4613      	movlt	r3, r2
 800b1e0:	6033      	str	r3, [r6, #0]
 800b1e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1ec:	b10a      	cbz	r2, 800b1f2 <_printf_common+0x26>
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	6033      	str	r3, [r6, #0]
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	0699      	lsls	r1, r3, #26
 800b1f6:	bf42      	ittt	mi
 800b1f8:	6833      	ldrmi	r3, [r6, #0]
 800b1fa:	3302      	addmi	r3, #2
 800b1fc:	6033      	strmi	r3, [r6, #0]
 800b1fe:	6825      	ldr	r5, [r4, #0]
 800b200:	f015 0506 	ands.w	r5, r5, #6
 800b204:	d106      	bne.n	800b214 <_printf_common+0x48>
 800b206:	f104 0a19 	add.w	sl, r4, #25
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	6832      	ldr	r2, [r6, #0]
 800b20e:	1a9b      	subs	r3, r3, r2
 800b210:	42ab      	cmp	r3, r5
 800b212:	dc28      	bgt.n	800b266 <_printf_common+0x9a>
 800b214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b218:	1e13      	subs	r3, r2, #0
 800b21a:	6822      	ldr	r2, [r4, #0]
 800b21c:	bf18      	it	ne
 800b21e:	2301      	movne	r3, #1
 800b220:	0692      	lsls	r2, r2, #26
 800b222:	d42d      	bmi.n	800b280 <_printf_common+0xb4>
 800b224:	4649      	mov	r1, r9
 800b226:	4638      	mov	r0, r7
 800b228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b22c:	47c0      	blx	r8
 800b22e:	3001      	adds	r0, #1
 800b230:	d020      	beq.n	800b274 <_printf_common+0xa8>
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	68e5      	ldr	r5, [r4, #12]
 800b236:	f003 0306 	and.w	r3, r3, #6
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	bf18      	it	ne
 800b23e:	2500      	movne	r5, #0
 800b240:	6832      	ldr	r2, [r6, #0]
 800b242:	f04f 0600 	mov.w	r6, #0
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	bf08      	it	eq
 800b24a:	1aad      	subeq	r5, r5, r2
 800b24c:	6922      	ldr	r2, [r4, #16]
 800b24e:	bf08      	it	eq
 800b250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b254:	4293      	cmp	r3, r2
 800b256:	bfc4      	itt	gt
 800b258:	1a9b      	subgt	r3, r3, r2
 800b25a:	18ed      	addgt	r5, r5, r3
 800b25c:	341a      	adds	r4, #26
 800b25e:	42b5      	cmp	r5, r6
 800b260:	d11a      	bne.n	800b298 <_printf_common+0xcc>
 800b262:	2000      	movs	r0, #0
 800b264:	e008      	b.n	800b278 <_printf_common+0xac>
 800b266:	2301      	movs	r3, #1
 800b268:	4652      	mov	r2, sl
 800b26a:	4649      	mov	r1, r9
 800b26c:	4638      	mov	r0, r7
 800b26e:	47c0      	blx	r8
 800b270:	3001      	adds	r0, #1
 800b272:	d103      	bne.n	800b27c <_printf_common+0xb0>
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27c:	3501      	adds	r5, #1
 800b27e:	e7c4      	b.n	800b20a <_printf_common+0x3e>
 800b280:	2030      	movs	r0, #48	; 0x30
 800b282:	18e1      	adds	r1, r4, r3
 800b284:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b28e:	4422      	add	r2, r4
 800b290:	3302      	adds	r3, #2
 800b292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b296:	e7c5      	b.n	800b224 <_printf_common+0x58>
 800b298:	2301      	movs	r3, #1
 800b29a:	4622      	mov	r2, r4
 800b29c:	4649      	mov	r1, r9
 800b29e:	4638      	mov	r0, r7
 800b2a0:	47c0      	blx	r8
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d0e6      	beq.n	800b274 <_printf_common+0xa8>
 800b2a6:	3601      	adds	r6, #1
 800b2a8:	e7d9      	b.n	800b25e <_printf_common+0x92>
	...

0800b2ac <_printf_i>:
 800b2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b0:	7e0f      	ldrb	r7, [r1, #24]
 800b2b2:	4691      	mov	r9, r2
 800b2b4:	2f78      	cmp	r7, #120	; 0x78
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	469a      	mov	sl, r3
 800b2bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2c2:	d807      	bhi.n	800b2d4 <_printf_i+0x28>
 800b2c4:	2f62      	cmp	r7, #98	; 0x62
 800b2c6:	d80a      	bhi.n	800b2de <_printf_i+0x32>
 800b2c8:	2f00      	cmp	r7, #0
 800b2ca:	f000 80d9 	beq.w	800b480 <_printf_i+0x1d4>
 800b2ce:	2f58      	cmp	r7, #88	; 0x58
 800b2d0:	f000 80a4 	beq.w	800b41c <_printf_i+0x170>
 800b2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2dc:	e03a      	b.n	800b354 <_printf_i+0xa8>
 800b2de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2e2:	2b15      	cmp	r3, #21
 800b2e4:	d8f6      	bhi.n	800b2d4 <_printf_i+0x28>
 800b2e6:	a101      	add	r1, pc, #4	; (adr r1, 800b2ec <_printf_i+0x40>)
 800b2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2ec:	0800b345 	.word	0x0800b345
 800b2f0:	0800b359 	.word	0x0800b359
 800b2f4:	0800b2d5 	.word	0x0800b2d5
 800b2f8:	0800b2d5 	.word	0x0800b2d5
 800b2fc:	0800b2d5 	.word	0x0800b2d5
 800b300:	0800b2d5 	.word	0x0800b2d5
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b2d5 	.word	0x0800b2d5
 800b30c:	0800b2d5 	.word	0x0800b2d5
 800b310:	0800b2d5 	.word	0x0800b2d5
 800b314:	0800b2d5 	.word	0x0800b2d5
 800b318:	0800b467 	.word	0x0800b467
 800b31c:	0800b389 	.word	0x0800b389
 800b320:	0800b449 	.word	0x0800b449
 800b324:	0800b2d5 	.word	0x0800b2d5
 800b328:	0800b2d5 	.word	0x0800b2d5
 800b32c:	0800b489 	.word	0x0800b489
 800b330:	0800b2d5 	.word	0x0800b2d5
 800b334:	0800b389 	.word	0x0800b389
 800b338:	0800b2d5 	.word	0x0800b2d5
 800b33c:	0800b2d5 	.word	0x0800b2d5
 800b340:	0800b451 	.word	0x0800b451
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	1d1a      	adds	r2, r3, #4
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	602a      	str	r2, [r5, #0]
 800b34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b354:	2301      	movs	r3, #1
 800b356:	e0a4      	b.n	800b4a2 <_printf_i+0x1f6>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	6829      	ldr	r1, [r5, #0]
 800b35c:	0606      	lsls	r6, r0, #24
 800b35e:	f101 0304 	add.w	r3, r1, #4
 800b362:	d50a      	bpl.n	800b37a <_printf_i+0xce>
 800b364:	680e      	ldr	r6, [r1, #0]
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	2e00      	cmp	r6, #0
 800b36a:	da03      	bge.n	800b374 <_printf_i+0xc8>
 800b36c:	232d      	movs	r3, #45	; 0x2d
 800b36e:	4276      	negs	r6, r6
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	230a      	movs	r3, #10
 800b376:	485e      	ldr	r0, [pc, #376]	; (800b4f0 <_printf_i+0x244>)
 800b378:	e019      	b.n	800b3ae <_printf_i+0x102>
 800b37a:	680e      	ldr	r6, [r1, #0]
 800b37c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	bf18      	it	ne
 800b384:	b236      	sxthne	r6, r6
 800b386:	e7ef      	b.n	800b368 <_printf_i+0xbc>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	6820      	ldr	r0, [r4, #0]
 800b38c:	1d19      	adds	r1, r3, #4
 800b38e:	6029      	str	r1, [r5, #0]
 800b390:	0601      	lsls	r1, r0, #24
 800b392:	d501      	bpl.n	800b398 <_printf_i+0xec>
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	e002      	b.n	800b39e <_printf_i+0xf2>
 800b398:	0646      	lsls	r6, r0, #25
 800b39a:	d5fb      	bpl.n	800b394 <_printf_i+0xe8>
 800b39c:	881e      	ldrh	r6, [r3, #0]
 800b39e:	2f6f      	cmp	r7, #111	; 0x6f
 800b3a0:	bf0c      	ite	eq
 800b3a2:	2308      	moveq	r3, #8
 800b3a4:	230a      	movne	r3, #10
 800b3a6:	4852      	ldr	r0, [pc, #328]	; (800b4f0 <_printf_i+0x244>)
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ae:	6865      	ldr	r5, [r4, #4]
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	bfa8      	it	ge
 800b3b4:	6821      	ldrge	r1, [r4, #0]
 800b3b6:	60a5      	str	r5, [r4, #8]
 800b3b8:	bfa4      	itt	ge
 800b3ba:	f021 0104 	bicge.w	r1, r1, #4
 800b3be:	6021      	strge	r1, [r4, #0]
 800b3c0:	b90e      	cbnz	r6, 800b3c6 <_printf_i+0x11a>
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	d04d      	beq.n	800b462 <_printf_i+0x1b6>
 800b3c6:	4615      	mov	r5, r2
 800b3c8:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3cc:	fb03 6711 	mls	r7, r3, r1, r6
 800b3d0:	5dc7      	ldrb	r7, [r0, r7]
 800b3d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3d6:	4637      	mov	r7, r6
 800b3d8:	42bb      	cmp	r3, r7
 800b3da:	460e      	mov	r6, r1
 800b3dc:	d9f4      	bls.n	800b3c8 <_printf_i+0x11c>
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d10b      	bne.n	800b3fa <_printf_i+0x14e>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	07de      	lsls	r6, r3, #31
 800b3e6:	d508      	bpl.n	800b3fa <_printf_i+0x14e>
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	6861      	ldr	r1, [r4, #4]
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	bfde      	ittt	le
 800b3f0:	2330      	movle	r3, #48	; 0x30
 800b3f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3fa:	1b52      	subs	r2, r2, r5
 800b3fc:	6122      	str	r2, [r4, #16]
 800b3fe:	464b      	mov	r3, r9
 800b400:	4621      	mov	r1, r4
 800b402:	4640      	mov	r0, r8
 800b404:	f8cd a000 	str.w	sl, [sp]
 800b408:	aa03      	add	r2, sp, #12
 800b40a:	f7ff fedf 	bl	800b1cc <_printf_common>
 800b40e:	3001      	adds	r0, #1
 800b410:	d14c      	bne.n	800b4ac <_printf_i+0x200>
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	b004      	add	sp, #16
 800b418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41c:	4834      	ldr	r0, [pc, #208]	; (800b4f0 <_printf_i+0x244>)
 800b41e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b422:	6829      	ldr	r1, [r5, #0]
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	f851 6b04 	ldr.w	r6, [r1], #4
 800b42a:	6029      	str	r1, [r5, #0]
 800b42c:	061d      	lsls	r5, r3, #24
 800b42e:	d514      	bpl.n	800b45a <_printf_i+0x1ae>
 800b430:	07df      	lsls	r7, r3, #31
 800b432:	bf44      	itt	mi
 800b434:	f043 0320 	orrmi.w	r3, r3, #32
 800b438:	6023      	strmi	r3, [r4, #0]
 800b43a:	b91e      	cbnz	r6, 800b444 <_printf_i+0x198>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	f023 0320 	bic.w	r3, r3, #32
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	2310      	movs	r3, #16
 800b446:	e7af      	b.n	800b3a8 <_printf_i+0xfc>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	f043 0320 	orr.w	r3, r3, #32
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	2378      	movs	r3, #120	; 0x78
 800b452:	4828      	ldr	r0, [pc, #160]	; (800b4f4 <_printf_i+0x248>)
 800b454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b458:	e7e3      	b.n	800b422 <_printf_i+0x176>
 800b45a:	0659      	lsls	r1, r3, #25
 800b45c:	bf48      	it	mi
 800b45e:	b2b6      	uxthmi	r6, r6
 800b460:	e7e6      	b.n	800b430 <_printf_i+0x184>
 800b462:	4615      	mov	r5, r2
 800b464:	e7bb      	b.n	800b3de <_printf_i+0x132>
 800b466:	682b      	ldr	r3, [r5, #0]
 800b468:	6826      	ldr	r6, [r4, #0]
 800b46a:	1d18      	adds	r0, r3, #4
 800b46c:	6961      	ldr	r1, [r4, #20]
 800b46e:	6028      	str	r0, [r5, #0]
 800b470:	0635      	lsls	r5, r6, #24
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	d501      	bpl.n	800b47a <_printf_i+0x1ce>
 800b476:	6019      	str	r1, [r3, #0]
 800b478:	e002      	b.n	800b480 <_printf_i+0x1d4>
 800b47a:	0670      	lsls	r0, r6, #25
 800b47c:	d5fb      	bpl.n	800b476 <_printf_i+0x1ca>
 800b47e:	8019      	strh	r1, [r3, #0]
 800b480:	2300      	movs	r3, #0
 800b482:	4615      	mov	r5, r2
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	e7ba      	b.n	800b3fe <_printf_i+0x152>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	2100      	movs	r1, #0
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	602a      	str	r2, [r5, #0]
 800b490:	681d      	ldr	r5, [r3, #0]
 800b492:	6862      	ldr	r2, [r4, #4]
 800b494:	4628      	mov	r0, r5
 800b496:	f000 fed5 	bl	800c244 <memchr>
 800b49a:	b108      	cbz	r0, 800b4a0 <_printf_i+0x1f4>
 800b49c:	1b40      	subs	r0, r0, r5
 800b49e:	6060      	str	r0, [r4, #4]
 800b4a0:	6863      	ldr	r3, [r4, #4]
 800b4a2:	6123      	str	r3, [r4, #16]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4aa:	e7a8      	b.n	800b3fe <_printf_i+0x152>
 800b4ac:	462a      	mov	r2, r5
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	47d0      	blx	sl
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d0ab      	beq.n	800b412 <_printf_i+0x166>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	079b      	lsls	r3, r3, #30
 800b4be:	d413      	bmi.n	800b4e8 <_printf_i+0x23c>
 800b4c0:	68e0      	ldr	r0, [r4, #12]
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	4298      	cmp	r0, r3
 800b4c6:	bfb8      	it	lt
 800b4c8:	4618      	movlt	r0, r3
 800b4ca:	e7a4      	b.n	800b416 <_printf_i+0x16a>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	47d0      	blx	sl
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d09b      	beq.n	800b412 <_printf_i+0x166>
 800b4da:	3501      	adds	r5, #1
 800b4dc:	68e3      	ldr	r3, [r4, #12]
 800b4de:	9903      	ldr	r1, [sp, #12]
 800b4e0:	1a5b      	subs	r3, r3, r1
 800b4e2:	42ab      	cmp	r3, r5
 800b4e4:	dcf2      	bgt.n	800b4cc <_printf_i+0x220>
 800b4e6:	e7eb      	b.n	800b4c0 <_printf_i+0x214>
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	f104 0619 	add.w	r6, r4, #25
 800b4ee:	e7f5      	b.n	800b4dc <_printf_i+0x230>
 800b4f0:	0800edae 	.word	0x0800edae
 800b4f4:	0800edbf 	.word	0x0800edbf

0800b4f8 <siprintf>:
 800b4f8:	b40e      	push	{r1, r2, r3}
 800b4fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4fe:	b500      	push	{lr}
 800b500:	b09c      	sub	sp, #112	; 0x70
 800b502:	ab1d      	add	r3, sp, #116	; 0x74
 800b504:	9002      	str	r0, [sp, #8]
 800b506:	9006      	str	r0, [sp, #24]
 800b508:	9107      	str	r1, [sp, #28]
 800b50a:	9104      	str	r1, [sp, #16]
 800b50c:	4808      	ldr	r0, [pc, #32]	; (800b530 <siprintf+0x38>)
 800b50e:	4909      	ldr	r1, [pc, #36]	; (800b534 <siprintf+0x3c>)
 800b510:	f853 2b04 	ldr.w	r2, [r3], #4
 800b514:	9105      	str	r1, [sp, #20]
 800b516:	6800      	ldr	r0, [r0, #0]
 800b518:	a902      	add	r1, sp, #8
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	f001 fb7c 	bl	800cc18 <_svfiprintf_r>
 800b520:	2200      	movs	r2, #0
 800b522:	9b02      	ldr	r3, [sp, #8]
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	b01c      	add	sp, #112	; 0x70
 800b528:	f85d eb04 	ldr.w	lr, [sp], #4
 800b52c:	b003      	add	sp, #12
 800b52e:	4770      	bx	lr
 800b530:	20000184 	.word	0x20000184
 800b534:	ffff0208 	.word	0xffff0208

0800b538 <quorem>:
 800b538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	6903      	ldr	r3, [r0, #16]
 800b53e:	690c      	ldr	r4, [r1, #16]
 800b540:	4607      	mov	r7, r0
 800b542:	42a3      	cmp	r3, r4
 800b544:	f2c0 8082 	blt.w	800b64c <quorem+0x114>
 800b548:	3c01      	subs	r4, #1
 800b54a:	f100 0514 	add.w	r5, r0, #20
 800b54e:	f101 0814 	add.w	r8, r1, #20
 800b552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b560:	3301      	adds	r3, #1
 800b562:	429a      	cmp	r2, r3
 800b564:	fbb2 f6f3 	udiv	r6, r2, r3
 800b568:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b56c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b570:	d331      	bcc.n	800b5d6 <quorem+0x9e>
 800b572:	f04f 0e00 	mov.w	lr, #0
 800b576:	4640      	mov	r0, r8
 800b578:	46ac      	mov	ip, r5
 800b57a:	46f2      	mov	sl, lr
 800b57c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b580:	b293      	uxth	r3, r2
 800b582:	fb06 e303 	mla	r3, r6, r3, lr
 800b586:	0c12      	lsrs	r2, r2, #16
 800b588:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	fb06 e202 	mla	r2, r6, r2, lr
 800b592:	ebaa 0303 	sub.w	r3, sl, r3
 800b596:	f8dc a000 	ldr.w	sl, [ip]
 800b59a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b59e:	fa1f fa8a 	uxth.w	sl, sl
 800b5a2:	4453      	add	r3, sl
 800b5a4:	f8dc a000 	ldr.w	sl, [ip]
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5b8:	4581      	cmp	r9, r0
 800b5ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5be:	f84c 3b04 	str.w	r3, [ip], #4
 800b5c2:	d2db      	bcs.n	800b57c <quorem+0x44>
 800b5c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5c8:	b92b      	cbnz	r3, 800b5d6 <quorem+0x9e>
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	3b04      	subs	r3, #4
 800b5ce:	429d      	cmp	r5, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	d32f      	bcc.n	800b634 <quorem+0xfc>
 800b5d4:	613c      	str	r4, [r7, #16]
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f001 f8ce 	bl	800c778 <__mcmp>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	db25      	blt.n	800b62c <quorem+0xf4>
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f04f 0c00 	mov.w	ip, #0
 800b5e6:	3601      	adds	r6, #1
 800b5e8:	f858 1b04 	ldr.w	r1, [r8], #4
 800b5ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b5f0:	b28b      	uxth	r3, r1
 800b5f2:	ebac 0303 	sub.w	r3, ip, r3
 800b5f6:	fa1f f28e 	uxth.w	r2, lr
 800b5fa:	4413      	add	r3, r2
 800b5fc:	0c0a      	lsrs	r2, r1, #16
 800b5fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b602:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b606:	b29b      	uxth	r3, r3
 800b608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b60c:	45c1      	cmp	r9, r8
 800b60e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b612:	f840 3b04 	str.w	r3, [r0], #4
 800b616:	d2e7      	bcs.n	800b5e8 <quorem+0xb0>
 800b618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b61c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b620:	b922      	cbnz	r2, 800b62c <quorem+0xf4>
 800b622:	3b04      	subs	r3, #4
 800b624:	429d      	cmp	r5, r3
 800b626:	461a      	mov	r2, r3
 800b628:	d30a      	bcc.n	800b640 <quorem+0x108>
 800b62a:	613c      	str	r4, [r7, #16]
 800b62c:	4630      	mov	r0, r6
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	6812      	ldr	r2, [r2, #0]
 800b636:	3b04      	subs	r3, #4
 800b638:	2a00      	cmp	r2, #0
 800b63a:	d1cb      	bne.n	800b5d4 <quorem+0x9c>
 800b63c:	3c01      	subs	r4, #1
 800b63e:	e7c6      	b.n	800b5ce <quorem+0x96>
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	3b04      	subs	r3, #4
 800b644:	2a00      	cmp	r2, #0
 800b646:	d1f0      	bne.n	800b62a <quorem+0xf2>
 800b648:	3c01      	subs	r4, #1
 800b64a:	e7eb      	b.n	800b624 <quorem+0xec>
 800b64c:	2000      	movs	r0, #0
 800b64e:	e7ee      	b.n	800b62e <quorem+0xf6>

0800b650 <_dtoa_r>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	4616      	mov	r6, r2
 800b656:	461f      	mov	r7, r3
 800b658:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b65a:	b099      	sub	sp, #100	; 0x64
 800b65c:	4605      	mov	r5, r0
 800b65e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b662:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b666:	b974      	cbnz	r4, 800b686 <_dtoa_r+0x36>
 800b668:	2010      	movs	r0, #16
 800b66a:	f000 fde3 	bl	800c234 <malloc>
 800b66e:	4602      	mov	r2, r0
 800b670:	6268      	str	r0, [r5, #36]	; 0x24
 800b672:	b920      	cbnz	r0, 800b67e <_dtoa_r+0x2e>
 800b674:	21ea      	movs	r1, #234	; 0xea
 800b676:	4ba8      	ldr	r3, [pc, #672]	; (800b918 <_dtoa_r+0x2c8>)
 800b678:	48a8      	ldr	r0, [pc, #672]	; (800b91c <_dtoa_r+0x2cc>)
 800b67a:	f001 fbdd 	bl	800ce38 <__assert_func>
 800b67e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b682:	6004      	str	r4, [r0, #0]
 800b684:	60c4      	str	r4, [r0, #12]
 800b686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	b151      	cbz	r1, 800b6a2 <_dtoa_r+0x52>
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	2301      	movs	r3, #1
 800b690:	4093      	lsls	r3, r2
 800b692:	604a      	str	r2, [r1, #4]
 800b694:	608b      	str	r3, [r1, #8]
 800b696:	4628      	mov	r0, r5
 800b698:	f000 fe30 	bl	800c2fc <_Bfree>
 800b69c:	2200      	movs	r2, #0
 800b69e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	1e3b      	subs	r3, r7, #0
 800b6a4:	bfaf      	iteee	ge
 800b6a6:	2300      	movge	r3, #0
 800b6a8:	2201      	movlt	r2, #1
 800b6aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6ae:	9305      	strlt	r3, [sp, #20]
 800b6b0:	bfa8      	it	ge
 800b6b2:	f8c8 3000 	strge.w	r3, [r8]
 800b6b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b6ba:	4b99      	ldr	r3, [pc, #612]	; (800b920 <_dtoa_r+0x2d0>)
 800b6bc:	bfb8      	it	lt
 800b6be:	f8c8 2000 	strlt.w	r2, [r8]
 800b6c2:	ea33 0309 	bics.w	r3, r3, r9
 800b6c6:	d119      	bne.n	800b6fc <_dtoa_r+0xac>
 800b6c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6d4:	4333      	orrs	r3, r6
 800b6d6:	f000 857f 	beq.w	800c1d8 <_dtoa_r+0xb88>
 800b6da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6dc:	b953      	cbnz	r3, 800b6f4 <_dtoa_r+0xa4>
 800b6de:	4b91      	ldr	r3, [pc, #580]	; (800b924 <_dtoa_r+0x2d4>)
 800b6e0:	e022      	b.n	800b728 <_dtoa_r+0xd8>
 800b6e2:	4b91      	ldr	r3, [pc, #580]	; (800b928 <_dtoa_r+0x2d8>)
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	9803      	ldr	r0, [sp, #12]
 800b6ee:	b019      	add	sp, #100	; 0x64
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	4b8b      	ldr	r3, [pc, #556]	; (800b924 <_dtoa_r+0x2d4>)
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	3303      	adds	r3, #3
 800b6fa:	e7f5      	b.n	800b6e8 <_dtoa_r+0x98>
 800b6fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b700:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	f7f5 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 800b710:	4680      	mov	r8, r0
 800b712:	b158      	cbz	r0, 800b72c <_dtoa_r+0xdc>
 800b714:	2301      	movs	r3, #1
 800b716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 8558 	beq.w	800c1d2 <_dtoa_r+0xb82>
 800b722:	4882      	ldr	r0, [pc, #520]	; (800b92c <_dtoa_r+0x2dc>)
 800b724:	6018      	str	r0, [r3, #0]
 800b726:	1e43      	subs	r3, r0, #1
 800b728:	9303      	str	r3, [sp, #12]
 800b72a:	e7df      	b.n	800b6ec <_dtoa_r+0x9c>
 800b72c:	ab16      	add	r3, sp, #88	; 0x58
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	ab17      	add	r3, sp, #92	; 0x5c
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4628      	mov	r0, r5
 800b736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b73a:	f001 f8c5 	bl	800c8c8 <__d2b>
 800b73e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b742:	4683      	mov	fp, r0
 800b744:	2c00      	cmp	r4, #0
 800b746:	d07f      	beq.n	800b848 <_dtoa_r+0x1f8>
 800b748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b756:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b75a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b75e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b762:	2200      	movs	r2, #0
 800b764:	4b72      	ldr	r3, [pc, #456]	; (800b930 <_dtoa_r+0x2e0>)
 800b766:	f7f4 fcff 	bl	8000168 <__aeabi_dsub>
 800b76a:	a365      	add	r3, pc, #404	; (adr r3, 800b900 <_dtoa_r+0x2b0>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 feb2 	bl	80004d8 <__aeabi_dmul>
 800b774:	a364      	add	r3, pc, #400	; (adr r3, 800b908 <_dtoa_r+0x2b8>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	f7f4 fcf7 	bl	800016c <__adddf3>
 800b77e:	4606      	mov	r6, r0
 800b780:	4620      	mov	r0, r4
 800b782:	460f      	mov	r7, r1
 800b784:	f7f4 fe3e 	bl	8000404 <__aeabi_i2d>
 800b788:	a361      	add	r3, pc, #388	; (adr r3, 800b910 <_dtoa_r+0x2c0>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 fea3 	bl	80004d8 <__aeabi_dmul>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4630      	mov	r0, r6
 800b798:	4639      	mov	r1, r7
 800b79a:	f7f4 fce7 	bl	800016c <__adddf3>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	f7f5 f949 	bl	8000a38 <__aeabi_d2iz>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	f7f5 f904 	bl	80009bc <__aeabi_dcmplt>
 800b7b4:	b148      	cbz	r0, 800b7ca <_dtoa_r+0x17a>
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	f7f4 fe24 	bl	8000404 <__aeabi_i2d>
 800b7bc:	4632      	mov	r2, r6
 800b7be:	463b      	mov	r3, r7
 800b7c0:	f7f5 f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 800b7c4:	b908      	cbnz	r0, 800b7ca <_dtoa_r+0x17a>
 800b7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ca:	f1ba 0f16 	cmp.w	sl, #22
 800b7ce:	d858      	bhi.n	800b882 <_dtoa_r+0x232>
 800b7d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7d4:	4b57      	ldr	r3, [pc, #348]	; (800b934 <_dtoa_r+0x2e4>)
 800b7d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f5 f8ed 	bl	80009bc <__aeabi_dcmplt>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d04f      	beq.n	800b886 <_dtoa_r+0x236>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7f0:	1b1c      	subs	r4, r3, r4
 800b7f2:	1e63      	subs	r3, r4, #1
 800b7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f6:	bf49      	itett	mi
 800b7f8:	f1c4 0301 	rsbmi	r3, r4, #1
 800b7fc:	2300      	movpl	r3, #0
 800b7fe:	9306      	strmi	r3, [sp, #24]
 800b800:	2300      	movmi	r3, #0
 800b802:	bf54      	ite	pl
 800b804:	9306      	strpl	r3, [sp, #24]
 800b806:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b808:	f1ba 0f00 	cmp.w	sl, #0
 800b80c:	db3d      	blt.n	800b88a <_dtoa_r+0x23a>
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b814:	4453      	add	r3, sl
 800b816:	9309      	str	r3, [sp, #36]	; 0x24
 800b818:	2300      	movs	r3, #0
 800b81a:	930a      	str	r3, [sp, #40]	; 0x28
 800b81c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b81e:	2b09      	cmp	r3, #9
 800b820:	f200 808c 	bhi.w	800b93c <_dtoa_r+0x2ec>
 800b824:	2b05      	cmp	r3, #5
 800b826:	bfc4      	itt	gt
 800b828:	3b04      	subgt	r3, #4
 800b82a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b82c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82e:	bfc8      	it	gt
 800b830:	2400      	movgt	r4, #0
 800b832:	f1a3 0302 	sub.w	r3, r3, #2
 800b836:	bfd8      	it	le
 800b838:	2401      	movle	r4, #1
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	f200 808a 	bhi.w	800b954 <_dtoa_r+0x304>
 800b840:	e8df f003 	tbb	[pc, r3]
 800b844:	5b4d4f2d 	.word	0x5b4d4f2d
 800b848:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b84c:	441c      	add	r4, r3
 800b84e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b852:	2b20      	cmp	r3, #32
 800b854:	bfc3      	ittte	gt
 800b856:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b85a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b85e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b862:	f1c3 0320 	rsble	r3, r3, #32
 800b866:	bfc6      	itte	gt
 800b868:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b86c:	4318      	orrgt	r0, r3
 800b86e:	fa06 f003 	lslle.w	r0, r6, r3
 800b872:	f7f4 fdb7 	bl	80003e4 <__aeabi_ui2d>
 800b876:	2301      	movs	r3, #1
 800b878:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b87c:	3c01      	subs	r4, #1
 800b87e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b880:	e76f      	b.n	800b762 <_dtoa_r+0x112>
 800b882:	2301      	movs	r3, #1
 800b884:	e7b2      	b.n	800b7ec <_dtoa_r+0x19c>
 800b886:	900f      	str	r0, [sp, #60]	; 0x3c
 800b888:	e7b1      	b.n	800b7ee <_dtoa_r+0x19e>
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	eba3 030a 	sub.w	r3, r3, sl
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	f1ca 0300 	rsb	r3, sl, #0
 800b896:	930a      	str	r3, [sp, #40]	; 0x28
 800b898:	2300      	movs	r3, #0
 800b89a:	930e      	str	r3, [sp, #56]	; 0x38
 800b89c:	e7be      	b.n	800b81c <_dtoa_r+0x1cc>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dc58      	bgt.n	800b95a <_dtoa_r+0x30a>
 800b8a8:	f04f 0901 	mov.w	r9, #1
 800b8ac:	464b      	mov	r3, r9
 800b8ae:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b8ba:	6042      	str	r2, [r0, #4]
 800b8bc:	2204      	movs	r2, #4
 800b8be:	f102 0614 	add.w	r6, r2, #20
 800b8c2:	429e      	cmp	r6, r3
 800b8c4:	6841      	ldr	r1, [r0, #4]
 800b8c6:	d94e      	bls.n	800b966 <_dtoa_r+0x316>
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f000 fcd7 	bl	800c27c <_Balloc>
 800b8ce:	9003      	str	r0, [sp, #12]
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d14c      	bne.n	800b96e <_dtoa_r+0x31e>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8da:	4b17      	ldr	r3, [pc, #92]	; (800b938 <_dtoa_r+0x2e8>)
 800b8dc:	e6cc      	b.n	800b678 <_dtoa_r+0x28>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7de      	b.n	800b8a0 <_dtoa_r+0x250>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8e8:	eb0a 0903 	add.w	r9, sl, r3
 800b8ec:	f109 0301 	add.w	r3, r9, #1
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	9308      	str	r3, [sp, #32]
 800b8f4:	bfb8      	it	lt
 800b8f6:	2301      	movlt	r3, #1
 800b8f8:	e7dd      	b.n	800b8b6 <_dtoa_r+0x266>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e7f2      	b.n	800b8e4 <_dtoa_r+0x294>
 800b8fe:	bf00      	nop
 800b900:	636f4361 	.word	0x636f4361
 800b904:	3fd287a7 	.word	0x3fd287a7
 800b908:	8b60c8b3 	.word	0x8b60c8b3
 800b90c:	3fc68a28 	.word	0x3fc68a28
 800b910:	509f79fb 	.word	0x509f79fb
 800b914:	3fd34413 	.word	0x3fd34413
 800b918:	0800eddd 	.word	0x0800eddd
 800b91c:	0800edf4 	.word	0x0800edf4
 800b920:	7ff00000 	.word	0x7ff00000
 800b924:	0800edd9 	.word	0x0800edd9
 800b928:	0800edd0 	.word	0x0800edd0
 800b92c:	0800edad 	.word	0x0800edad
 800b930:	3ff80000 	.word	0x3ff80000
 800b934:	0800eee8 	.word	0x0800eee8
 800b938:	0800ee4f 	.word	0x0800ee4f
 800b93c:	2401      	movs	r4, #1
 800b93e:	2300      	movs	r3, #0
 800b940:	940b      	str	r4, [sp, #44]	; 0x2c
 800b942:	9322      	str	r3, [sp, #136]	; 0x88
 800b944:	f04f 39ff 	mov.w	r9, #4294967295
 800b948:	2200      	movs	r2, #0
 800b94a:	2312      	movs	r3, #18
 800b94c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b950:	9223      	str	r2, [sp, #140]	; 0x8c
 800b952:	e7b0      	b.n	800b8b6 <_dtoa_r+0x266>
 800b954:	2301      	movs	r3, #1
 800b956:	930b      	str	r3, [sp, #44]	; 0x2c
 800b958:	e7f4      	b.n	800b944 <_dtoa_r+0x2f4>
 800b95a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b95e:	464b      	mov	r3, r9
 800b960:	f8cd 9020 	str.w	r9, [sp, #32]
 800b964:	e7a7      	b.n	800b8b6 <_dtoa_r+0x266>
 800b966:	3101      	adds	r1, #1
 800b968:	6041      	str	r1, [r0, #4]
 800b96a:	0052      	lsls	r2, r2, #1
 800b96c:	e7a7      	b.n	800b8be <_dtoa_r+0x26e>
 800b96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b970:	9a03      	ldr	r2, [sp, #12]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	9b08      	ldr	r3, [sp, #32]
 800b976:	2b0e      	cmp	r3, #14
 800b978:	f200 80a8 	bhi.w	800bacc <_dtoa_r+0x47c>
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	f000 80a5 	beq.w	800bacc <_dtoa_r+0x47c>
 800b982:	f1ba 0f00 	cmp.w	sl, #0
 800b986:	dd34      	ble.n	800b9f2 <_dtoa_r+0x3a2>
 800b988:	4a9a      	ldr	r2, [pc, #616]	; (800bbf4 <_dtoa_r+0x5a4>)
 800b98a:	f00a 030f 	and.w	r3, sl, #15
 800b98e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b992:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b99a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b99e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b9a2:	d016      	beq.n	800b9d2 <_dtoa_r+0x382>
 800b9a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9a8:	4b93      	ldr	r3, [pc, #588]	; (800bbf8 <_dtoa_r+0x5a8>)
 800b9aa:	2703      	movs	r7, #3
 800b9ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9b0:	f7f4 febc 	bl	800072c <__aeabi_ddiv>
 800b9b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9b8:	f004 040f 	and.w	r4, r4, #15
 800b9bc:	4e8e      	ldr	r6, [pc, #568]	; (800bbf8 <_dtoa_r+0x5a8>)
 800b9be:	b954      	cbnz	r4, 800b9d6 <_dtoa_r+0x386>
 800b9c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9c8:	f7f4 feb0 	bl	800072c <__aeabi_ddiv>
 800b9cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9d0:	e029      	b.n	800ba26 <_dtoa_r+0x3d6>
 800b9d2:	2702      	movs	r7, #2
 800b9d4:	e7f2      	b.n	800b9bc <_dtoa_r+0x36c>
 800b9d6:	07e1      	lsls	r1, r4, #31
 800b9d8:	d508      	bpl.n	800b9ec <_dtoa_r+0x39c>
 800b9da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9e2:	f7f4 fd79 	bl	80004d8 <__aeabi_dmul>
 800b9e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9ea:	3701      	adds	r7, #1
 800b9ec:	1064      	asrs	r4, r4, #1
 800b9ee:	3608      	adds	r6, #8
 800b9f0:	e7e5      	b.n	800b9be <_dtoa_r+0x36e>
 800b9f2:	f000 80a5 	beq.w	800bb40 <_dtoa_r+0x4f0>
 800b9f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9fa:	f1ca 0400 	rsb	r4, sl, #0
 800b9fe:	4b7d      	ldr	r3, [pc, #500]	; (800bbf4 <_dtoa_r+0x5a4>)
 800ba00:	f004 020f 	and.w	r2, r4, #15
 800ba04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	f7f4 fd64 	bl	80004d8 <__aeabi_dmul>
 800ba10:	2702      	movs	r7, #2
 800ba12:	2300      	movs	r3, #0
 800ba14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba18:	4e77      	ldr	r6, [pc, #476]	; (800bbf8 <_dtoa_r+0x5a8>)
 800ba1a:	1124      	asrs	r4, r4, #4
 800ba1c:	2c00      	cmp	r4, #0
 800ba1e:	f040 8084 	bne.w	800bb2a <_dtoa_r+0x4da>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1d2      	bne.n	800b9cc <_dtoa_r+0x37c>
 800ba26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 808b 	beq.w	800bb44 <_dtoa_r+0x4f4>
 800ba2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ba32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ba36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	4b6f      	ldr	r3, [pc, #444]	; (800bbfc <_dtoa_r+0x5ac>)
 800ba3e:	f7f4 ffbd 	bl	80009bc <__aeabi_dcmplt>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d07e      	beq.n	800bb44 <_dtoa_r+0x4f4>
 800ba46:	9b08      	ldr	r3, [sp, #32]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d07b      	beq.n	800bb44 <_dtoa_r+0x4f4>
 800ba4c:	f1b9 0f00 	cmp.w	r9, #0
 800ba50:	dd38      	ble.n	800bac4 <_dtoa_r+0x474>
 800ba52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba56:	2200      	movs	r2, #0
 800ba58:	4b69      	ldr	r3, [pc, #420]	; (800bc00 <_dtoa_r+0x5b0>)
 800ba5a:	f7f4 fd3d 	bl	80004d8 <__aeabi_dmul>
 800ba5e:	464c      	mov	r4, r9
 800ba60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba64:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ba68:	3701      	adds	r7, #1
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	f7f4 fcca 	bl	8000404 <__aeabi_i2d>
 800ba70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba74:	f7f4 fd30 	bl	80004d8 <__aeabi_dmul>
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4b62      	ldr	r3, [pc, #392]	; (800bc04 <_dtoa_r+0x5b4>)
 800ba7c:	f7f4 fb76 	bl	800016c <__adddf3>
 800ba80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba88:	9611      	str	r6, [sp, #68]	; 0x44
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	d15d      	bne.n	800bb4a <_dtoa_r+0x4fa>
 800ba8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba92:	2200      	movs	r2, #0
 800ba94:	4b5c      	ldr	r3, [pc, #368]	; (800bc08 <_dtoa_r+0x5b8>)
 800ba96:	f7f4 fb67 	bl	8000168 <__aeabi_dsub>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800baa2:	4633      	mov	r3, r6
 800baa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baa6:	f7f4 ffa7 	bl	80009f8 <__aeabi_dcmpgt>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f040 829c 	bne.w	800bfe8 <_dtoa_r+0x998>
 800bab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bab6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800baba:	f7f4 ff7f 	bl	80009bc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f040 8290 	bne.w	800bfe4 <_dtoa_r+0x994>
 800bac4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bac8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f2c0 8152 	blt.w	800bd78 <_dtoa_r+0x728>
 800bad4:	f1ba 0f0e 	cmp.w	sl, #14
 800bad8:	f300 814e 	bgt.w	800bd78 <_dtoa_r+0x728>
 800badc:	4b45      	ldr	r3, [pc, #276]	; (800bbf4 <_dtoa_r+0x5a4>)
 800bade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bae6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800baea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800baec:	2b00      	cmp	r3, #0
 800baee:	f280 80db 	bge.w	800bca8 <_dtoa_r+0x658>
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f300 80d7 	bgt.w	800bca8 <_dtoa_r+0x658>
 800bafa:	f040 8272 	bne.w	800bfe2 <_dtoa_r+0x992>
 800bafe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb02:	2200      	movs	r2, #0
 800bb04:	4b40      	ldr	r3, [pc, #256]	; (800bc08 <_dtoa_r+0x5b8>)
 800bb06:	f7f4 fce7 	bl	80004d8 <__aeabi_dmul>
 800bb0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb0e:	f7f4 ff69 	bl	80009e4 <__aeabi_dcmpge>
 800bb12:	9c08      	ldr	r4, [sp, #32]
 800bb14:	4626      	mov	r6, r4
 800bb16:	2800      	cmp	r0, #0
 800bb18:	f040 8248 	bne.w	800bfac <_dtoa_r+0x95c>
 800bb1c:	2331      	movs	r3, #49	; 0x31
 800bb1e:	9f03      	ldr	r7, [sp, #12]
 800bb20:	f10a 0a01 	add.w	sl, sl, #1
 800bb24:	f807 3b01 	strb.w	r3, [r7], #1
 800bb28:	e244      	b.n	800bfb4 <_dtoa_r+0x964>
 800bb2a:	07e2      	lsls	r2, r4, #31
 800bb2c:	d505      	bpl.n	800bb3a <_dtoa_r+0x4ea>
 800bb2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	2301      	movs	r3, #1
 800bb38:	3701      	adds	r7, #1
 800bb3a:	1064      	asrs	r4, r4, #1
 800bb3c:	3608      	adds	r6, #8
 800bb3e:	e76d      	b.n	800ba1c <_dtoa_r+0x3cc>
 800bb40:	2702      	movs	r7, #2
 800bb42:	e770      	b.n	800ba26 <_dtoa_r+0x3d6>
 800bb44:	46d0      	mov	r8, sl
 800bb46:	9c08      	ldr	r4, [sp, #32]
 800bb48:	e78f      	b.n	800ba6a <_dtoa_r+0x41a>
 800bb4a:	9903      	ldr	r1, [sp, #12]
 800bb4c:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <_dtoa_r+0x5a4>)
 800bb4e:	4421      	add	r1, r4
 800bb50:	9112      	str	r1, [sp, #72]	; 0x48
 800bb52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bb5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb60:	2900      	cmp	r1, #0
 800bb62:	d055      	beq.n	800bc10 <_dtoa_r+0x5c0>
 800bb64:	2000      	movs	r0, #0
 800bb66:	4929      	ldr	r1, [pc, #164]	; (800bc0c <_dtoa_r+0x5bc>)
 800bb68:	f7f4 fde0 	bl	800072c <__aeabi_ddiv>
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	4632      	mov	r2, r6
 800bb70:	f7f4 fafa 	bl	8000168 <__aeabi_dsub>
 800bb74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb78:	9f03      	ldr	r7, [sp, #12]
 800bb7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb7e:	f7f4 ff5b 	bl	8000a38 <__aeabi_d2iz>
 800bb82:	4604      	mov	r4, r0
 800bb84:	f7f4 fc3e 	bl	8000404 <__aeabi_i2d>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb90:	f7f4 faea 	bl	8000168 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	3430      	adds	r4, #48	; 0x30
 800bb9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bba2:	f807 4b01 	strb.w	r4, [r7], #1
 800bba6:	f7f4 ff09 	bl	80009bc <__aeabi_dcmplt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d174      	bne.n	800bc98 <_dtoa_r+0x648>
 800bbae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	4911      	ldr	r1, [pc, #68]	; (800bbfc <_dtoa_r+0x5ac>)
 800bbb6:	f7f4 fad7 	bl	8000168 <__aeabi_dsub>
 800bbba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbbe:	f7f4 fefd 	bl	80009bc <__aeabi_dcmplt>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f040 80b7 	bne.w	800bd36 <_dtoa_r+0x6e6>
 800bbc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbca:	429f      	cmp	r7, r3
 800bbcc:	f43f af7a 	beq.w	800bac4 <_dtoa_r+0x474>
 800bbd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <_dtoa_r+0x5b0>)
 800bbd8:	f7f4 fc7e 	bl	80004d8 <__aeabi_dmul>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe6:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <_dtoa_r+0x5b0>)
 800bbe8:	f7f4 fc76 	bl	80004d8 <__aeabi_dmul>
 800bbec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbf0:	e7c3      	b.n	800bb7a <_dtoa_r+0x52a>
 800bbf2:	bf00      	nop
 800bbf4:	0800eee8 	.word	0x0800eee8
 800bbf8:	0800eec0 	.word	0x0800eec0
 800bbfc:	3ff00000 	.word	0x3ff00000
 800bc00:	40240000 	.word	0x40240000
 800bc04:	401c0000 	.word	0x401c0000
 800bc08:	40140000 	.word	0x40140000
 800bc0c:	3fe00000 	.word	0x3fe00000
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 fc60 	bl	80004d8 <__aeabi_dmul>
 800bc18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc1e:	9c03      	ldr	r4, [sp, #12]
 800bc20:	9314      	str	r3, [sp, #80]	; 0x50
 800bc22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc26:	f7f4 ff07 	bl	8000a38 <__aeabi_d2iz>
 800bc2a:	9015      	str	r0, [sp, #84]	; 0x54
 800bc2c:	f7f4 fbea 	bl	8000404 <__aeabi_i2d>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc38:	f7f4 fa96 	bl	8000168 <__aeabi_dsub>
 800bc3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc3e:	4606      	mov	r6, r0
 800bc40:	3330      	adds	r3, #48	; 0x30
 800bc42:	f804 3b01 	strb.w	r3, [r4], #1
 800bc46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc48:	460f      	mov	r7, r1
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	f04f 0200 	mov.w	r2, #0
 800bc50:	d124      	bne.n	800bc9c <_dtoa_r+0x64c>
 800bc52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc56:	4bb0      	ldr	r3, [pc, #704]	; (800bf18 <_dtoa_r+0x8c8>)
 800bc58:	f7f4 fa88 	bl	800016c <__adddf3>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 fec8 	bl	80009f8 <__aeabi_dcmpgt>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d163      	bne.n	800bd34 <_dtoa_r+0x6e4>
 800bc6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc70:	2000      	movs	r0, #0
 800bc72:	49a9      	ldr	r1, [pc, #676]	; (800bf18 <_dtoa_r+0x8c8>)
 800bc74:	f7f4 fa78 	bl	8000168 <__aeabi_dsub>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	4639      	mov	r1, r7
 800bc80:	f7f4 fe9c 	bl	80009bc <__aeabi_dcmplt>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	f43f af1d 	beq.w	800bac4 <_dtoa_r+0x474>
 800bc8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bc8c:	1e7b      	subs	r3, r7, #1
 800bc8e:	9314      	str	r3, [sp, #80]	; 0x50
 800bc90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bc94:	2b30      	cmp	r3, #48	; 0x30
 800bc96:	d0f8      	beq.n	800bc8a <_dtoa_r+0x63a>
 800bc98:	46c2      	mov	sl, r8
 800bc9a:	e03b      	b.n	800bd14 <_dtoa_r+0x6c4>
 800bc9c:	4b9f      	ldr	r3, [pc, #636]	; (800bf1c <_dtoa_r+0x8cc>)
 800bc9e:	f7f4 fc1b 	bl	80004d8 <__aeabi_dmul>
 800bca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bca6:	e7bc      	b.n	800bc22 <_dtoa_r+0x5d2>
 800bca8:	9f03      	ldr	r7, [sp, #12]
 800bcaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bcae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	f7f4 fd39 	bl	800072c <__aeabi_ddiv>
 800bcba:	f7f4 febd 	bl	8000a38 <__aeabi_d2iz>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	f7f4 fba0 	bl	8000404 <__aeabi_i2d>
 800bcc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcc8:	f7f4 fc06 	bl	80004d8 <__aeabi_dmul>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 fa48 	bl	8000168 <__aeabi_dsub>
 800bcd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bcdc:	f807 6b01 	strb.w	r6, [r7], #1
 800bce0:	9e03      	ldr	r6, [sp, #12]
 800bce2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bce6:	1bbe      	subs	r6, r7, r6
 800bce8:	45b4      	cmp	ip, r6
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	d136      	bne.n	800bd5e <_dtoa_r+0x70e>
 800bcf0:	f7f4 fa3c 	bl	800016c <__adddf3>
 800bcf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	4689      	mov	r9, r1
 800bcfc:	f7f4 fe7c 	bl	80009f8 <__aeabi_dcmpgt>
 800bd00:	bb58      	cbnz	r0, 800bd5a <_dtoa_r+0x70a>
 800bd02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	f7f4 fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 800bd0e:	b108      	cbz	r0, 800bd14 <_dtoa_r+0x6c4>
 800bd10:	07e1      	lsls	r1, r4, #31
 800bd12:	d422      	bmi.n	800bd5a <_dtoa_r+0x70a>
 800bd14:	4628      	mov	r0, r5
 800bd16:	4659      	mov	r1, fp
 800bd18:	f000 faf0 	bl	800c2fc <_Bfree>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	703b      	strb	r3, [r7, #0]
 800bd20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd22:	f10a 0001 	add.w	r0, sl, #1
 800bd26:	6018      	str	r0, [r3, #0]
 800bd28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f43f acde 	beq.w	800b6ec <_dtoa_r+0x9c>
 800bd30:	601f      	str	r7, [r3, #0]
 800bd32:	e4db      	b.n	800b6ec <_dtoa_r+0x9c>
 800bd34:	4627      	mov	r7, r4
 800bd36:	463b      	mov	r3, r7
 800bd38:	461f      	mov	r7, r3
 800bd3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd3e:	2a39      	cmp	r2, #57	; 0x39
 800bd40:	d107      	bne.n	800bd52 <_dtoa_r+0x702>
 800bd42:	9a03      	ldr	r2, [sp, #12]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d1f7      	bne.n	800bd38 <_dtoa_r+0x6e8>
 800bd48:	2230      	movs	r2, #48	; 0x30
 800bd4a:	9903      	ldr	r1, [sp, #12]
 800bd4c:	f108 0801 	add.w	r8, r8, #1
 800bd50:	700a      	strb	r2, [r1, #0]
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	3201      	adds	r2, #1
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	e79e      	b.n	800bc98 <_dtoa_r+0x648>
 800bd5a:	46d0      	mov	r8, sl
 800bd5c:	e7eb      	b.n	800bd36 <_dtoa_r+0x6e6>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	4b6e      	ldr	r3, [pc, #440]	; (800bf1c <_dtoa_r+0x8cc>)
 800bd62:	f7f4 fbb9 	bl	80004d8 <__aeabi_dmul>
 800bd66:	2200      	movs	r2, #0
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	4689      	mov	r9, r1
 800bd6e:	f7f4 fe1b 	bl	80009a8 <__aeabi_dcmpeq>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d09b      	beq.n	800bcae <_dtoa_r+0x65e>
 800bd76:	e7cd      	b.n	800bd14 <_dtoa_r+0x6c4>
 800bd78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd7a:	2a00      	cmp	r2, #0
 800bd7c:	f000 80d0 	beq.w	800bf20 <_dtoa_r+0x8d0>
 800bd80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd82:	2a01      	cmp	r2, #1
 800bd84:	f300 80ae 	bgt.w	800bee4 <_dtoa_r+0x894>
 800bd88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd8a:	2a00      	cmp	r2, #0
 800bd8c:	f000 80a6 	beq.w	800bedc <_dtoa_r+0x88c>
 800bd90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd96:	9f06      	ldr	r7, [sp, #24]
 800bd98:	9a06      	ldr	r2, [sp, #24]
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	441a      	add	r2, r3
 800bd9e:	9206      	str	r2, [sp, #24]
 800bda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda2:	4628      	mov	r0, r5
 800bda4:	441a      	add	r2, r3
 800bda6:	9209      	str	r2, [sp, #36]	; 0x24
 800bda8:	f000 fb5e 	bl	800c468 <__i2b>
 800bdac:	4606      	mov	r6, r0
 800bdae:	2f00      	cmp	r7, #0
 800bdb0:	dd0c      	ble.n	800bdcc <_dtoa_r+0x77c>
 800bdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dd09      	ble.n	800bdcc <_dtoa_r+0x77c>
 800bdb8:	42bb      	cmp	r3, r7
 800bdba:	bfa8      	it	ge
 800bdbc:	463b      	movge	r3, r7
 800bdbe:	9a06      	ldr	r2, [sp, #24]
 800bdc0:	1aff      	subs	r7, r7, r3
 800bdc2:	1ad2      	subs	r2, r2, r3
 800bdc4:	9206      	str	r2, [sp, #24]
 800bdc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	9309      	str	r3, [sp, #36]	; 0x24
 800bdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdce:	b1f3      	cbz	r3, 800be0e <_dtoa_r+0x7be>
 800bdd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 80a8 	beq.w	800bf28 <_dtoa_r+0x8d8>
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	dd10      	ble.n	800bdfe <_dtoa_r+0x7ae>
 800bddc:	4631      	mov	r1, r6
 800bdde:	4622      	mov	r2, r4
 800bde0:	4628      	mov	r0, r5
 800bde2:	f000 fbff 	bl	800c5e4 <__pow5mult>
 800bde6:	465a      	mov	r2, fp
 800bde8:	4601      	mov	r1, r0
 800bdea:	4606      	mov	r6, r0
 800bdec:	4628      	mov	r0, r5
 800bdee:	f000 fb51 	bl	800c494 <__multiply>
 800bdf2:	4680      	mov	r8, r0
 800bdf4:	4659      	mov	r1, fp
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 fa80 	bl	800c2fc <_Bfree>
 800bdfc:	46c3      	mov	fp, r8
 800bdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be00:	1b1a      	subs	r2, r3, r4
 800be02:	d004      	beq.n	800be0e <_dtoa_r+0x7be>
 800be04:	4659      	mov	r1, fp
 800be06:	4628      	mov	r0, r5
 800be08:	f000 fbec 	bl	800c5e4 <__pow5mult>
 800be0c:	4683      	mov	fp, r0
 800be0e:	2101      	movs	r1, #1
 800be10:	4628      	mov	r0, r5
 800be12:	f000 fb29 	bl	800c468 <__i2b>
 800be16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be18:	4604      	mov	r4, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f340 8086 	ble.w	800bf2c <_dtoa_r+0x8dc>
 800be20:	461a      	mov	r2, r3
 800be22:	4601      	mov	r1, r0
 800be24:	4628      	mov	r0, r5
 800be26:	f000 fbdd 	bl	800c5e4 <__pow5mult>
 800be2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be2c:	4604      	mov	r4, r0
 800be2e:	2b01      	cmp	r3, #1
 800be30:	dd7f      	ble.n	800bf32 <_dtoa_r+0x8e2>
 800be32:	f04f 0800 	mov.w	r8, #0
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be3c:	6918      	ldr	r0, [r3, #16]
 800be3e:	f000 fac5 	bl	800c3cc <__hi0bits>
 800be42:	f1c0 0020 	rsb	r0, r0, #32
 800be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be48:	4418      	add	r0, r3
 800be4a:	f010 001f 	ands.w	r0, r0, #31
 800be4e:	f000 8092 	beq.w	800bf76 <_dtoa_r+0x926>
 800be52:	f1c0 0320 	rsb	r3, r0, #32
 800be56:	2b04      	cmp	r3, #4
 800be58:	f340 808a 	ble.w	800bf70 <_dtoa_r+0x920>
 800be5c:	f1c0 001c 	rsb	r0, r0, #28
 800be60:	9b06      	ldr	r3, [sp, #24]
 800be62:	4407      	add	r7, r0
 800be64:	4403      	add	r3, r0
 800be66:	9306      	str	r3, [sp, #24]
 800be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6a:	4403      	add	r3, r0
 800be6c:	9309      	str	r3, [sp, #36]	; 0x24
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	dd05      	ble.n	800be80 <_dtoa_r+0x830>
 800be74:	4659      	mov	r1, fp
 800be76:	461a      	mov	r2, r3
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 fc0d 	bl	800c698 <__lshift>
 800be7e:	4683      	mov	fp, r0
 800be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd05      	ble.n	800be92 <_dtoa_r+0x842>
 800be86:	4621      	mov	r1, r4
 800be88:	461a      	mov	r2, r3
 800be8a:	4628      	mov	r0, r5
 800be8c:	f000 fc04 	bl	800c698 <__lshift>
 800be90:	4604      	mov	r4, r0
 800be92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d070      	beq.n	800bf7a <_dtoa_r+0x92a>
 800be98:	4621      	mov	r1, r4
 800be9a:	4658      	mov	r0, fp
 800be9c:	f000 fc6c 	bl	800c778 <__mcmp>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	da6a      	bge.n	800bf7a <_dtoa_r+0x92a>
 800bea4:	2300      	movs	r3, #0
 800bea6:	4659      	mov	r1, fp
 800bea8:	220a      	movs	r2, #10
 800beaa:	4628      	mov	r0, r5
 800beac:	f000 fa48 	bl	800c340 <__multadd>
 800beb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb2:	4683      	mov	fp, r0
 800beb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 8194 	beq.w	800c1e6 <_dtoa_r+0xb96>
 800bebe:	4631      	mov	r1, r6
 800bec0:	2300      	movs	r3, #0
 800bec2:	220a      	movs	r2, #10
 800bec4:	4628      	mov	r0, r5
 800bec6:	f000 fa3b 	bl	800c340 <__multadd>
 800beca:	f1b9 0f00 	cmp.w	r9, #0
 800bece:	4606      	mov	r6, r0
 800bed0:	f300 8093 	bgt.w	800bffa <_dtoa_r+0x9aa>
 800bed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	dc57      	bgt.n	800bf8a <_dtoa_r+0x93a>
 800beda:	e08e      	b.n	800bffa <_dtoa_r+0x9aa>
 800bedc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bee2:	e757      	b.n	800bd94 <_dtoa_r+0x744>
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	1e5c      	subs	r4, r3, #1
 800bee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beea:	42a3      	cmp	r3, r4
 800beec:	bfb7      	itett	lt
 800beee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bef0:	1b1c      	subge	r4, r3, r4
 800bef2:	1ae2      	sublt	r2, r4, r3
 800bef4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bef6:	bfbe      	ittt	lt
 800bef8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800befa:	189b      	addlt	r3, r3, r2
 800befc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800befe:	9b08      	ldr	r3, [sp, #32]
 800bf00:	bfb8      	it	lt
 800bf02:	2400      	movlt	r4, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfbb      	ittet	lt
 800bf08:	9b06      	ldrlt	r3, [sp, #24]
 800bf0a:	9a08      	ldrlt	r2, [sp, #32]
 800bf0c:	9f06      	ldrge	r7, [sp, #24]
 800bf0e:	1a9f      	sublt	r7, r3, r2
 800bf10:	bfac      	ite	ge
 800bf12:	9b08      	ldrge	r3, [sp, #32]
 800bf14:	2300      	movlt	r3, #0
 800bf16:	e73f      	b.n	800bd98 <_dtoa_r+0x748>
 800bf18:	3fe00000 	.word	0x3fe00000
 800bf1c:	40240000 	.word	0x40240000
 800bf20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf22:	9f06      	ldr	r7, [sp, #24]
 800bf24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf26:	e742      	b.n	800bdae <_dtoa_r+0x75e>
 800bf28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf2a:	e76b      	b.n	800be04 <_dtoa_r+0x7b4>
 800bf2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	dc19      	bgt.n	800bf66 <_dtoa_r+0x916>
 800bf32:	9b04      	ldr	r3, [sp, #16]
 800bf34:	b9bb      	cbnz	r3, 800bf66 <_dtoa_r+0x916>
 800bf36:	9b05      	ldr	r3, [sp, #20]
 800bf38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf3c:	b99b      	cbnz	r3, 800bf66 <_dtoa_r+0x916>
 800bf3e:	9b05      	ldr	r3, [sp, #20]
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf44:	0d1b      	lsrs	r3, r3, #20
 800bf46:	051b      	lsls	r3, r3, #20
 800bf48:	b183      	cbz	r3, 800bf6c <_dtoa_r+0x91c>
 800bf4a:	f04f 0801 	mov.w	r8, #1
 800bf4e:	9b06      	ldr	r3, [sp, #24]
 800bf50:	3301      	adds	r3, #1
 800bf52:	9306      	str	r3, [sp, #24]
 800bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf56:	3301      	adds	r3, #1
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f47f af6a 	bne.w	800be36 <_dtoa_r+0x7e6>
 800bf62:	2001      	movs	r0, #1
 800bf64:	e76f      	b.n	800be46 <_dtoa_r+0x7f6>
 800bf66:	f04f 0800 	mov.w	r8, #0
 800bf6a:	e7f6      	b.n	800bf5a <_dtoa_r+0x90a>
 800bf6c:	4698      	mov	r8, r3
 800bf6e:	e7f4      	b.n	800bf5a <_dtoa_r+0x90a>
 800bf70:	f43f af7d 	beq.w	800be6e <_dtoa_r+0x81e>
 800bf74:	4618      	mov	r0, r3
 800bf76:	301c      	adds	r0, #28
 800bf78:	e772      	b.n	800be60 <_dtoa_r+0x810>
 800bf7a:	9b08      	ldr	r3, [sp, #32]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dc36      	bgt.n	800bfee <_dtoa_r+0x99e>
 800bf80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	dd33      	ble.n	800bfee <_dtoa_r+0x99e>
 800bf86:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf8a:	f1b9 0f00 	cmp.w	r9, #0
 800bf8e:	d10d      	bne.n	800bfac <_dtoa_r+0x95c>
 800bf90:	4621      	mov	r1, r4
 800bf92:	464b      	mov	r3, r9
 800bf94:	2205      	movs	r2, #5
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 f9d2 	bl	800c340 <__multadd>
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4658      	mov	r0, fp
 800bfa2:	f000 fbe9 	bl	800c778 <__mcmp>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f73f adb8 	bgt.w	800bb1c <_dtoa_r+0x4cc>
 800bfac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfae:	9f03      	ldr	r7, [sp, #12]
 800bfb0:	ea6f 0a03 	mvn.w	sl, r3
 800bfb4:	f04f 0800 	mov.w	r8, #0
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f99e 	bl	800c2fc <_Bfree>
 800bfc0:	2e00      	cmp	r6, #0
 800bfc2:	f43f aea7 	beq.w	800bd14 <_dtoa_r+0x6c4>
 800bfc6:	f1b8 0f00 	cmp.w	r8, #0
 800bfca:	d005      	beq.n	800bfd8 <_dtoa_r+0x988>
 800bfcc:	45b0      	cmp	r8, r6
 800bfce:	d003      	beq.n	800bfd8 <_dtoa_r+0x988>
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f000 f992 	bl	800c2fc <_Bfree>
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 f98e 	bl	800c2fc <_Bfree>
 800bfe0:	e698      	b.n	800bd14 <_dtoa_r+0x6c4>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4626      	mov	r6, r4
 800bfe6:	e7e1      	b.n	800bfac <_dtoa_r+0x95c>
 800bfe8:	46c2      	mov	sl, r8
 800bfea:	4626      	mov	r6, r4
 800bfec:	e596      	b.n	800bb1c <_dtoa_r+0x4cc>
 800bfee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80fd 	beq.w	800c1f4 <_dtoa_r+0xba4>
 800bffa:	2f00      	cmp	r7, #0
 800bffc:	dd05      	ble.n	800c00a <_dtoa_r+0x9ba>
 800bffe:	4631      	mov	r1, r6
 800c000:	463a      	mov	r2, r7
 800c002:	4628      	mov	r0, r5
 800c004:	f000 fb48 	bl	800c698 <__lshift>
 800c008:	4606      	mov	r6, r0
 800c00a:	f1b8 0f00 	cmp.w	r8, #0
 800c00e:	d05c      	beq.n	800c0ca <_dtoa_r+0xa7a>
 800c010:	4628      	mov	r0, r5
 800c012:	6871      	ldr	r1, [r6, #4]
 800c014:	f000 f932 	bl	800c27c <_Balloc>
 800c018:	4607      	mov	r7, r0
 800c01a:	b928      	cbnz	r0, 800c028 <_dtoa_r+0x9d8>
 800c01c:	4602      	mov	r2, r0
 800c01e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c022:	4b7f      	ldr	r3, [pc, #508]	; (800c220 <_dtoa_r+0xbd0>)
 800c024:	f7ff bb28 	b.w	800b678 <_dtoa_r+0x28>
 800c028:	6932      	ldr	r2, [r6, #16]
 800c02a:	f106 010c 	add.w	r1, r6, #12
 800c02e:	3202      	adds	r2, #2
 800c030:	0092      	lsls	r2, r2, #2
 800c032:	300c      	adds	r0, #12
 800c034:	f000 f914 	bl	800c260 <memcpy>
 800c038:	2201      	movs	r2, #1
 800c03a:	4639      	mov	r1, r7
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 fb2b 	bl	800c698 <__lshift>
 800c042:	46b0      	mov	r8, r6
 800c044:	4606      	mov	r6, r0
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	3301      	adds	r3, #1
 800c04a:	9308      	str	r3, [sp, #32]
 800c04c:	9b03      	ldr	r3, [sp, #12]
 800c04e:	444b      	add	r3, r9
 800c050:	930a      	str	r3, [sp, #40]	; 0x28
 800c052:	9b04      	ldr	r3, [sp, #16]
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	9309      	str	r3, [sp, #36]	; 0x24
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	4621      	mov	r1, r4
 800c05e:	3b01      	subs	r3, #1
 800c060:	4658      	mov	r0, fp
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	f7ff fa68 	bl	800b538 <quorem>
 800c068:	4603      	mov	r3, r0
 800c06a:	4641      	mov	r1, r8
 800c06c:	3330      	adds	r3, #48	; 0x30
 800c06e:	9006      	str	r0, [sp, #24]
 800c070:	4658      	mov	r0, fp
 800c072:	930b      	str	r3, [sp, #44]	; 0x2c
 800c074:	f000 fb80 	bl	800c778 <__mcmp>
 800c078:	4632      	mov	r2, r6
 800c07a:	4681      	mov	r9, r0
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 fb96 	bl	800c7b0 <__mdiff>
 800c084:	68c2      	ldr	r2, [r0, #12]
 800c086:	4607      	mov	r7, r0
 800c088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08a:	bb02      	cbnz	r2, 800c0ce <_dtoa_r+0xa7e>
 800c08c:	4601      	mov	r1, r0
 800c08e:	4658      	mov	r0, fp
 800c090:	f000 fb72 	bl	800c778 <__mcmp>
 800c094:	4602      	mov	r2, r0
 800c096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c098:	4639      	mov	r1, r7
 800c09a:	4628      	mov	r0, r5
 800c09c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c0a0:	f000 f92c 	bl	800c2fc <_Bfree>
 800c0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0a8:	9f08      	ldr	r7, [sp, #32]
 800c0aa:	ea43 0102 	orr.w	r1, r3, r2
 800c0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b4:	d10d      	bne.n	800c0d2 <_dtoa_r+0xa82>
 800c0b6:	2b39      	cmp	r3, #57	; 0x39
 800c0b8:	d029      	beq.n	800c10e <_dtoa_r+0xabe>
 800c0ba:	f1b9 0f00 	cmp.w	r9, #0
 800c0be:	dd01      	ble.n	800c0c4 <_dtoa_r+0xa74>
 800c0c0:	9b06      	ldr	r3, [sp, #24]
 800c0c2:	3331      	adds	r3, #49	; 0x31
 800c0c4:	9a04      	ldr	r2, [sp, #16]
 800c0c6:	7013      	strb	r3, [r2, #0]
 800c0c8:	e776      	b.n	800bfb8 <_dtoa_r+0x968>
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	e7b9      	b.n	800c042 <_dtoa_r+0x9f2>
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	e7e2      	b.n	800c098 <_dtoa_r+0xa48>
 800c0d2:	f1b9 0f00 	cmp.w	r9, #0
 800c0d6:	db06      	blt.n	800c0e6 <_dtoa_r+0xa96>
 800c0d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c0da:	ea41 0909 	orr.w	r9, r1, r9
 800c0de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0e0:	ea59 0101 	orrs.w	r1, r9, r1
 800c0e4:	d120      	bne.n	800c128 <_dtoa_r+0xad8>
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	ddec      	ble.n	800c0c4 <_dtoa_r+0xa74>
 800c0ea:	4659      	mov	r1, fp
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	9308      	str	r3, [sp, #32]
 800c0f2:	f000 fad1 	bl	800c698 <__lshift>
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4683      	mov	fp, r0
 800c0fa:	f000 fb3d 	bl	800c778 <__mcmp>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	9b08      	ldr	r3, [sp, #32]
 800c102:	dc02      	bgt.n	800c10a <_dtoa_r+0xaba>
 800c104:	d1de      	bne.n	800c0c4 <_dtoa_r+0xa74>
 800c106:	07da      	lsls	r2, r3, #31
 800c108:	d5dc      	bpl.n	800c0c4 <_dtoa_r+0xa74>
 800c10a:	2b39      	cmp	r3, #57	; 0x39
 800c10c:	d1d8      	bne.n	800c0c0 <_dtoa_r+0xa70>
 800c10e:	2339      	movs	r3, #57	; 0x39
 800c110:	9a04      	ldr	r2, [sp, #16]
 800c112:	7013      	strb	r3, [r2, #0]
 800c114:	463b      	mov	r3, r7
 800c116:	461f      	mov	r7, r3
 800c118:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	2a39      	cmp	r2, #57	; 0x39
 800c120:	d050      	beq.n	800c1c4 <_dtoa_r+0xb74>
 800c122:	3201      	adds	r2, #1
 800c124:	701a      	strb	r2, [r3, #0]
 800c126:	e747      	b.n	800bfb8 <_dtoa_r+0x968>
 800c128:	2a00      	cmp	r2, #0
 800c12a:	dd03      	ble.n	800c134 <_dtoa_r+0xae4>
 800c12c:	2b39      	cmp	r3, #57	; 0x39
 800c12e:	d0ee      	beq.n	800c10e <_dtoa_r+0xabe>
 800c130:	3301      	adds	r3, #1
 800c132:	e7c7      	b.n	800c0c4 <_dtoa_r+0xa74>
 800c134:	9a08      	ldr	r2, [sp, #32]
 800c136:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c138:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c13c:	428a      	cmp	r2, r1
 800c13e:	d02a      	beq.n	800c196 <_dtoa_r+0xb46>
 800c140:	4659      	mov	r1, fp
 800c142:	2300      	movs	r3, #0
 800c144:	220a      	movs	r2, #10
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f8fa 	bl	800c340 <__multadd>
 800c14c:	45b0      	cmp	r8, r6
 800c14e:	4683      	mov	fp, r0
 800c150:	f04f 0300 	mov.w	r3, #0
 800c154:	f04f 020a 	mov.w	r2, #10
 800c158:	4641      	mov	r1, r8
 800c15a:	4628      	mov	r0, r5
 800c15c:	d107      	bne.n	800c16e <_dtoa_r+0xb1e>
 800c15e:	f000 f8ef 	bl	800c340 <__multadd>
 800c162:	4680      	mov	r8, r0
 800c164:	4606      	mov	r6, r0
 800c166:	9b08      	ldr	r3, [sp, #32]
 800c168:	3301      	adds	r3, #1
 800c16a:	9308      	str	r3, [sp, #32]
 800c16c:	e775      	b.n	800c05a <_dtoa_r+0xa0a>
 800c16e:	f000 f8e7 	bl	800c340 <__multadd>
 800c172:	4631      	mov	r1, r6
 800c174:	4680      	mov	r8, r0
 800c176:	2300      	movs	r3, #0
 800c178:	220a      	movs	r2, #10
 800c17a:	4628      	mov	r0, r5
 800c17c:	f000 f8e0 	bl	800c340 <__multadd>
 800c180:	4606      	mov	r6, r0
 800c182:	e7f0      	b.n	800c166 <_dtoa_r+0xb16>
 800c184:	f1b9 0f00 	cmp.w	r9, #0
 800c188:	bfcc      	ite	gt
 800c18a:	464f      	movgt	r7, r9
 800c18c:	2701      	movle	r7, #1
 800c18e:	f04f 0800 	mov.w	r8, #0
 800c192:	9a03      	ldr	r2, [sp, #12]
 800c194:	4417      	add	r7, r2
 800c196:	4659      	mov	r1, fp
 800c198:	2201      	movs	r2, #1
 800c19a:	4628      	mov	r0, r5
 800c19c:	9308      	str	r3, [sp, #32]
 800c19e:	f000 fa7b 	bl	800c698 <__lshift>
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4683      	mov	fp, r0
 800c1a6:	f000 fae7 	bl	800c778 <__mcmp>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	dcb2      	bgt.n	800c114 <_dtoa_r+0xac4>
 800c1ae:	d102      	bne.n	800c1b6 <_dtoa_r+0xb66>
 800c1b0:	9b08      	ldr	r3, [sp, #32]
 800c1b2:	07db      	lsls	r3, r3, #31
 800c1b4:	d4ae      	bmi.n	800c114 <_dtoa_r+0xac4>
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	461f      	mov	r7, r3
 800c1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1be:	2a30      	cmp	r2, #48	; 0x30
 800c1c0:	d0fa      	beq.n	800c1b8 <_dtoa_r+0xb68>
 800c1c2:	e6f9      	b.n	800bfb8 <_dtoa_r+0x968>
 800c1c4:	9a03      	ldr	r2, [sp, #12]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d1a5      	bne.n	800c116 <_dtoa_r+0xac6>
 800c1ca:	2331      	movs	r3, #49	; 0x31
 800c1cc:	f10a 0a01 	add.w	sl, sl, #1
 800c1d0:	e779      	b.n	800c0c6 <_dtoa_r+0xa76>
 800c1d2:	4b14      	ldr	r3, [pc, #80]	; (800c224 <_dtoa_r+0xbd4>)
 800c1d4:	f7ff baa8 	b.w	800b728 <_dtoa_r+0xd8>
 800c1d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f47f aa81 	bne.w	800b6e2 <_dtoa_r+0x92>
 800c1e0:	4b11      	ldr	r3, [pc, #68]	; (800c228 <_dtoa_r+0xbd8>)
 800c1e2:	f7ff baa1 	b.w	800b728 <_dtoa_r+0xd8>
 800c1e6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ea:	dc03      	bgt.n	800c1f4 <_dtoa_r+0xba4>
 800c1ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	f73f aecb 	bgt.w	800bf8a <_dtoa_r+0x93a>
 800c1f4:	9f03      	ldr	r7, [sp, #12]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4658      	mov	r0, fp
 800c1fa:	f7ff f99d 	bl	800b538 <quorem>
 800c1fe:	9a03      	ldr	r2, [sp, #12]
 800c200:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c204:	f807 3b01 	strb.w	r3, [r7], #1
 800c208:	1aba      	subs	r2, r7, r2
 800c20a:	4591      	cmp	r9, r2
 800c20c:	ddba      	ble.n	800c184 <_dtoa_r+0xb34>
 800c20e:	4659      	mov	r1, fp
 800c210:	2300      	movs	r3, #0
 800c212:	220a      	movs	r2, #10
 800c214:	4628      	mov	r0, r5
 800c216:	f000 f893 	bl	800c340 <__multadd>
 800c21a:	4683      	mov	fp, r0
 800c21c:	e7eb      	b.n	800c1f6 <_dtoa_r+0xba6>
 800c21e:	bf00      	nop
 800c220:	0800ee4f 	.word	0x0800ee4f
 800c224:	0800edac 	.word	0x0800edac
 800c228:	0800edd0 	.word	0x0800edd0

0800c22c <_localeconv_r>:
 800c22c:	4800      	ldr	r0, [pc, #0]	; (800c230 <_localeconv_r+0x4>)
 800c22e:	4770      	bx	lr
 800c230:	200002d8 	.word	0x200002d8

0800c234 <malloc>:
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <malloc+0xc>)
 800c236:	4601      	mov	r1, r0
 800c238:	6818      	ldr	r0, [r3, #0]
 800c23a:	f000 bc1d 	b.w	800ca78 <_malloc_r>
 800c23e:	bf00      	nop
 800c240:	20000184 	.word	0x20000184

0800c244 <memchr>:
 800c244:	4603      	mov	r3, r0
 800c246:	b510      	push	{r4, lr}
 800c248:	b2c9      	uxtb	r1, r1
 800c24a:	4402      	add	r2, r0
 800c24c:	4293      	cmp	r3, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	d101      	bne.n	800c256 <memchr+0x12>
 800c252:	2000      	movs	r0, #0
 800c254:	e003      	b.n	800c25e <memchr+0x1a>
 800c256:	7804      	ldrb	r4, [r0, #0]
 800c258:	3301      	adds	r3, #1
 800c25a:	428c      	cmp	r4, r1
 800c25c:	d1f6      	bne.n	800c24c <memchr+0x8>
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <memcpy>:
 800c260:	440a      	add	r2, r1
 800c262:	4291      	cmp	r1, r2
 800c264:	f100 33ff 	add.w	r3, r0, #4294967295
 800c268:	d100      	bne.n	800c26c <memcpy+0xc>
 800c26a:	4770      	bx	lr
 800c26c:	b510      	push	{r4, lr}
 800c26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c272:	4291      	cmp	r1, r2
 800c274:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c278:	d1f9      	bne.n	800c26e <memcpy+0xe>
 800c27a:	bd10      	pop	{r4, pc}

0800c27c <_Balloc>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	b976      	cbnz	r6, 800c2a4 <_Balloc+0x28>
 800c286:	2010      	movs	r0, #16
 800c288:	f7ff ffd4 	bl	800c234 <malloc>
 800c28c:	4602      	mov	r2, r0
 800c28e:	6260      	str	r0, [r4, #36]	; 0x24
 800c290:	b920      	cbnz	r0, 800c29c <_Balloc+0x20>
 800c292:	2166      	movs	r1, #102	; 0x66
 800c294:	4b17      	ldr	r3, [pc, #92]	; (800c2f4 <_Balloc+0x78>)
 800c296:	4818      	ldr	r0, [pc, #96]	; (800c2f8 <_Balloc+0x7c>)
 800c298:	f000 fdce 	bl	800ce38 <__assert_func>
 800c29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a0:	6006      	str	r6, [r0, #0]
 800c2a2:	60c6      	str	r6, [r0, #12]
 800c2a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2a6:	68f3      	ldr	r3, [r6, #12]
 800c2a8:	b183      	cbz	r3, 800c2cc <_Balloc+0x50>
 800c2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2b2:	b9b8      	cbnz	r0, 800c2e4 <_Balloc+0x68>
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2ba:	1d72      	adds	r2, r6, #5
 800c2bc:	4620      	mov	r0, r4
 800c2be:	0092      	lsls	r2, r2, #2
 800c2c0:	f000 fb5e 	bl	800c980 <_calloc_r>
 800c2c4:	b160      	cbz	r0, 800c2e0 <_Balloc+0x64>
 800c2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ca:	e00e      	b.n	800c2ea <_Balloc+0x6e>
 800c2cc:	2221      	movs	r2, #33	; 0x21
 800c2ce:	2104      	movs	r1, #4
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fb55 	bl	800c980 <_calloc_r>
 800c2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d8:	60f0      	str	r0, [r6, #12]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e4      	bne.n	800c2aa <_Balloc+0x2e>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	6802      	ldr	r2, [r0, #0]
 800c2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2f0:	e7f7      	b.n	800c2e2 <_Balloc+0x66>
 800c2f2:	bf00      	nop
 800c2f4:	0800eddd 	.word	0x0800eddd
 800c2f8:	0800ee60 	.word	0x0800ee60

0800c2fc <_Bfree>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c300:	4605      	mov	r5, r0
 800c302:	460c      	mov	r4, r1
 800c304:	b976      	cbnz	r6, 800c324 <_Bfree+0x28>
 800c306:	2010      	movs	r0, #16
 800c308:	f7ff ff94 	bl	800c234 <malloc>
 800c30c:	4602      	mov	r2, r0
 800c30e:	6268      	str	r0, [r5, #36]	; 0x24
 800c310:	b920      	cbnz	r0, 800c31c <_Bfree+0x20>
 800c312:	218a      	movs	r1, #138	; 0x8a
 800c314:	4b08      	ldr	r3, [pc, #32]	; (800c338 <_Bfree+0x3c>)
 800c316:	4809      	ldr	r0, [pc, #36]	; (800c33c <_Bfree+0x40>)
 800c318:	f000 fd8e 	bl	800ce38 <__assert_func>
 800c31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c320:	6006      	str	r6, [r0, #0]
 800c322:	60c6      	str	r6, [r0, #12]
 800c324:	b13c      	cbz	r4, 800c336 <_Bfree+0x3a>
 800c326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c328:	6862      	ldr	r2, [r4, #4]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c330:	6021      	str	r1, [r4, #0]
 800c332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	0800eddd 	.word	0x0800eddd
 800c33c:	0800ee60 	.word	0x0800ee60

0800c340 <__multadd>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	4607      	mov	r7, r0
 800c346:	460c      	mov	r4, r1
 800c348:	461e      	mov	r6, r3
 800c34a:	2000      	movs	r0, #0
 800c34c:	690d      	ldr	r5, [r1, #16]
 800c34e:	f101 0c14 	add.w	ip, r1, #20
 800c352:	f8dc 3000 	ldr.w	r3, [ip]
 800c356:	3001      	adds	r0, #1
 800c358:	b299      	uxth	r1, r3
 800c35a:	fb02 6101 	mla	r1, r2, r1, r6
 800c35e:	0c1e      	lsrs	r6, r3, #16
 800c360:	0c0b      	lsrs	r3, r1, #16
 800c362:	fb02 3306 	mla	r3, r2, r6, r3
 800c366:	b289      	uxth	r1, r1
 800c368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c36c:	4285      	cmp	r5, r0
 800c36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c372:	f84c 1b04 	str.w	r1, [ip], #4
 800c376:	dcec      	bgt.n	800c352 <__multadd+0x12>
 800c378:	b30e      	cbz	r6, 800c3be <__multadd+0x7e>
 800c37a:	68a3      	ldr	r3, [r4, #8]
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	dc19      	bgt.n	800c3b4 <__multadd+0x74>
 800c380:	6861      	ldr	r1, [r4, #4]
 800c382:	4638      	mov	r0, r7
 800c384:	3101      	adds	r1, #1
 800c386:	f7ff ff79 	bl	800c27c <_Balloc>
 800c38a:	4680      	mov	r8, r0
 800c38c:	b928      	cbnz	r0, 800c39a <__multadd+0x5a>
 800c38e:	4602      	mov	r2, r0
 800c390:	21b5      	movs	r1, #181	; 0xb5
 800c392:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <__multadd+0x84>)
 800c394:	480c      	ldr	r0, [pc, #48]	; (800c3c8 <__multadd+0x88>)
 800c396:	f000 fd4f 	bl	800ce38 <__assert_func>
 800c39a:	6922      	ldr	r2, [r4, #16]
 800c39c:	f104 010c 	add.w	r1, r4, #12
 800c3a0:	3202      	adds	r2, #2
 800c3a2:	0092      	lsls	r2, r2, #2
 800c3a4:	300c      	adds	r0, #12
 800c3a6:	f7ff ff5b 	bl	800c260 <memcpy>
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f7ff ffa5 	bl	800c2fc <_Bfree>
 800c3b2:	4644      	mov	r4, r8
 800c3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	615e      	str	r6, [r3, #20]
 800c3bc:	6125      	str	r5, [r4, #16]
 800c3be:	4620      	mov	r0, r4
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	0800ee4f 	.word	0x0800ee4f
 800c3c8:	0800ee60 	.word	0x0800ee60

0800c3cc <__hi0bits>:
 800c3cc:	0c02      	lsrs	r2, r0, #16
 800c3ce:	0412      	lsls	r2, r2, #16
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	b9ca      	cbnz	r2, 800c408 <__hi0bits+0x3c>
 800c3d4:	0403      	lsls	r3, r0, #16
 800c3d6:	2010      	movs	r0, #16
 800c3d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c3dc:	bf04      	itt	eq
 800c3de:	021b      	lsleq	r3, r3, #8
 800c3e0:	3008      	addeq	r0, #8
 800c3e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c3e6:	bf04      	itt	eq
 800c3e8:	011b      	lsleq	r3, r3, #4
 800c3ea:	3004      	addeq	r0, #4
 800c3ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c3f0:	bf04      	itt	eq
 800c3f2:	009b      	lsleq	r3, r3, #2
 800c3f4:	3002      	addeq	r0, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	db05      	blt.n	800c406 <__hi0bits+0x3a>
 800c3fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c3fe:	f100 0001 	add.w	r0, r0, #1
 800c402:	bf08      	it	eq
 800c404:	2020      	moveq	r0, #32
 800c406:	4770      	bx	lr
 800c408:	2000      	movs	r0, #0
 800c40a:	e7e5      	b.n	800c3d8 <__hi0bits+0xc>

0800c40c <__lo0bits>:
 800c40c:	6803      	ldr	r3, [r0, #0]
 800c40e:	4602      	mov	r2, r0
 800c410:	f013 0007 	ands.w	r0, r3, #7
 800c414:	d00b      	beq.n	800c42e <__lo0bits+0x22>
 800c416:	07d9      	lsls	r1, r3, #31
 800c418:	d421      	bmi.n	800c45e <__lo0bits+0x52>
 800c41a:	0798      	lsls	r0, r3, #30
 800c41c:	bf49      	itett	mi
 800c41e:	085b      	lsrmi	r3, r3, #1
 800c420:	089b      	lsrpl	r3, r3, #2
 800c422:	2001      	movmi	r0, #1
 800c424:	6013      	strmi	r3, [r2, #0]
 800c426:	bf5c      	itt	pl
 800c428:	2002      	movpl	r0, #2
 800c42a:	6013      	strpl	r3, [r2, #0]
 800c42c:	4770      	bx	lr
 800c42e:	b299      	uxth	r1, r3
 800c430:	b909      	cbnz	r1, 800c436 <__lo0bits+0x2a>
 800c432:	2010      	movs	r0, #16
 800c434:	0c1b      	lsrs	r3, r3, #16
 800c436:	b2d9      	uxtb	r1, r3
 800c438:	b909      	cbnz	r1, 800c43e <__lo0bits+0x32>
 800c43a:	3008      	adds	r0, #8
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	0719      	lsls	r1, r3, #28
 800c440:	bf04      	itt	eq
 800c442:	091b      	lsreq	r3, r3, #4
 800c444:	3004      	addeq	r0, #4
 800c446:	0799      	lsls	r1, r3, #30
 800c448:	bf04      	itt	eq
 800c44a:	089b      	lsreq	r3, r3, #2
 800c44c:	3002      	addeq	r0, #2
 800c44e:	07d9      	lsls	r1, r3, #31
 800c450:	d403      	bmi.n	800c45a <__lo0bits+0x4e>
 800c452:	085b      	lsrs	r3, r3, #1
 800c454:	f100 0001 	add.w	r0, r0, #1
 800c458:	d003      	beq.n	800c462 <__lo0bits+0x56>
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	4770      	bx	lr
 800c45e:	2000      	movs	r0, #0
 800c460:	4770      	bx	lr
 800c462:	2020      	movs	r0, #32
 800c464:	4770      	bx	lr
	...

0800c468 <__i2b>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	2101      	movs	r1, #1
 800c46e:	f7ff ff05 	bl	800c27c <_Balloc>
 800c472:	4602      	mov	r2, r0
 800c474:	b928      	cbnz	r0, 800c482 <__i2b+0x1a>
 800c476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c47a:	4b04      	ldr	r3, [pc, #16]	; (800c48c <__i2b+0x24>)
 800c47c:	4804      	ldr	r0, [pc, #16]	; (800c490 <__i2b+0x28>)
 800c47e:	f000 fcdb 	bl	800ce38 <__assert_func>
 800c482:	2301      	movs	r3, #1
 800c484:	6144      	str	r4, [r0, #20]
 800c486:	6103      	str	r3, [r0, #16]
 800c488:	bd10      	pop	{r4, pc}
 800c48a:	bf00      	nop
 800c48c:	0800ee4f 	.word	0x0800ee4f
 800c490:	0800ee60 	.word	0x0800ee60

0800c494 <__multiply>:
 800c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	4691      	mov	r9, r2
 800c49a:	690a      	ldr	r2, [r1, #16]
 800c49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	bfbe      	ittt	lt
 800c4a6:	460b      	movlt	r3, r1
 800c4a8:	464c      	movlt	r4, r9
 800c4aa:	4699      	movlt	r9, r3
 800c4ac:	6927      	ldr	r7, [r4, #16]
 800c4ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	6861      	ldr	r1, [r4, #4]
 800c4b6:	eb07 060a 	add.w	r6, r7, sl
 800c4ba:	42b3      	cmp	r3, r6
 800c4bc:	b085      	sub	sp, #20
 800c4be:	bfb8      	it	lt
 800c4c0:	3101      	addlt	r1, #1
 800c4c2:	f7ff fedb 	bl	800c27c <_Balloc>
 800c4c6:	b930      	cbnz	r0, 800c4d6 <__multiply+0x42>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	f240 115d 	movw	r1, #349	; 0x15d
 800c4ce:	4b43      	ldr	r3, [pc, #268]	; (800c5dc <__multiply+0x148>)
 800c4d0:	4843      	ldr	r0, [pc, #268]	; (800c5e0 <__multiply+0x14c>)
 800c4d2:	f000 fcb1 	bl	800ce38 <__assert_func>
 800c4d6:	f100 0514 	add.w	r5, r0, #20
 800c4da:	462b      	mov	r3, r5
 800c4dc:	2200      	movs	r2, #0
 800c4de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4e2:	4543      	cmp	r3, r8
 800c4e4:	d321      	bcc.n	800c52a <__multiply+0x96>
 800c4e6:	f104 0314 	add.w	r3, r4, #20
 800c4ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4ee:	f109 0314 	add.w	r3, r9, #20
 800c4f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4f6:	9202      	str	r2, [sp, #8]
 800c4f8:	1b3a      	subs	r2, r7, r4
 800c4fa:	3a15      	subs	r2, #21
 800c4fc:	f022 0203 	bic.w	r2, r2, #3
 800c500:	3204      	adds	r2, #4
 800c502:	f104 0115 	add.w	r1, r4, #21
 800c506:	428f      	cmp	r7, r1
 800c508:	bf38      	it	cc
 800c50a:	2204      	movcc	r2, #4
 800c50c:	9201      	str	r2, [sp, #4]
 800c50e:	9a02      	ldr	r2, [sp, #8]
 800c510:	9303      	str	r3, [sp, #12]
 800c512:	429a      	cmp	r2, r3
 800c514:	d80c      	bhi.n	800c530 <__multiply+0x9c>
 800c516:	2e00      	cmp	r6, #0
 800c518:	dd03      	ble.n	800c522 <__multiply+0x8e>
 800c51a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d059      	beq.n	800c5d6 <__multiply+0x142>
 800c522:	6106      	str	r6, [r0, #16]
 800c524:	b005      	add	sp, #20
 800c526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52a:	f843 2b04 	str.w	r2, [r3], #4
 800c52e:	e7d8      	b.n	800c4e2 <__multiply+0x4e>
 800c530:	f8b3 a000 	ldrh.w	sl, [r3]
 800c534:	f1ba 0f00 	cmp.w	sl, #0
 800c538:	d023      	beq.n	800c582 <__multiply+0xee>
 800c53a:	46a9      	mov	r9, r5
 800c53c:	f04f 0c00 	mov.w	ip, #0
 800c540:	f104 0e14 	add.w	lr, r4, #20
 800c544:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c548:	f8d9 1000 	ldr.w	r1, [r9]
 800c54c:	fa1f fb82 	uxth.w	fp, r2
 800c550:	b289      	uxth	r1, r1
 800c552:	fb0a 110b 	mla	r1, sl, fp, r1
 800c556:	4461      	add	r1, ip
 800c558:	f8d9 c000 	ldr.w	ip, [r9]
 800c55c:	0c12      	lsrs	r2, r2, #16
 800c55e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c562:	fb0a c202 	mla	r2, sl, r2, ip
 800c566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c56a:	b289      	uxth	r1, r1
 800c56c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c570:	4577      	cmp	r7, lr
 800c572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c576:	f849 1b04 	str.w	r1, [r9], #4
 800c57a:	d8e3      	bhi.n	800c544 <__multiply+0xb0>
 800c57c:	9a01      	ldr	r2, [sp, #4]
 800c57e:	f845 c002 	str.w	ip, [r5, r2]
 800c582:	9a03      	ldr	r2, [sp, #12]
 800c584:	3304      	adds	r3, #4
 800c586:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c58a:	f1b9 0f00 	cmp.w	r9, #0
 800c58e:	d020      	beq.n	800c5d2 <__multiply+0x13e>
 800c590:	46ae      	mov	lr, r5
 800c592:	f04f 0a00 	mov.w	sl, #0
 800c596:	6829      	ldr	r1, [r5, #0]
 800c598:	f104 0c14 	add.w	ip, r4, #20
 800c59c:	f8bc b000 	ldrh.w	fp, [ip]
 800c5a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5a4:	b289      	uxth	r1, r1
 800c5a6:	fb09 220b 	mla	r2, r9, fp, r2
 800c5aa:	4492      	add	sl, r2
 800c5ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5b0:	f84e 1b04 	str.w	r1, [lr], #4
 800c5b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5b8:	f8be 1000 	ldrh.w	r1, [lr]
 800c5bc:	0c12      	lsrs	r2, r2, #16
 800c5be:	fb09 1102 	mla	r1, r9, r2, r1
 800c5c2:	4567      	cmp	r7, ip
 800c5c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5cc:	d8e6      	bhi.n	800c59c <__multiply+0x108>
 800c5ce:	9a01      	ldr	r2, [sp, #4]
 800c5d0:	50a9      	str	r1, [r5, r2]
 800c5d2:	3504      	adds	r5, #4
 800c5d4:	e79b      	b.n	800c50e <__multiply+0x7a>
 800c5d6:	3e01      	subs	r6, #1
 800c5d8:	e79d      	b.n	800c516 <__multiply+0x82>
 800c5da:	bf00      	nop
 800c5dc:	0800ee4f 	.word	0x0800ee4f
 800c5e0:	0800ee60 	.word	0x0800ee60

0800c5e4 <__pow5mult>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	f012 0203 	ands.w	r2, r2, #3
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460f      	mov	r7, r1
 800c5f2:	d007      	beq.n	800c604 <__pow5mult+0x20>
 800c5f4:	4c25      	ldr	r4, [pc, #148]	; (800c68c <__pow5mult+0xa8>)
 800c5f6:	3a01      	subs	r2, #1
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5fe:	f7ff fe9f 	bl	800c340 <__multadd>
 800c602:	4607      	mov	r7, r0
 800c604:	10ad      	asrs	r5, r5, #2
 800c606:	d03d      	beq.n	800c684 <__pow5mult+0xa0>
 800c608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c60a:	b97c      	cbnz	r4, 800c62c <__pow5mult+0x48>
 800c60c:	2010      	movs	r0, #16
 800c60e:	f7ff fe11 	bl	800c234 <malloc>
 800c612:	4602      	mov	r2, r0
 800c614:	6270      	str	r0, [r6, #36]	; 0x24
 800c616:	b928      	cbnz	r0, 800c624 <__pow5mult+0x40>
 800c618:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c61c:	4b1c      	ldr	r3, [pc, #112]	; (800c690 <__pow5mult+0xac>)
 800c61e:	481d      	ldr	r0, [pc, #116]	; (800c694 <__pow5mult+0xb0>)
 800c620:	f000 fc0a 	bl	800ce38 <__assert_func>
 800c624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c628:	6004      	str	r4, [r0, #0]
 800c62a:	60c4      	str	r4, [r0, #12]
 800c62c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c634:	b94c      	cbnz	r4, 800c64a <__pow5mult+0x66>
 800c636:	f240 2171 	movw	r1, #625	; 0x271
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff ff14 	bl	800c468 <__i2b>
 800c640:	2300      	movs	r3, #0
 800c642:	4604      	mov	r4, r0
 800c644:	f8c8 0008 	str.w	r0, [r8, #8]
 800c648:	6003      	str	r3, [r0, #0]
 800c64a:	f04f 0900 	mov.w	r9, #0
 800c64e:	07eb      	lsls	r3, r5, #31
 800c650:	d50a      	bpl.n	800c668 <__pow5mult+0x84>
 800c652:	4639      	mov	r1, r7
 800c654:	4622      	mov	r2, r4
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff1c 	bl	800c494 <__multiply>
 800c65c:	4680      	mov	r8, r0
 800c65e:	4639      	mov	r1, r7
 800c660:	4630      	mov	r0, r6
 800c662:	f7ff fe4b 	bl	800c2fc <_Bfree>
 800c666:	4647      	mov	r7, r8
 800c668:	106d      	asrs	r5, r5, #1
 800c66a:	d00b      	beq.n	800c684 <__pow5mult+0xa0>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	b938      	cbnz	r0, 800c680 <__pow5mult+0x9c>
 800c670:	4622      	mov	r2, r4
 800c672:	4621      	mov	r1, r4
 800c674:	4630      	mov	r0, r6
 800c676:	f7ff ff0d 	bl	800c494 <__multiply>
 800c67a:	6020      	str	r0, [r4, #0]
 800c67c:	f8c0 9000 	str.w	r9, [r0]
 800c680:	4604      	mov	r4, r0
 800c682:	e7e4      	b.n	800c64e <__pow5mult+0x6a>
 800c684:	4638      	mov	r0, r7
 800c686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68a:	bf00      	nop
 800c68c:	0800efb0 	.word	0x0800efb0
 800c690:	0800eddd 	.word	0x0800eddd
 800c694:	0800ee60 	.word	0x0800ee60

0800c698 <__lshift>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	460c      	mov	r4, r1
 800c69e:	4607      	mov	r7, r0
 800c6a0:	4691      	mov	r9, r2
 800c6a2:	6923      	ldr	r3, [r4, #16]
 800c6a4:	6849      	ldr	r1, [r1, #4]
 800c6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6b0:	f108 0601 	add.w	r6, r8, #1
 800c6b4:	42b3      	cmp	r3, r6
 800c6b6:	db0b      	blt.n	800c6d0 <__lshift+0x38>
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff fddf 	bl	800c27c <_Balloc>
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b948      	cbnz	r0, 800c6d6 <__lshift+0x3e>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6c8:	4b29      	ldr	r3, [pc, #164]	; (800c770 <__lshift+0xd8>)
 800c6ca:	482a      	ldr	r0, [pc, #168]	; (800c774 <__lshift+0xdc>)
 800c6cc:	f000 fbb4 	bl	800ce38 <__assert_func>
 800c6d0:	3101      	adds	r1, #1
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	e7ee      	b.n	800c6b4 <__lshift+0x1c>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f100 0114 	add.w	r1, r0, #20
 800c6dc:	f100 0210 	add.w	r2, r0, #16
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	4553      	cmp	r3, sl
 800c6e4:	db37      	blt.n	800c756 <__lshift+0xbe>
 800c6e6:	6920      	ldr	r0, [r4, #16]
 800c6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6ec:	f104 0314 	add.w	r3, r4, #20
 800c6f0:	f019 091f 	ands.w	r9, r9, #31
 800c6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6fc:	d02f      	beq.n	800c75e <__lshift+0xc6>
 800c6fe:	468a      	mov	sl, r1
 800c700:	f04f 0c00 	mov.w	ip, #0
 800c704:	f1c9 0e20 	rsb	lr, r9, #32
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	fa02 f209 	lsl.w	r2, r2, r9
 800c70e:	ea42 020c 	orr.w	r2, r2, ip
 800c712:	f84a 2b04 	str.w	r2, [sl], #4
 800c716:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71a:	4298      	cmp	r0, r3
 800c71c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c720:	d8f2      	bhi.n	800c708 <__lshift+0x70>
 800c722:	1b03      	subs	r3, r0, r4
 800c724:	3b15      	subs	r3, #21
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	3304      	adds	r3, #4
 800c72c:	f104 0215 	add.w	r2, r4, #21
 800c730:	4290      	cmp	r0, r2
 800c732:	bf38      	it	cc
 800c734:	2304      	movcc	r3, #4
 800c736:	f841 c003 	str.w	ip, [r1, r3]
 800c73a:	f1bc 0f00 	cmp.w	ip, #0
 800c73e:	d001      	beq.n	800c744 <__lshift+0xac>
 800c740:	f108 0602 	add.w	r6, r8, #2
 800c744:	3e01      	subs	r6, #1
 800c746:	4638      	mov	r0, r7
 800c748:	4621      	mov	r1, r4
 800c74a:	612e      	str	r6, [r5, #16]
 800c74c:	f7ff fdd6 	bl	800c2fc <_Bfree>
 800c750:	4628      	mov	r0, r5
 800c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c756:	f842 0f04 	str.w	r0, [r2, #4]!
 800c75a:	3301      	adds	r3, #1
 800c75c:	e7c1      	b.n	800c6e2 <__lshift+0x4a>
 800c75e:	3904      	subs	r1, #4
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	4298      	cmp	r0, r3
 800c766:	f841 2f04 	str.w	r2, [r1, #4]!
 800c76a:	d8f9      	bhi.n	800c760 <__lshift+0xc8>
 800c76c:	e7ea      	b.n	800c744 <__lshift+0xac>
 800c76e:	bf00      	nop
 800c770:	0800ee4f 	.word	0x0800ee4f
 800c774:	0800ee60 	.word	0x0800ee60

0800c778 <__mcmp>:
 800c778:	4603      	mov	r3, r0
 800c77a:	690a      	ldr	r2, [r1, #16]
 800c77c:	6900      	ldr	r0, [r0, #16]
 800c77e:	b530      	push	{r4, r5, lr}
 800c780:	1a80      	subs	r0, r0, r2
 800c782:	d10d      	bne.n	800c7a0 <__mcmp+0x28>
 800c784:	3314      	adds	r3, #20
 800c786:	3114      	adds	r1, #20
 800c788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c78c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c798:	4295      	cmp	r5, r2
 800c79a:	d002      	beq.n	800c7a2 <__mcmp+0x2a>
 800c79c:	d304      	bcc.n	800c7a8 <__mcmp+0x30>
 800c79e:	2001      	movs	r0, #1
 800c7a0:	bd30      	pop	{r4, r5, pc}
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	d3f4      	bcc.n	800c790 <__mcmp+0x18>
 800c7a6:	e7fb      	b.n	800c7a0 <__mcmp+0x28>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	e7f8      	b.n	800c7a0 <__mcmp+0x28>
	...

0800c7b0 <__mdiff>:
 800c7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	4614      	mov	r4, r2
 800c7be:	f7ff ffdb 	bl	800c778 <__mcmp>
 800c7c2:	1e06      	subs	r6, r0, #0
 800c7c4:	d111      	bne.n	800c7ea <__mdiff+0x3a>
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7ff fd57 	bl	800c27c <_Balloc>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	b928      	cbnz	r0, 800c7de <__mdiff+0x2e>
 800c7d2:	f240 2132 	movw	r1, #562	; 0x232
 800c7d6:	4b3a      	ldr	r3, [pc, #232]	; (800c8c0 <__mdiff+0x110>)
 800c7d8:	483a      	ldr	r0, [pc, #232]	; (800c8c4 <__mdiff+0x114>)
 800c7da:	f000 fb2d 	bl	800ce38 <__assert_func>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ea:	bfa4      	itt	ge
 800c7ec:	4623      	movge	r3, r4
 800c7ee:	462c      	movge	r4, r5
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	6861      	ldr	r1, [r4, #4]
 800c7f4:	bfa6      	itte	ge
 800c7f6:	461d      	movge	r5, r3
 800c7f8:	2600      	movge	r6, #0
 800c7fa:	2601      	movlt	r6, #1
 800c7fc:	f7ff fd3e 	bl	800c27c <_Balloc>
 800c800:	4602      	mov	r2, r0
 800c802:	b918      	cbnz	r0, 800c80c <__mdiff+0x5c>
 800c804:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c808:	4b2d      	ldr	r3, [pc, #180]	; (800c8c0 <__mdiff+0x110>)
 800c80a:	e7e5      	b.n	800c7d8 <__mdiff+0x28>
 800c80c:	f102 0814 	add.w	r8, r2, #20
 800c810:	46c2      	mov	sl, r8
 800c812:	f04f 0c00 	mov.w	ip, #0
 800c816:	6927      	ldr	r7, [r4, #16]
 800c818:	60c6      	str	r6, [r0, #12]
 800c81a:	692e      	ldr	r6, [r5, #16]
 800c81c:	f104 0014 	add.w	r0, r4, #20
 800c820:	f105 0914 	add.w	r9, r5, #20
 800c824:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c82c:	3410      	adds	r4, #16
 800c82e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c832:	f859 3b04 	ldr.w	r3, [r9], #4
 800c836:	fa1f f18b 	uxth.w	r1, fp
 800c83a:	448c      	add	ip, r1
 800c83c:	b299      	uxth	r1, r3
 800c83e:	0c1b      	lsrs	r3, r3, #16
 800c840:	ebac 0101 	sub.w	r1, ip, r1
 800c844:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c848:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c84c:	b289      	uxth	r1, r1
 800c84e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c852:	454e      	cmp	r6, r9
 800c854:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c858:	f84a 3b04 	str.w	r3, [sl], #4
 800c85c:	d8e7      	bhi.n	800c82e <__mdiff+0x7e>
 800c85e:	1b73      	subs	r3, r6, r5
 800c860:	3b15      	subs	r3, #21
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	3515      	adds	r5, #21
 800c868:	3304      	adds	r3, #4
 800c86a:	42ae      	cmp	r6, r5
 800c86c:	bf38      	it	cc
 800c86e:	2304      	movcc	r3, #4
 800c870:	4418      	add	r0, r3
 800c872:	4443      	add	r3, r8
 800c874:	461e      	mov	r6, r3
 800c876:	4605      	mov	r5, r0
 800c878:	4575      	cmp	r5, lr
 800c87a:	d30e      	bcc.n	800c89a <__mdiff+0xea>
 800c87c:	f10e 0103 	add.w	r1, lr, #3
 800c880:	1a09      	subs	r1, r1, r0
 800c882:	f021 0103 	bic.w	r1, r1, #3
 800c886:	3803      	subs	r0, #3
 800c888:	4586      	cmp	lr, r0
 800c88a:	bf38      	it	cc
 800c88c:	2100      	movcc	r1, #0
 800c88e:	4419      	add	r1, r3
 800c890:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c894:	b18b      	cbz	r3, 800c8ba <__mdiff+0x10a>
 800c896:	6117      	str	r7, [r2, #16]
 800c898:	e7a4      	b.n	800c7e4 <__mdiff+0x34>
 800c89a:	f855 8b04 	ldr.w	r8, [r5], #4
 800c89e:	fa1f f188 	uxth.w	r1, r8
 800c8a2:	4461      	add	r1, ip
 800c8a4:	140c      	asrs	r4, r1, #16
 800c8a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8aa:	b289      	uxth	r1, r1
 800c8ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c8b4:	f846 1b04 	str.w	r1, [r6], #4
 800c8b8:	e7de      	b.n	800c878 <__mdiff+0xc8>
 800c8ba:	3f01      	subs	r7, #1
 800c8bc:	e7e8      	b.n	800c890 <__mdiff+0xe0>
 800c8be:	bf00      	nop
 800c8c0:	0800ee4f 	.word	0x0800ee4f
 800c8c4:	0800ee60 	.word	0x0800ee60

0800c8c8 <__d2b>:
 800c8c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c8d2:	4690      	mov	r8, r2
 800c8d4:	461d      	mov	r5, r3
 800c8d6:	f7ff fcd1 	bl	800c27c <_Balloc>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	b930      	cbnz	r0, 800c8ec <__d2b+0x24>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	f240 310a 	movw	r1, #778	; 0x30a
 800c8e4:	4b24      	ldr	r3, [pc, #144]	; (800c978 <__d2b+0xb0>)
 800c8e6:	4825      	ldr	r0, [pc, #148]	; (800c97c <__d2b+0xb4>)
 800c8e8:	f000 faa6 	bl	800ce38 <__assert_func>
 800c8ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c8f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c8f4:	bb2d      	cbnz	r5, 800c942 <__d2b+0x7a>
 800c8f6:	9301      	str	r3, [sp, #4]
 800c8f8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8fc:	d026      	beq.n	800c94c <__d2b+0x84>
 800c8fe:	4668      	mov	r0, sp
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	f7ff fd83 	bl	800c40c <__lo0bits>
 800c906:	9900      	ldr	r1, [sp, #0]
 800c908:	b1f0      	cbz	r0, 800c948 <__d2b+0x80>
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	f1c0 0320 	rsb	r3, r0, #32
 800c910:	fa02 f303 	lsl.w	r3, r2, r3
 800c914:	430b      	orrs	r3, r1
 800c916:	40c2      	lsrs	r2, r0
 800c918:	6163      	str	r3, [r4, #20]
 800c91a:	9201      	str	r2, [sp, #4]
 800c91c:	9b01      	ldr	r3, [sp, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bf14      	ite	ne
 800c922:	2102      	movne	r1, #2
 800c924:	2101      	moveq	r1, #1
 800c926:	61a3      	str	r3, [r4, #24]
 800c928:	6121      	str	r1, [r4, #16]
 800c92a:	b1c5      	cbz	r5, 800c95e <__d2b+0x96>
 800c92c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c930:	4405      	add	r5, r0
 800c932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c936:	603d      	str	r5, [r7, #0]
 800c938:	6030      	str	r0, [r6, #0]
 800c93a:	4620      	mov	r0, r4
 800c93c:	b002      	add	sp, #8
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c946:	e7d6      	b.n	800c8f6 <__d2b+0x2e>
 800c948:	6161      	str	r1, [r4, #20]
 800c94a:	e7e7      	b.n	800c91c <__d2b+0x54>
 800c94c:	a801      	add	r0, sp, #4
 800c94e:	f7ff fd5d 	bl	800c40c <__lo0bits>
 800c952:	2101      	movs	r1, #1
 800c954:	9b01      	ldr	r3, [sp, #4]
 800c956:	6121      	str	r1, [r4, #16]
 800c958:	6163      	str	r3, [r4, #20]
 800c95a:	3020      	adds	r0, #32
 800c95c:	e7e5      	b.n	800c92a <__d2b+0x62>
 800c95e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c962:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c966:	6038      	str	r0, [r7, #0]
 800c968:	6918      	ldr	r0, [r3, #16]
 800c96a:	f7ff fd2f 	bl	800c3cc <__hi0bits>
 800c96e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c972:	6031      	str	r1, [r6, #0]
 800c974:	e7e1      	b.n	800c93a <__d2b+0x72>
 800c976:	bf00      	nop
 800c978:	0800ee4f 	.word	0x0800ee4f
 800c97c:	0800ee60 	.word	0x0800ee60

0800c980 <_calloc_r>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	fba1 5402 	umull	r5, r4, r1, r2
 800c986:	b934      	cbnz	r4, 800c996 <_calloc_r+0x16>
 800c988:	4629      	mov	r1, r5
 800c98a:	f000 f875 	bl	800ca78 <_malloc_r>
 800c98e:	4606      	mov	r6, r0
 800c990:	b928      	cbnz	r0, 800c99e <_calloc_r+0x1e>
 800c992:	4630      	mov	r0, r6
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	220c      	movs	r2, #12
 800c998:	2600      	movs	r6, #0
 800c99a:	6002      	str	r2, [r0, #0]
 800c99c:	e7f9      	b.n	800c992 <_calloc_r+0x12>
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	f7fe f941 	bl	800ac28 <memset>
 800c9a6:	e7f4      	b.n	800c992 <_calloc_r+0x12>

0800c9a8 <_free_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	d040      	beq.n	800ca32 <_free_r+0x8a>
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f0c      	subs	r4, r1, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfb8      	it	lt
 800c9ba:	18e4      	addlt	r4, r4, r3
 800c9bc:	f000 fa98 	bl	800cef0 <__malloc_lock>
 800c9c0:	4a1c      	ldr	r2, [pc, #112]	; (800ca34 <_free_r+0x8c>)
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	b933      	cbnz	r3, 800c9d4 <_free_r+0x2c>
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d0:	f000 ba94 	b.w	800cefc <__malloc_unlock>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d908      	bls.n	800c9ea <_free_r+0x42>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	1821      	adds	r1, r4, r0
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf01      	itttt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	1809      	addeq	r1, r1, r0
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	e7ed      	b.n	800c9c6 <_free_r+0x1e>
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	b10b      	cbz	r3, 800c9f4 <_free_r+0x4c>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d9fa      	bls.n	800c9ea <_free_r+0x42>
 800c9f4:	6811      	ldr	r1, [r2, #0]
 800c9f6:	1850      	adds	r0, r2, r1
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d10b      	bne.n	800ca14 <_free_r+0x6c>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	4401      	add	r1, r0
 800ca00:	1850      	adds	r0, r2, r1
 800ca02:	4283      	cmp	r3, r0
 800ca04:	6011      	str	r1, [r2, #0]
 800ca06:	d1e0      	bne.n	800c9ca <_free_r+0x22>
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	4401      	add	r1, r0
 800ca0e:	6011      	str	r1, [r2, #0]
 800ca10:	6053      	str	r3, [r2, #4]
 800ca12:	e7da      	b.n	800c9ca <_free_r+0x22>
 800ca14:	d902      	bls.n	800ca1c <_free_r+0x74>
 800ca16:	230c      	movs	r3, #12
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	e7d6      	b.n	800c9ca <_free_r+0x22>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	1821      	adds	r1, r4, r0
 800ca20:	428b      	cmp	r3, r1
 800ca22:	bf01      	itttt	eq
 800ca24:	6819      	ldreq	r1, [r3, #0]
 800ca26:	685b      	ldreq	r3, [r3, #4]
 800ca28:	1809      	addeq	r1, r1, r0
 800ca2a:	6021      	streq	r1, [r4, #0]
 800ca2c:	6063      	str	r3, [r4, #4]
 800ca2e:	6054      	str	r4, [r2, #4]
 800ca30:	e7cb      	b.n	800c9ca <_free_r+0x22>
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	2000165c 	.word	0x2000165c

0800ca38 <sbrk_aligned>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	4e0e      	ldr	r6, [pc, #56]	; (800ca74 <sbrk_aligned+0x3c>)
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	6831      	ldr	r1, [r6, #0]
 800ca40:	4605      	mov	r5, r0
 800ca42:	b911      	cbnz	r1, 800ca4a <sbrk_aligned+0x12>
 800ca44:	f000 f9e8 	bl	800ce18 <_sbrk_r>
 800ca48:	6030      	str	r0, [r6, #0]
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 f9e3 	bl	800ce18 <_sbrk_r>
 800ca52:	1c43      	adds	r3, r0, #1
 800ca54:	d00a      	beq.n	800ca6c <sbrk_aligned+0x34>
 800ca56:	1cc4      	adds	r4, r0, #3
 800ca58:	f024 0403 	bic.w	r4, r4, #3
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d007      	beq.n	800ca70 <sbrk_aligned+0x38>
 800ca60:	1a21      	subs	r1, r4, r0
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 f9d8 	bl	800ce18 <_sbrk_r>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d101      	bne.n	800ca70 <sbrk_aligned+0x38>
 800ca6c:	f04f 34ff 	mov.w	r4, #4294967295
 800ca70:	4620      	mov	r0, r4
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	20001660 	.word	0x20001660

0800ca78 <_malloc_r>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	1ccd      	adds	r5, r1, #3
 800ca7e:	f025 0503 	bic.w	r5, r5, #3
 800ca82:	3508      	adds	r5, #8
 800ca84:	2d0c      	cmp	r5, #12
 800ca86:	bf38      	it	cc
 800ca88:	250c      	movcc	r5, #12
 800ca8a:	2d00      	cmp	r5, #0
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	db01      	blt.n	800ca94 <_malloc_r+0x1c>
 800ca90:	42a9      	cmp	r1, r5
 800ca92:	d905      	bls.n	800caa0 <_malloc_r+0x28>
 800ca94:	230c      	movs	r3, #12
 800ca96:	2600      	movs	r6, #0
 800ca98:	603b      	str	r3, [r7, #0]
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	4e2e      	ldr	r6, [pc, #184]	; (800cb5c <_malloc_r+0xe4>)
 800caa2:	f000 fa25 	bl	800cef0 <__malloc_lock>
 800caa6:	6833      	ldr	r3, [r6, #0]
 800caa8:	461c      	mov	r4, r3
 800caaa:	bb34      	cbnz	r4, 800cafa <_malloc_r+0x82>
 800caac:	4629      	mov	r1, r5
 800caae:	4638      	mov	r0, r7
 800cab0:	f7ff ffc2 	bl	800ca38 <sbrk_aligned>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	4604      	mov	r4, r0
 800cab8:	d14d      	bne.n	800cb56 <_malloc_r+0xde>
 800caba:	6834      	ldr	r4, [r6, #0]
 800cabc:	4626      	mov	r6, r4
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d140      	bne.n	800cb44 <_malloc_r+0xcc>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	4631      	mov	r1, r6
 800cac6:	4638      	mov	r0, r7
 800cac8:	eb04 0803 	add.w	r8, r4, r3
 800cacc:	f000 f9a4 	bl	800ce18 <_sbrk_r>
 800cad0:	4580      	cmp	r8, r0
 800cad2:	d13a      	bne.n	800cb4a <_malloc_r+0xd2>
 800cad4:	6821      	ldr	r1, [r4, #0]
 800cad6:	3503      	adds	r5, #3
 800cad8:	1a6d      	subs	r5, r5, r1
 800cada:	f025 0503 	bic.w	r5, r5, #3
 800cade:	3508      	adds	r5, #8
 800cae0:	2d0c      	cmp	r5, #12
 800cae2:	bf38      	it	cc
 800cae4:	250c      	movcc	r5, #12
 800cae6:	4638      	mov	r0, r7
 800cae8:	4629      	mov	r1, r5
 800caea:	f7ff ffa5 	bl	800ca38 <sbrk_aligned>
 800caee:	3001      	adds	r0, #1
 800caf0:	d02b      	beq.n	800cb4a <_malloc_r+0xd2>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	442b      	add	r3, r5
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	e00e      	b.n	800cb18 <_malloc_r+0xa0>
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	1b52      	subs	r2, r2, r5
 800cafe:	d41e      	bmi.n	800cb3e <_malloc_r+0xc6>
 800cb00:	2a0b      	cmp	r2, #11
 800cb02:	d916      	bls.n	800cb32 <_malloc_r+0xba>
 800cb04:	1961      	adds	r1, r4, r5
 800cb06:	42a3      	cmp	r3, r4
 800cb08:	6025      	str	r5, [r4, #0]
 800cb0a:	bf18      	it	ne
 800cb0c:	6059      	strne	r1, [r3, #4]
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	bf08      	it	eq
 800cb12:	6031      	streq	r1, [r6, #0]
 800cb14:	5162      	str	r2, [r4, r5]
 800cb16:	604b      	str	r3, [r1, #4]
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f104 060b 	add.w	r6, r4, #11
 800cb1e:	f000 f9ed 	bl	800cefc <__malloc_unlock>
 800cb22:	f026 0607 	bic.w	r6, r6, #7
 800cb26:	1d23      	adds	r3, r4, #4
 800cb28:	1af2      	subs	r2, r6, r3
 800cb2a:	d0b6      	beq.n	800ca9a <_malloc_r+0x22>
 800cb2c:	1b9b      	subs	r3, r3, r6
 800cb2e:	50a3      	str	r3, [r4, r2]
 800cb30:	e7b3      	b.n	800ca9a <_malloc_r+0x22>
 800cb32:	6862      	ldr	r2, [r4, #4]
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	bf0c      	ite	eq
 800cb38:	6032      	streq	r2, [r6, #0]
 800cb3a:	605a      	strne	r2, [r3, #4]
 800cb3c:	e7ec      	b.n	800cb18 <_malloc_r+0xa0>
 800cb3e:	4623      	mov	r3, r4
 800cb40:	6864      	ldr	r4, [r4, #4]
 800cb42:	e7b2      	b.n	800caaa <_malloc_r+0x32>
 800cb44:	4634      	mov	r4, r6
 800cb46:	6876      	ldr	r6, [r6, #4]
 800cb48:	e7b9      	b.n	800cabe <_malloc_r+0x46>
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	603b      	str	r3, [r7, #0]
 800cb50:	f000 f9d4 	bl	800cefc <__malloc_unlock>
 800cb54:	e7a1      	b.n	800ca9a <_malloc_r+0x22>
 800cb56:	6025      	str	r5, [r4, #0]
 800cb58:	e7de      	b.n	800cb18 <_malloc_r+0xa0>
 800cb5a:	bf00      	nop
 800cb5c:	2000165c 	.word	0x2000165c

0800cb60 <__ssputs_r>:
 800cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb64:	688e      	ldr	r6, [r1, #8]
 800cb66:	4682      	mov	sl, r0
 800cb68:	429e      	cmp	r6, r3
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4690      	mov	r8, r2
 800cb6e:	461f      	mov	r7, r3
 800cb70:	d838      	bhi.n	800cbe4 <__ssputs_r+0x84>
 800cb72:	898a      	ldrh	r2, [r1, #12]
 800cb74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb78:	d032      	beq.n	800cbe0 <__ssputs_r+0x80>
 800cb7a:	6825      	ldr	r5, [r4, #0]
 800cb7c:	6909      	ldr	r1, [r1, #16]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	eba5 0901 	sub.w	r9, r5, r1
 800cb84:	6965      	ldr	r5, [r4, #20]
 800cb86:	444b      	add	r3, r9
 800cb88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb90:	106d      	asrs	r5, r5, #1
 800cb92:	429d      	cmp	r5, r3
 800cb94:	bf38      	it	cc
 800cb96:	461d      	movcc	r5, r3
 800cb98:	0553      	lsls	r3, r2, #21
 800cb9a:	d531      	bpl.n	800cc00 <__ssputs_r+0xa0>
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f7ff ff6b 	bl	800ca78 <_malloc_r>
 800cba2:	4606      	mov	r6, r0
 800cba4:	b950      	cbnz	r0, 800cbbc <__ssputs_r+0x5c>
 800cba6:	230c      	movs	r3, #12
 800cba8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbac:	f8ca 3000 	str.w	r3, [sl]
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbbc:	464a      	mov	r2, r9
 800cbbe:	6921      	ldr	r1, [r4, #16]
 800cbc0:	f7ff fb4e 	bl	800c260 <memcpy>
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	6126      	str	r6, [r4, #16]
 800cbd2:	444e      	add	r6, r9
 800cbd4:	6026      	str	r6, [r4, #0]
 800cbd6:	463e      	mov	r6, r7
 800cbd8:	6165      	str	r5, [r4, #20]
 800cbda:	eba5 0509 	sub.w	r5, r5, r9
 800cbde:	60a5      	str	r5, [r4, #8]
 800cbe0:	42be      	cmp	r6, r7
 800cbe2:	d900      	bls.n	800cbe6 <__ssputs_r+0x86>
 800cbe4:	463e      	mov	r6, r7
 800cbe6:	4632      	mov	r2, r6
 800cbe8:	4641      	mov	r1, r8
 800cbea:	6820      	ldr	r0, [r4, #0]
 800cbec:	f000 f966 	bl	800cebc <memmove>
 800cbf0:	68a3      	ldr	r3, [r4, #8]
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	1b9b      	subs	r3, r3, r6
 800cbf6:	60a3      	str	r3, [r4, #8]
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	4433      	add	r3, r6
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	e7db      	b.n	800cbb8 <__ssputs_r+0x58>
 800cc00:	462a      	mov	r2, r5
 800cc02:	f000 f981 	bl	800cf08 <_realloc_r>
 800cc06:	4606      	mov	r6, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d1e1      	bne.n	800cbd0 <__ssputs_r+0x70>
 800cc0c:	4650      	mov	r0, sl
 800cc0e:	6921      	ldr	r1, [r4, #16]
 800cc10:	f7ff feca 	bl	800c9a8 <_free_r>
 800cc14:	e7c7      	b.n	800cba6 <__ssputs_r+0x46>
	...

0800cc18 <_svfiprintf_r>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	4698      	mov	r8, r3
 800cc1e:	898b      	ldrh	r3, [r1, #12]
 800cc20:	4607      	mov	r7, r0
 800cc22:	061b      	lsls	r3, r3, #24
 800cc24:	460d      	mov	r5, r1
 800cc26:	4614      	mov	r4, r2
 800cc28:	b09d      	sub	sp, #116	; 0x74
 800cc2a:	d50e      	bpl.n	800cc4a <_svfiprintf_r+0x32>
 800cc2c:	690b      	ldr	r3, [r1, #16]
 800cc2e:	b963      	cbnz	r3, 800cc4a <_svfiprintf_r+0x32>
 800cc30:	2140      	movs	r1, #64	; 0x40
 800cc32:	f7ff ff21 	bl	800ca78 <_malloc_r>
 800cc36:	6028      	str	r0, [r5, #0]
 800cc38:	6128      	str	r0, [r5, #16]
 800cc3a:	b920      	cbnz	r0, 800cc46 <_svfiprintf_r+0x2e>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295
 800cc44:	e0d1      	b.n	800cdea <_svfiprintf_r+0x1d2>
 800cc46:	2340      	movs	r3, #64	; 0x40
 800cc48:	616b      	str	r3, [r5, #20]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4e:	2320      	movs	r3, #32
 800cc50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc54:	2330      	movs	r3, #48	; 0x30
 800cc56:	f04f 0901 	mov.w	r9, #1
 800cc5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce04 <_svfiprintf_r+0x1ec>
 800cc62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc66:	4623      	mov	r3, r4
 800cc68:	469a      	mov	sl, r3
 800cc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc6e:	b10a      	cbz	r2, 800cc74 <_svfiprintf_r+0x5c>
 800cc70:	2a25      	cmp	r2, #37	; 0x25
 800cc72:	d1f9      	bne.n	800cc68 <_svfiprintf_r+0x50>
 800cc74:	ebba 0b04 	subs.w	fp, sl, r4
 800cc78:	d00b      	beq.n	800cc92 <_svfiprintf_r+0x7a>
 800cc7a:	465b      	mov	r3, fp
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4629      	mov	r1, r5
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7ff ff6d 	bl	800cb60 <__ssputs_r>
 800cc86:	3001      	adds	r0, #1
 800cc88:	f000 80aa 	beq.w	800cde0 <_svfiprintf_r+0x1c8>
 800cc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc8e:	445a      	add	r2, fp
 800cc90:	9209      	str	r2, [sp, #36]	; 0x24
 800cc92:	f89a 3000 	ldrb.w	r3, [sl]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 80a2 	beq.w	800cde0 <_svfiprintf_r+0x1c8>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca6:	f10a 0a01 	add.w	sl, sl, #1
 800ccaa:	9304      	str	r3, [sp, #16]
 800ccac:	9307      	str	r3, [sp, #28]
 800ccae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccb2:	931a      	str	r3, [sp, #104]	; 0x68
 800ccb4:	4654      	mov	r4, sl
 800ccb6:	2205      	movs	r2, #5
 800ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbc:	4851      	ldr	r0, [pc, #324]	; (800ce04 <_svfiprintf_r+0x1ec>)
 800ccbe:	f7ff fac1 	bl	800c244 <memchr>
 800ccc2:	9a04      	ldr	r2, [sp, #16]
 800ccc4:	b9d8      	cbnz	r0, 800ccfe <_svfiprintf_r+0xe6>
 800ccc6:	06d0      	lsls	r0, r2, #27
 800ccc8:	bf44      	itt	mi
 800ccca:	2320      	movmi	r3, #32
 800cccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd0:	0711      	lsls	r1, r2, #28
 800ccd2:	bf44      	itt	mi
 800ccd4:	232b      	movmi	r3, #43	; 0x2b
 800ccd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccda:	f89a 3000 	ldrb.w	r3, [sl]
 800ccde:	2b2a      	cmp	r3, #42	; 0x2a
 800cce0:	d015      	beq.n	800cd0e <_svfiprintf_r+0xf6>
 800cce2:	4654      	mov	r4, sl
 800cce4:	2000      	movs	r0, #0
 800cce6:	f04f 0c0a 	mov.w	ip, #10
 800ccea:	9a07      	ldr	r2, [sp, #28]
 800ccec:	4621      	mov	r1, r4
 800ccee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccf2:	3b30      	subs	r3, #48	; 0x30
 800ccf4:	2b09      	cmp	r3, #9
 800ccf6:	d94e      	bls.n	800cd96 <_svfiprintf_r+0x17e>
 800ccf8:	b1b0      	cbz	r0, 800cd28 <_svfiprintf_r+0x110>
 800ccfa:	9207      	str	r2, [sp, #28]
 800ccfc:	e014      	b.n	800cd28 <_svfiprintf_r+0x110>
 800ccfe:	eba0 0308 	sub.w	r3, r0, r8
 800cd02:	fa09 f303 	lsl.w	r3, r9, r3
 800cd06:	4313      	orrs	r3, r2
 800cd08:	46a2      	mov	sl, r4
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	e7d2      	b.n	800ccb4 <_svfiprintf_r+0x9c>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	1d19      	adds	r1, r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	9103      	str	r1, [sp, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfbb      	ittet	lt
 800cd1a:	425b      	neglt	r3, r3
 800cd1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd20:	9307      	strge	r3, [sp, #28]
 800cd22:	9307      	strlt	r3, [sp, #28]
 800cd24:	bfb8      	it	lt
 800cd26:	9204      	strlt	r2, [sp, #16]
 800cd28:	7823      	ldrb	r3, [r4, #0]
 800cd2a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd2c:	d10c      	bne.n	800cd48 <_svfiprintf_r+0x130>
 800cd2e:	7863      	ldrb	r3, [r4, #1]
 800cd30:	2b2a      	cmp	r3, #42	; 0x2a
 800cd32:	d135      	bne.n	800cda0 <_svfiprintf_r+0x188>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	3402      	adds	r4, #2
 800cd38:	1d1a      	adds	r2, r3, #4
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	9203      	str	r2, [sp, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	bfb8      	it	lt
 800cd42:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd46:	9305      	str	r3, [sp, #20]
 800cd48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ce08 <_svfiprintf_r+0x1f0>
 800cd4c:	2203      	movs	r2, #3
 800cd4e:	4650      	mov	r0, sl
 800cd50:	7821      	ldrb	r1, [r4, #0]
 800cd52:	f7ff fa77 	bl	800c244 <memchr>
 800cd56:	b140      	cbz	r0, 800cd6a <_svfiprintf_r+0x152>
 800cd58:	2340      	movs	r3, #64	; 0x40
 800cd5a:	eba0 000a 	sub.w	r0, r0, sl
 800cd5e:	fa03 f000 	lsl.w	r0, r3, r0
 800cd62:	9b04      	ldr	r3, [sp, #16]
 800cd64:	3401      	adds	r4, #1
 800cd66:	4303      	orrs	r3, r0
 800cd68:	9304      	str	r3, [sp, #16]
 800cd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6e:	2206      	movs	r2, #6
 800cd70:	4826      	ldr	r0, [pc, #152]	; (800ce0c <_svfiprintf_r+0x1f4>)
 800cd72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd76:	f7ff fa65 	bl	800c244 <memchr>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d038      	beq.n	800cdf0 <_svfiprintf_r+0x1d8>
 800cd7e:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <_svfiprintf_r+0x1f8>)
 800cd80:	bb1b      	cbnz	r3, 800cdca <_svfiprintf_r+0x1b2>
 800cd82:	9b03      	ldr	r3, [sp, #12]
 800cd84:	3307      	adds	r3, #7
 800cd86:	f023 0307 	bic.w	r3, r3, #7
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	9303      	str	r3, [sp, #12]
 800cd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd90:	4433      	add	r3, r6
 800cd92:	9309      	str	r3, [sp, #36]	; 0x24
 800cd94:	e767      	b.n	800cc66 <_svfiprintf_r+0x4e>
 800cd96:	460c      	mov	r4, r1
 800cd98:	2001      	movs	r0, #1
 800cd9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd9e:	e7a5      	b.n	800ccec <_svfiprintf_r+0xd4>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f04f 0c0a 	mov.w	ip, #10
 800cda6:	4619      	mov	r1, r3
 800cda8:	3401      	adds	r4, #1
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	4620      	mov	r0, r4
 800cdae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdb2:	3a30      	subs	r2, #48	; 0x30
 800cdb4:	2a09      	cmp	r2, #9
 800cdb6:	d903      	bls.n	800cdc0 <_svfiprintf_r+0x1a8>
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0c5      	beq.n	800cd48 <_svfiprintf_r+0x130>
 800cdbc:	9105      	str	r1, [sp, #20]
 800cdbe:	e7c3      	b.n	800cd48 <_svfiprintf_r+0x130>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdc8:	e7f0      	b.n	800cdac <_svfiprintf_r+0x194>
 800cdca:	ab03      	add	r3, sp, #12
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	462a      	mov	r2, r5
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <_svfiprintf_r+0x1fc>)
 800cdd4:	a904      	add	r1, sp, #16
 800cdd6:	f7fd ffcd 	bl	800ad74 <_printf_float>
 800cdda:	1c42      	adds	r2, r0, #1
 800cddc:	4606      	mov	r6, r0
 800cdde:	d1d6      	bne.n	800cd8e <_svfiprintf_r+0x176>
 800cde0:	89ab      	ldrh	r3, [r5, #12]
 800cde2:	065b      	lsls	r3, r3, #25
 800cde4:	f53f af2c 	bmi.w	800cc40 <_svfiprintf_r+0x28>
 800cde8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdea:	b01d      	add	sp, #116	; 0x74
 800cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf0:	ab03      	add	r3, sp, #12
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	462a      	mov	r2, r5
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <_svfiprintf_r+0x1fc>)
 800cdfa:	a904      	add	r1, sp, #16
 800cdfc:	f7fe fa56 	bl	800b2ac <_printf_i>
 800ce00:	e7eb      	b.n	800cdda <_svfiprintf_r+0x1c2>
 800ce02:	bf00      	nop
 800ce04:	0800efbc 	.word	0x0800efbc
 800ce08:	0800efc2 	.word	0x0800efc2
 800ce0c:	0800efc6 	.word	0x0800efc6
 800ce10:	0800ad75 	.word	0x0800ad75
 800ce14:	0800cb61 	.word	0x0800cb61

0800ce18 <_sbrk_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	4d05      	ldr	r5, [pc, #20]	; (800ce34 <_sbrk_r+0x1c>)
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	f7f4 ff94 	bl	8001d50 <_sbrk>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_sbrk_r+0x1a>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_sbrk_r+0x1a>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	20001664 	.word	0x20001664

0800ce38 <__assert_func>:
 800ce38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce3a:	4614      	mov	r4, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <__assert_func+0x2c>)
 800ce40:	4605      	mov	r5, r0
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68d8      	ldr	r0, [r3, #12]
 800ce46:	b14c      	cbz	r4, 800ce5c <__assert_func+0x24>
 800ce48:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <__assert_func+0x30>)
 800ce4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce4e:	9100      	str	r1, [sp, #0]
 800ce50:	462b      	mov	r3, r5
 800ce52:	4906      	ldr	r1, [pc, #24]	; (800ce6c <__assert_func+0x34>)
 800ce54:	f000 f80e 	bl	800ce74 <fiprintf>
 800ce58:	f000 faaa 	bl	800d3b0 <abort>
 800ce5c:	4b04      	ldr	r3, [pc, #16]	; (800ce70 <__assert_func+0x38>)
 800ce5e:	461c      	mov	r4, r3
 800ce60:	e7f3      	b.n	800ce4a <__assert_func+0x12>
 800ce62:	bf00      	nop
 800ce64:	20000184 	.word	0x20000184
 800ce68:	0800efcd 	.word	0x0800efcd
 800ce6c:	0800efda 	.word	0x0800efda
 800ce70:	0800f008 	.word	0x0800f008

0800ce74 <fiprintf>:
 800ce74:	b40e      	push	{r1, r2, r3}
 800ce76:	b503      	push	{r0, r1, lr}
 800ce78:	4601      	mov	r1, r0
 800ce7a:	ab03      	add	r3, sp, #12
 800ce7c:	4805      	ldr	r0, [pc, #20]	; (800ce94 <fiprintf+0x20>)
 800ce7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce82:	6800      	ldr	r0, [r0, #0]
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	f000 f895 	bl	800cfb4 <_vfiprintf_r>
 800ce8a:	b002      	add	sp, #8
 800ce8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce90:	b003      	add	sp, #12
 800ce92:	4770      	bx	lr
 800ce94:	20000184 	.word	0x20000184

0800ce98 <__ascii_mbtowc>:
 800ce98:	b082      	sub	sp, #8
 800ce9a:	b901      	cbnz	r1, 800ce9e <__ascii_mbtowc+0x6>
 800ce9c:	a901      	add	r1, sp, #4
 800ce9e:	b142      	cbz	r2, 800ceb2 <__ascii_mbtowc+0x1a>
 800cea0:	b14b      	cbz	r3, 800ceb6 <__ascii_mbtowc+0x1e>
 800cea2:	7813      	ldrb	r3, [r2, #0]
 800cea4:	600b      	str	r3, [r1, #0]
 800cea6:	7812      	ldrb	r2, [r2, #0]
 800cea8:	1e10      	subs	r0, r2, #0
 800ceaa:	bf18      	it	ne
 800ceac:	2001      	movne	r0, #1
 800ceae:	b002      	add	sp, #8
 800ceb0:	4770      	bx	lr
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	e7fb      	b.n	800ceae <__ascii_mbtowc+0x16>
 800ceb6:	f06f 0001 	mvn.w	r0, #1
 800ceba:	e7f8      	b.n	800ceae <__ascii_mbtowc+0x16>

0800cebc <memmove>:
 800cebc:	4288      	cmp	r0, r1
 800cebe:	b510      	push	{r4, lr}
 800cec0:	eb01 0402 	add.w	r4, r1, r2
 800cec4:	d902      	bls.n	800cecc <memmove+0x10>
 800cec6:	4284      	cmp	r4, r0
 800cec8:	4623      	mov	r3, r4
 800ceca:	d807      	bhi.n	800cedc <memmove+0x20>
 800cecc:	1e43      	subs	r3, r0, #1
 800cece:	42a1      	cmp	r1, r4
 800ced0:	d008      	beq.n	800cee4 <memmove+0x28>
 800ced2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceda:	e7f8      	b.n	800cece <memmove+0x12>
 800cedc:	4601      	mov	r1, r0
 800cede:	4402      	add	r2, r0
 800cee0:	428a      	cmp	r2, r1
 800cee2:	d100      	bne.n	800cee6 <memmove+0x2a>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceee:	e7f7      	b.n	800cee0 <memmove+0x24>

0800cef0 <__malloc_lock>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__malloc_lock+0x8>)
 800cef2:	f000 bc19 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	20001668 	.word	0x20001668

0800cefc <__malloc_unlock>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__malloc_unlock+0x8>)
 800cefe:	f000 bc14 	b.w	800d72a <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	20001668 	.word	0x20001668

0800cf08 <_realloc_r>:
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	4614      	mov	r4, r2
 800cf10:	460e      	mov	r6, r1
 800cf12:	b921      	cbnz	r1, 800cf1e <_realloc_r+0x16>
 800cf14:	4611      	mov	r1, r2
 800cf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1a:	f7ff bdad 	b.w	800ca78 <_malloc_r>
 800cf1e:	b92a      	cbnz	r2, 800cf2c <_realloc_r+0x24>
 800cf20:	f7ff fd42 	bl	800c9a8 <_free_r>
 800cf24:	4625      	mov	r5, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	f000 fc64 	bl	800d7f8 <_malloc_usable_size_r>
 800cf30:	4284      	cmp	r4, r0
 800cf32:	4607      	mov	r7, r0
 800cf34:	d802      	bhi.n	800cf3c <_realloc_r+0x34>
 800cf36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3a:	d812      	bhi.n	800cf62 <_realloc_r+0x5a>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4640      	mov	r0, r8
 800cf40:	f7ff fd9a 	bl	800ca78 <_malloc_r>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d0ed      	beq.n	800cf26 <_realloc_r+0x1e>
 800cf4a:	42bc      	cmp	r4, r7
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4631      	mov	r1, r6
 800cf50:	bf28      	it	cs
 800cf52:	463a      	movcs	r2, r7
 800cf54:	f7ff f984 	bl	800c260 <memcpy>
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff fd24 	bl	800c9a8 <_free_r>
 800cf60:	e7e1      	b.n	800cf26 <_realloc_r+0x1e>
 800cf62:	4635      	mov	r5, r6
 800cf64:	e7df      	b.n	800cf26 <_realloc_r+0x1e>

0800cf66 <__sfputc_r>:
 800cf66:	6893      	ldr	r3, [r2, #8]
 800cf68:	b410      	push	{r4}
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	6093      	str	r3, [r2, #8]
 800cf70:	da07      	bge.n	800cf82 <__sfputc_r+0x1c>
 800cf72:	6994      	ldr	r4, [r2, #24]
 800cf74:	42a3      	cmp	r3, r4
 800cf76:	db01      	blt.n	800cf7c <__sfputc_r+0x16>
 800cf78:	290a      	cmp	r1, #10
 800cf7a:	d102      	bne.n	800cf82 <__sfputc_r+0x1c>
 800cf7c:	bc10      	pop	{r4}
 800cf7e:	f000 b949 	b.w	800d214 <__swbuf_r>
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	1c58      	adds	r0, r3, #1
 800cf86:	6010      	str	r0, [r2, #0]
 800cf88:	7019      	strb	r1, [r3, #0]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	bc10      	pop	{r4}
 800cf8e:	4770      	bx	lr

0800cf90 <__sfputs_r>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	4614      	mov	r4, r2
 800cf98:	18d5      	adds	r5, r2, r3
 800cf9a:	42ac      	cmp	r4, r5
 800cf9c:	d101      	bne.n	800cfa2 <__sfputs_r+0x12>
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e007      	b.n	800cfb2 <__sfputs_r+0x22>
 800cfa2:	463a      	mov	r2, r7
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfaa:	f7ff ffdc 	bl	800cf66 <__sfputc_r>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	d1f3      	bne.n	800cf9a <__sfputs_r+0xa>
 800cfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfb4 <_vfiprintf_r>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	460d      	mov	r5, r1
 800cfba:	4614      	mov	r4, r2
 800cfbc:	4698      	mov	r8, r3
 800cfbe:	4606      	mov	r6, r0
 800cfc0:	b09d      	sub	sp, #116	; 0x74
 800cfc2:	b118      	cbz	r0, 800cfcc <_vfiprintf_r+0x18>
 800cfc4:	6983      	ldr	r3, [r0, #24]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <_vfiprintf_r+0x18>
 800cfc8:	f000 fb10 	bl	800d5ec <__sinit>
 800cfcc:	4b89      	ldr	r3, [pc, #548]	; (800d1f4 <_vfiprintf_r+0x240>)
 800cfce:	429d      	cmp	r5, r3
 800cfd0:	d11b      	bne.n	800d00a <_vfiprintf_r+0x56>
 800cfd2:	6875      	ldr	r5, [r6, #4]
 800cfd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d405      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_vfiprintf_r+0x32>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe2:	f000 fba1 	bl	800d728 <__retarget_lock_acquire_recursive>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	071b      	lsls	r3, r3, #28
 800cfea:	d501      	bpl.n	800cff0 <_vfiprintf_r+0x3c>
 800cfec:	692b      	ldr	r3, [r5, #16]
 800cfee:	b9eb      	cbnz	r3, 800d02c <_vfiprintf_r+0x78>
 800cff0:	4629      	mov	r1, r5
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f96e 	bl	800d2d4 <__swsetup_r>
 800cff8:	b1c0      	cbz	r0, 800d02c <_vfiprintf_r+0x78>
 800cffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cffc:	07dc      	lsls	r4, r3, #31
 800cffe:	d50e      	bpl.n	800d01e <_vfiprintf_r+0x6a>
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	b01d      	add	sp, #116	; 0x74
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	4b7b      	ldr	r3, [pc, #492]	; (800d1f8 <_vfiprintf_r+0x244>)
 800d00c:	429d      	cmp	r5, r3
 800d00e:	d101      	bne.n	800d014 <_vfiprintf_r+0x60>
 800d010:	68b5      	ldr	r5, [r6, #8]
 800d012:	e7df      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d014:	4b79      	ldr	r3, [pc, #484]	; (800d1fc <_vfiprintf_r+0x248>)
 800d016:	429d      	cmp	r5, r3
 800d018:	bf08      	it	eq
 800d01a:	68f5      	ldreq	r5, [r6, #12]
 800d01c:	e7da      	b.n	800cfd4 <_vfiprintf_r+0x20>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	0598      	lsls	r0, r3, #22
 800d022:	d4ed      	bmi.n	800d000 <_vfiprintf_r+0x4c>
 800d024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d026:	f000 fb80 	bl	800d72a <__retarget_lock_release_recursive>
 800d02a:	e7e9      	b.n	800d000 <_vfiprintf_r+0x4c>
 800d02c:	2300      	movs	r3, #0
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	2320      	movs	r3, #32
 800d032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d036:	2330      	movs	r3, #48	; 0x30
 800d038:	f04f 0901 	mov.w	r9, #1
 800d03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d040:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d200 <_vfiprintf_r+0x24c>
 800d044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d048:	4623      	mov	r3, r4
 800d04a:	469a      	mov	sl, r3
 800d04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d050:	b10a      	cbz	r2, 800d056 <_vfiprintf_r+0xa2>
 800d052:	2a25      	cmp	r2, #37	; 0x25
 800d054:	d1f9      	bne.n	800d04a <_vfiprintf_r+0x96>
 800d056:	ebba 0b04 	subs.w	fp, sl, r4
 800d05a:	d00b      	beq.n	800d074 <_vfiprintf_r+0xc0>
 800d05c:	465b      	mov	r3, fp
 800d05e:	4622      	mov	r2, r4
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ff94 	bl	800cf90 <__sfputs_r>
 800d068:	3001      	adds	r0, #1
 800d06a:	f000 80aa 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d070:	445a      	add	r2, fp
 800d072:	9209      	str	r2, [sp, #36]	; 0x24
 800d074:	f89a 3000 	ldrb.w	r3, [sl]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80a2 	beq.w	800d1c2 <_vfiprintf_r+0x20e>
 800d07e:	2300      	movs	r3, #0
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d088:	f10a 0a01 	add.w	sl, sl, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	9307      	str	r3, [sp, #28]
 800d090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d094:	931a      	str	r3, [sp, #104]	; 0x68
 800d096:	4654      	mov	r4, sl
 800d098:	2205      	movs	r2, #5
 800d09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09e:	4858      	ldr	r0, [pc, #352]	; (800d200 <_vfiprintf_r+0x24c>)
 800d0a0:	f7ff f8d0 	bl	800c244 <memchr>
 800d0a4:	9a04      	ldr	r2, [sp, #16]
 800d0a6:	b9d8      	cbnz	r0, 800d0e0 <_vfiprintf_r+0x12c>
 800d0a8:	06d1      	lsls	r1, r2, #27
 800d0aa:	bf44      	itt	mi
 800d0ac:	2320      	movmi	r3, #32
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	0713      	lsls	r3, r2, #28
 800d0b4:	bf44      	itt	mi
 800d0b6:	232b      	movmi	r3, #43	; 0x2b
 800d0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c2:	d015      	beq.n	800d0f0 <_vfiprintf_r+0x13c>
 800d0c4:	4654      	mov	r4, sl
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f04f 0c0a 	mov.w	ip, #10
 800d0cc:	9a07      	ldr	r2, [sp, #28]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d4:	3b30      	subs	r3, #48	; 0x30
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	d94e      	bls.n	800d178 <_vfiprintf_r+0x1c4>
 800d0da:	b1b0      	cbz	r0, 800d10a <_vfiprintf_r+0x156>
 800d0dc:	9207      	str	r2, [sp, #28]
 800d0de:	e014      	b.n	800d10a <_vfiprintf_r+0x156>
 800d0e0:	eba0 0308 	sub.w	r3, r0, r8
 800d0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	46a2      	mov	sl, r4
 800d0ec:	9304      	str	r3, [sp, #16]
 800d0ee:	e7d2      	b.n	800d096 <_vfiprintf_r+0xe2>
 800d0f0:	9b03      	ldr	r3, [sp, #12]
 800d0f2:	1d19      	adds	r1, r3, #4
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	9103      	str	r1, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfbb      	ittet	lt
 800d0fc:	425b      	neglt	r3, r3
 800d0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d102:	9307      	strge	r3, [sp, #28]
 800d104:	9307      	strlt	r3, [sp, #28]
 800d106:	bfb8      	it	lt
 800d108:	9204      	strlt	r2, [sp, #16]
 800d10a:	7823      	ldrb	r3, [r4, #0]
 800d10c:	2b2e      	cmp	r3, #46	; 0x2e
 800d10e:	d10c      	bne.n	800d12a <_vfiprintf_r+0x176>
 800d110:	7863      	ldrb	r3, [r4, #1]
 800d112:	2b2a      	cmp	r3, #42	; 0x2a
 800d114:	d135      	bne.n	800d182 <_vfiprintf_r+0x1ce>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	3402      	adds	r4, #2
 800d11a:	1d1a      	adds	r2, r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9203      	str	r2, [sp, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfb8      	it	lt
 800d124:	f04f 33ff 	movlt.w	r3, #4294967295
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d204 <_vfiprintf_r+0x250>
 800d12e:	2203      	movs	r2, #3
 800d130:	4650      	mov	r0, sl
 800d132:	7821      	ldrb	r1, [r4, #0]
 800d134:	f7ff f886 	bl	800c244 <memchr>
 800d138:	b140      	cbz	r0, 800d14c <_vfiprintf_r+0x198>
 800d13a:	2340      	movs	r3, #64	; 0x40
 800d13c:	eba0 000a 	sub.w	r0, r0, sl
 800d140:	fa03 f000 	lsl.w	r0, r3, r0
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	3401      	adds	r4, #1
 800d148:	4303      	orrs	r3, r0
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d150:	2206      	movs	r2, #6
 800d152:	482d      	ldr	r0, [pc, #180]	; (800d208 <_vfiprintf_r+0x254>)
 800d154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d158:	f7ff f874 	bl	800c244 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d03f      	beq.n	800d1e0 <_vfiprintf_r+0x22c>
 800d160:	4b2a      	ldr	r3, [pc, #168]	; (800d20c <_vfiprintf_r+0x258>)
 800d162:	bb1b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x1f8>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3307      	adds	r3, #7
 800d168:	f023 0307 	bic.w	r3, r3, #7
 800d16c:	3308      	adds	r3, #8
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	443b      	add	r3, r7
 800d174:	9309      	str	r3, [sp, #36]	; 0x24
 800d176:	e767      	b.n	800d048 <_vfiprintf_r+0x94>
 800d178:	460c      	mov	r4, r1
 800d17a:	2001      	movs	r0, #1
 800d17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d180:	e7a5      	b.n	800d0ce <_vfiprintf_r+0x11a>
 800d182:	2300      	movs	r3, #0
 800d184:	f04f 0c0a 	mov.w	ip, #10
 800d188:	4619      	mov	r1, r3
 800d18a:	3401      	adds	r4, #1
 800d18c:	9305      	str	r3, [sp, #20]
 800d18e:	4620      	mov	r0, r4
 800d190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d194:	3a30      	subs	r2, #48	; 0x30
 800d196:	2a09      	cmp	r2, #9
 800d198:	d903      	bls.n	800d1a2 <_vfiprintf_r+0x1ee>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c5      	beq.n	800d12a <_vfiprintf_r+0x176>
 800d19e:	9105      	str	r1, [sp, #20]
 800d1a0:	e7c3      	b.n	800d12a <_vfiprintf_r+0x176>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1aa:	e7f0      	b.n	800d18e <_vfiprintf_r+0x1da>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	462a      	mov	r2, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4b16      	ldr	r3, [pc, #88]	; (800d210 <_vfiprintf_r+0x25c>)
 800d1b6:	a904      	add	r1, sp, #16
 800d1b8:	f7fd fddc 	bl	800ad74 <_printf_float>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	1c78      	adds	r0, r7, #1
 800d1c0:	d1d6      	bne.n	800d170 <_vfiprintf_r+0x1bc>
 800d1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c4:	07d9      	lsls	r1, r3, #31
 800d1c6:	d405      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1c8:	89ab      	ldrh	r3, [r5, #12]
 800d1ca:	059a      	lsls	r2, r3, #22
 800d1cc:	d402      	bmi.n	800d1d4 <_vfiprintf_r+0x220>
 800d1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d0:	f000 faab 	bl	800d72a <__retarget_lock_release_recursive>
 800d1d4:	89ab      	ldrh	r3, [r5, #12]
 800d1d6:	065b      	lsls	r3, r3, #25
 800d1d8:	f53f af12 	bmi.w	800d000 <_vfiprintf_r+0x4c>
 800d1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1de:	e711      	b.n	800d004 <_vfiprintf_r+0x50>
 800d1e0:	ab03      	add	r3, sp, #12
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <_vfiprintf_r+0x25c>)
 800d1ea:	a904      	add	r1, sp, #16
 800d1ec:	f7fe f85e 	bl	800b2ac <_printf_i>
 800d1f0:	e7e4      	b.n	800d1bc <_vfiprintf_r+0x208>
 800d1f2:	bf00      	nop
 800d1f4:	0800f134 	.word	0x0800f134
 800d1f8:	0800f154 	.word	0x0800f154
 800d1fc:	0800f114 	.word	0x0800f114
 800d200:	0800efbc 	.word	0x0800efbc
 800d204:	0800efc2 	.word	0x0800efc2
 800d208:	0800efc6 	.word	0x0800efc6
 800d20c:	0800ad75 	.word	0x0800ad75
 800d210:	0800cf91 	.word	0x0800cf91

0800d214 <__swbuf_r>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	460e      	mov	r6, r1
 800d218:	4614      	mov	r4, r2
 800d21a:	4605      	mov	r5, r0
 800d21c:	b118      	cbz	r0, 800d226 <__swbuf_r+0x12>
 800d21e:	6983      	ldr	r3, [r0, #24]
 800d220:	b90b      	cbnz	r3, 800d226 <__swbuf_r+0x12>
 800d222:	f000 f9e3 	bl	800d5ec <__sinit>
 800d226:	4b21      	ldr	r3, [pc, #132]	; (800d2ac <__swbuf_r+0x98>)
 800d228:	429c      	cmp	r4, r3
 800d22a:	d12b      	bne.n	800d284 <__swbuf_r+0x70>
 800d22c:	686c      	ldr	r4, [r5, #4]
 800d22e:	69a3      	ldr	r3, [r4, #24]
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	071a      	lsls	r2, r3, #28
 800d236:	d52f      	bpl.n	800d298 <__swbuf_r+0x84>
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b36b      	cbz	r3, 800d298 <__swbuf_r+0x84>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	6820      	ldr	r0, [r4, #0]
 800d240:	b2f6      	uxtb	r6, r6
 800d242:	1ac0      	subs	r0, r0, r3
 800d244:	6963      	ldr	r3, [r4, #20]
 800d246:	4637      	mov	r7, r6
 800d248:	4283      	cmp	r3, r0
 800d24a:	dc04      	bgt.n	800d256 <__swbuf_r+0x42>
 800d24c:	4621      	mov	r1, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 f938 	bl	800d4c4 <_fflush_r>
 800d254:	bb30      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	3001      	adds	r0, #1
 800d25a:	3b01      	subs	r3, #1
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	6022      	str	r2, [r4, #0]
 800d264:	701e      	strb	r6, [r3, #0]
 800d266:	6963      	ldr	r3, [r4, #20]
 800d268:	4283      	cmp	r3, r0
 800d26a:	d004      	beq.n	800d276 <__swbuf_r+0x62>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	07db      	lsls	r3, r3, #31
 800d270:	d506      	bpl.n	800d280 <__swbuf_r+0x6c>
 800d272:	2e0a      	cmp	r6, #10
 800d274:	d104      	bne.n	800d280 <__swbuf_r+0x6c>
 800d276:	4621      	mov	r1, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f000 f923 	bl	800d4c4 <_fflush_r>
 800d27e:	b988      	cbnz	r0, 800d2a4 <__swbuf_r+0x90>
 800d280:	4638      	mov	r0, r7
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <__swbuf_r+0x9c>)
 800d286:	429c      	cmp	r4, r3
 800d288:	d101      	bne.n	800d28e <__swbuf_r+0x7a>
 800d28a:	68ac      	ldr	r4, [r5, #8]
 800d28c:	e7cf      	b.n	800d22e <__swbuf_r+0x1a>
 800d28e:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <__swbuf_r+0xa0>)
 800d290:	429c      	cmp	r4, r3
 800d292:	bf08      	it	eq
 800d294:	68ec      	ldreq	r4, [r5, #12]
 800d296:	e7ca      	b.n	800d22e <__swbuf_r+0x1a>
 800d298:	4621      	mov	r1, r4
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f81a 	bl	800d2d4 <__swsetup_r>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d0cb      	beq.n	800d23c <__swbuf_r+0x28>
 800d2a4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2a8:	e7ea      	b.n	800d280 <__swbuf_r+0x6c>
 800d2aa:	bf00      	nop
 800d2ac:	0800f134 	.word	0x0800f134
 800d2b0:	0800f154 	.word	0x0800f154
 800d2b4:	0800f114 	.word	0x0800f114

0800d2b8 <__ascii_wctomb>:
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	4608      	mov	r0, r1
 800d2bc:	b141      	cbz	r1, 800d2d0 <__ascii_wctomb+0x18>
 800d2be:	2aff      	cmp	r2, #255	; 0xff
 800d2c0:	d904      	bls.n	800d2cc <__ascii_wctomb+0x14>
 800d2c2:	228a      	movs	r2, #138	; 0x8a
 800d2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	4770      	bx	lr
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	700a      	strb	r2, [r1, #0]
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <__swsetup_r>:
 800d2d4:	4b32      	ldr	r3, [pc, #200]	; (800d3a0 <__swsetup_r+0xcc>)
 800d2d6:	b570      	push	{r4, r5, r6, lr}
 800d2d8:	681d      	ldr	r5, [r3, #0]
 800d2da:	4606      	mov	r6, r0
 800d2dc:	460c      	mov	r4, r1
 800d2de:	b125      	cbz	r5, 800d2ea <__swsetup_r+0x16>
 800d2e0:	69ab      	ldr	r3, [r5, #24]
 800d2e2:	b913      	cbnz	r3, 800d2ea <__swsetup_r+0x16>
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f000 f981 	bl	800d5ec <__sinit>
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	; (800d3a4 <__swsetup_r+0xd0>)
 800d2ec:	429c      	cmp	r4, r3
 800d2ee:	d10f      	bne.n	800d310 <__swsetup_r+0x3c>
 800d2f0:	686c      	ldr	r4, [r5, #4]
 800d2f2:	89a3      	ldrh	r3, [r4, #12]
 800d2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f8:	0719      	lsls	r1, r3, #28
 800d2fa:	d42c      	bmi.n	800d356 <__swsetup_r+0x82>
 800d2fc:	06dd      	lsls	r5, r3, #27
 800d2fe:	d411      	bmi.n	800d324 <__swsetup_r+0x50>
 800d300:	2309      	movs	r3, #9
 800d302:	6033      	str	r3, [r6, #0]
 800d304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d308:	f04f 30ff 	mov.w	r0, #4294967295
 800d30c:	81a3      	strh	r3, [r4, #12]
 800d30e:	e03e      	b.n	800d38e <__swsetup_r+0xba>
 800d310:	4b25      	ldr	r3, [pc, #148]	; (800d3a8 <__swsetup_r+0xd4>)
 800d312:	429c      	cmp	r4, r3
 800d314:	d101      	bne.n	800d31a <__swsetup_r+0x46>
 800d316:	68ac      	ldr	r4, [r5, #8]
 800d318:	e7eb      	b.n	800d2f2 <__swsetup_r+0x1e>
 800d31a:	4b24      	ldr	r3, [pc, #144]	; (800d3ac <__swsetup_r+0xd8>)
 800d31c:	429c      	cmp	r4, r3
 800d31e:	bf08      	it	eq
 800d320:	68ec      	ldreq	r4, [r5, #12]
 800d322:	e7e6      	b.n	800d2f2 <__swsetup_r+0x1e>
 800d324:	0758      	lsls	r0, r3, #29
 800d326:	d512      	bpl.n	800d34e <__swsetup_r+0x7a>
 800d328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d32a:	b141      	cbz	r1, 800d33e <__swsetup_r+0x6a>
 800d32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d330:	4299      	cmp	r1, r3
 800d332:	d002      	beq.n	800d33a <__swsetup_r+0x66>
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff fb37 	bl	800c9a8 <_free_r>
 800d33a:	2300      	movs	r3, #0
 800d33c:	6363      	str	r3, [r4, #52]	; 0x34
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d344:	81a3      	strh	r3, [r4, #12]
 800d346:	2300      	movs	r3, #0
 800d348:	6063      	str	r3, [r4, #4]
 800d34a:	6923      	ldr	r3, [r4, #16]
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	f043 0308 	orr.w	r3, r3, #8
 800d354:	81a3      	strh	r3, [r4, #12]
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	b94b      	cbnz	r3, 800d36e <__swsetup_r+0x9a>
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d364:	d003      	beq.n	800d36e <__swsetup_r+0x9a>
 800d366:	4621      	mov	r1, r4
 800d368:	4630      	mov	r0, r6
 800d36a:	f000 fa05 	bl	800d778 <__smakebuf_r>
 800d36e:	89a0      	ldrh	r0, [r4, #12]
 800d370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d374:	f010 0301 	ands.w	r3, r0, #1
 800d378:	d00a      	beq.n	800d390 <__swsetup_r+0xbc>
 800d37a:	2300      	movs	r3, #0
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	6963      	ldr	r3, [r4, #20]
 800d380:	425b      	negs	r3, r3
 800d382:	61a3      	str	r3, [r4, #24]
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	b943      	cbnz	r3, 800d39a <__swsetup_r+0xc6>
 800d388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d38c:	d1ba      	bne.n	800d304 <__swsetup_r+0x30>
 800d38e:	bd70      	pop	{r4, r5, r6, pc}
 800d390:	0781      	lsls	r1, r0, #30
 800d392:	bf58      	it	pl
 800d394:	6963      	ldrpl	r3, [r4, #20]
 800d396:	60a3      	str	r3, [r4, #8]
 800d398:	e7f4      	b.n	800d384 <__swsetup_r+0xb0>
 800d39a:	2000      	movs	r0, #0
 800d39c:	e7f7      	b.n	800d38e <__swsetup_r+0xba>
 800d39e:	bf00      	nop
 800d3a0:	20000184 	.word	0x20000184
 800d3a4:	0800f134 	.word	0x0800f134
 800d3a8:	0800f154 	.word	0x0800f154
 800d3ac:	0800f114 	.word	0x0800f114

0800d3b0 <abort>:
 800d3b0:	2006      	movs	r0, #6
 800d3b2:	b508      	push	{r3, lr}
 800d3b4:	f000 fa50 	bl	800d858 <raise>
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f7f4 fc56 	bl	8001c6a <_exit>
	...

0800d3c0 <__sflush_r>:
 800d3c0:	898a      	ldrh	r2, [r1, #12]
 800d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	0710      	lsls	r0, r2, #28
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	d457      	bmi.n	800d47c <__sflush_r+0xbc>
 800d3cc:	684b      	ldr	r3, [r1, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dc04      	bgt.n	800d3dc <__sflush_r+0x1c>
 800d3d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dc01      	bgt.n	800d3dc <__sflush_r+0x1c>
 800d3d8:	2000      	movs	r0, #0
 800d3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3de:	2e00      	cmp	r6, #0
 800d3e0:	d0fa      	beq.n	800d3d8 <__sflush_r+0x18>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3e8:	682f      	ldr	r7, [r5, #0]
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	d032      	beq.n	800d454 <__sflush_r+0x94>
 800d3ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	075a      	lsls	r2, r3, #29
 800d3f4:	d505      	bpl.n	800d402 <__sflush_r+0x42>
 800d3f6:	6863      	ldr	r3, [r4, #4]
 800d3f8:	1ac0      	subs	r0, r0, r3
 800d3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3fc:	b10b      	cbz	r3, 800d402 <__sflush_r+0x42>
 800d3fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d400:	1ac0      	subs	r0, r0, r3
 800d402:	2300      	movs	r3, #0
 800d404:	4602      	mov	r2, r0
 800d406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d408:	4628      	mov	r0, r5
 800d40a:	6a21      	ldr	r1, [r4, #32]
 800d40c:	47b0      	blx	r6
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	d106      	bne.n	800d422 <__sflush_r+0x62>
 800d414:	6829      	ldr	r1, [r5, #0]
 800d416:	291d      	cmp	r1, #29
 800d418:	d82c      	bhi.n	800d474 <__sflush_r+0xb4>
 800d41a:	4a29      	ldr	r2, [pc, #164]	; (800d4c0 <__sflush_r+0x100>)
 800d41c:	40ca      	lsrs	r2, r1
 800d41e:	07d6      	lsls	r6, r2, #31
 800d420:	d528      	bpl.n	800d474 <__sflush_r+0xb4>
 800d422:	2200      	movs	r2, #0
 800d424:	6062      	str	r2, [r4, #4]
 800d426:	6922      	ldr	r2, [r4, #16]
 800d428:	04d9      	lsls	r1, r3, #19
 800d42a:	6022      	str	r2, [r4, #0]
 800d42c:	d504      	bpl.n	800d438 <__sflush_r+0x78>
 800d42e:	1c42      	adds	r2, r0, #1
 800d430:	d101      	bne.n	800d436 <__sflush_r+0x76>
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	b903      	cbnz	r3, 800d438 <__sflush_r+0x78>
 800d436:	6560      	str	r0, [r4, #84]	; 0x54
 800d438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d43a:	602f      	str	r7, [r5, #0]
 800d43c:	2900      	cmp	r1, #0
 800d43e:	d0cb      	beq.n	800d3d8 <__sflush_r+0x18>
 800d440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d444:	4299      	cmp	r1, r3
 800d446:	d002      	beq.n	800d44e <__sflush_r+0x8e>
 800d448:	4628      	mov	r0, r5
 800d44a:	f7ff faad 	bl	800c9a8 <_free_r>
 800d44e:	2000      	movs	r0, #0
 800d450:	6360      	str	r0, [r4, #52]	; 0x34
 800d452:	e7c2      	b.n	800d3da <__sflush_r+0x1a>
 800d454:	6a21      	ldr	r1, [r4, #32]
 800d456:	2301      	movs	r3, #1
 800d458:	4628      	mov	r0, r5
 800d45a:	47b0      	blx	r6
 800d45c:	1c41      	adds	r1, r0, #1
 800d45e:	d1c7      	bne.n	800d3f0 <__sflush_r+0x30>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d0c4      	beq.n	800d3f0 <__sflush_r+0x30>
 800d466:	2b1d      	cmp	r3, #29
 800d468:	d001      	beq.n	800d46e <__sflush_r+0xae>
 800d46a:	2b16      	cmp	r3, #22
 800d46c:	d101      	bne.n	800d472 <__sflush_r+0xb2>
 800d46e:	602f      	str	r7, [r5, #0]
 800d470:	e7b2      	b.n	800d3d8 <__sflush_r+0x18>
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	e7ae      	b.n	800d3da <__sflush_r+0x1a>
 800d47c:	690f      	ldr	r7, [r1, #16]
 800d47e:	2f00      	cmp	r7, #0
 800d480:	d0aa      	beq.n	800d3d8 <__sflush_r+0x18>
 800d482:	0793      	lsls	r3, r2, #30
 800d484:	bf18      	it	ne
 800d486:	2300      	movne	r3, #0
 800d488:	680e      	ldr	r6, [r1, #0]
 800d48a:	bf08      	it	eq
 800d48c:	694b      	ldreq	r3, [r1, #20]
 800d48e:	1bf6      	subs	r6, r6, r7
 800d490:	600f      	str	r7, [r1, #0]
 800d492:	608b      	str	r3, [r1, #8]
 800d494:	2e00      	cmp	r6, #0
 800d496:	dd9f      	ble.n	800d3d8 <__sflush_r+0x18>
 800d498:	4633      	mov	r3, r6
 800d49a:	463a      	mov	r2, r7
 800d49c:	4628      	mov	r0, r5
 800d49e:	6a21      	ldr	r1, [r4, #32]
 800d4a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d4a4:	47e0      	blx	ip
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	dc06      	bgt.n	800d4b8 <__sflush_r+0xf8>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4b4:	81a3      	strh	r3, [r4, #12]
 800d4b6:	e790      	b.n	800d3da <__sflush_r+0x1a>
 800d4b8:	4407      	add	r7, r0
 800d4ba:	1a36      	subs	r6, r6, r0
 800d4bc:	e7ea      	b.n	800d494 <__sflush_r+0xd4>
 800d4be:	bf00      	nop
 800d4c0:	20400001 	.word	0x20400001

0800d4c4 <_fflush_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	690b      	ldr	r3, [r1, #16]
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	b913      	cbnz	r3, 800d4d4 <_fflush_r+0x10>
 800d4ce:	2500      	movs	r5, #0
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	bd38      	pop	{r3, r4, r5, pc}
 800d4d4:	b118      	cbz	r0, 800d4de <_fflush_r+0x1a>
 800d4d6:	6983      	ldr	r3, [r0, #24]
 800d4d8:	b90b      	cbnz	r3, 800d4de <_fflush_r+0x1a>
 800d4da:	f000 f887 	bl	800d5ec <__sinit>
 800d4de:	4b14      	ldr	r3, [pc, #80]	; (800d530 <_fflush_r+0x6c>)
 800d4e0:	429c      	cmp	r4, r3
 800d4e2:	d11b      	bne.n	800d51c <_fflush_r+0x58>
 800d4e4:	686c      	ldr	r4, [r5, #4]
 800d4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0ef      	beq.n	800d4ce <_fflush_r+0xa>
 800d4ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4f0:	07d0      	lsls	r0, r2, #31
 800d4f2:	d404      	bmi.n	800d4fe <_fflush_r+0x3a>
 800d4f4:	0599      	lsls	r1, r3, #22
 800d4f6:	d402      	bmi.n	800d4fe <_fflush_r+0x3a>
 800d4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4fa:	f000 f915 	bl	800d728 <__retarget_lock_acquire_recursive>
 800d4fe:	4628      	mov	r0, r5
 800d500:	4621      	mov	r1, r4
 800d502:	f7ff ff5d 	bl	800d3c0 <__sflush_r>
 800d506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d508:	4605      	mov	r5, r0
 800d50a:	07da      	lsls	r2, r3, #31
 800d50c:	d4e0      	bmi.n	800d4d0 <_fflush_r+0xc>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	059b      	lsls	r3, r3, #22
 800d512:	d4dd      	bmi.n	800d4d0 <_fflush_r+0xc>
 800d514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d516:	f000 f908 	bl	800d72a <__retarget_lock_release_recursive>
 800d51a:	e7d9      	b.n	800d4d0 <_fflush_r+0xc>
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <_fflush_r+0x70>)
 800d51e:	429c      	cmp	r4, r3
 800d520:	d101      	bne.n	800d526 <_fflush_r+0x62>
 800d522:	68ac      	ldr	r4, [r5, #8]
 800d524:	e7df      	b.n	800d4e6 <_fflush_r+0x22>
 800d526:	4b04      	ldr	r3, [pc, #16]	; (800d538 <_fflush_r+0x74>)
 800d528:	429c      	cmp	r4, r3
 800d52a:	bf08      	it	eq
 800d52c:	68ec      	ldreq	r4, [r5, #12]
 800d52e:	e7da      	b.n	800d4e6 <_fflush_r+0x22>
 800d530:	0800f134 	.word	0x0800f134
 800d534:	0800f154 	.word	0x0800f154
 800d538:	0800f114 	.word	0x0800f114

0800d53c <std>:
 800d53c:	2300      	movs	r3, #0
 800d53e:	b510      	push	{r4, lr}
 800d540:	4604      	mov	r4, r0
 800d542:	e9c0 3300 	strd	r3, r3, [r0]
 800d546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d54a:	6083      	str	r3, [r0, #8]
 800d54c:	8181      	strh	r1, [r0, #12]
 800d54e:	6643      	str	r3, [r0, #100]	; 0x64
 800d550:	81c2      	strh	r2, [r0, #14]
 800d552:	6183      	str	r3, [r0, #24]
 800d554:	4619      	mov	r1, r3
 800d556:	2208      	movs	r2, #8
 800d558:	305c      	adds	r0, #92	; 0x5c
 800d55a:	f7fd fb65 	bl	800ac28 <memset>
 800d55e:	4b05      	ldr	r3, [pc, #20]	; (800d574 <std+0x38>)
 800d560:	6224      	str	r4, [r4, #32]
 800d562:	6263      	str	r3, [r4, #36]	; 0x24
 800d564:	4b04      	ldr	r3, [pc, #16]	; (800d578 <std+0x3c>)
 800d566:	62a3      	str	r3, [r4, #40]	; 0x28
 800d568:	4b04      	ldr	r3, [pc, #16]	; (800d57c <std+0x40>)
 800d56a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d56c:	4b04      	ldr	r3, [pc, #16]	; (800d580 <std+0x44>)
 800d56e:	6323      	str	r3, [r4, #48]	; 0x30
 800d570:	bd10      	pop	{r4, pc}
 800d572:	bf00      	nop
 800d574:	0800d891 	.word	0x0800d891
 800d578:	0800d8b3 	.word	0x0800d8b3
 800d57c:	0800d8eb 	.word	0x0800d8eb
 800d580:	0800d90f 	.word	0x0800d90f

0800d584 <_cleanup_r>:
 800d584:	4901      	ldr	r1, [pc, #4]	; (800d58c <_cleanup_r+0x8>)
 800d586:	f000 b8af 	b.w	800d6e8 <_fwalk_reent>
 800d58a:	bf00      	nop
 800d58c:	0800d4c5 	.word	0x0800d4c5

0800d590 <__sfmoreglue>:
 800d590:	2268      	movs	r2, #104	; 0x68
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	1e4d      	subs	r5, r1, #1
 800d596:	4355      	muls	r5, r2
 800d598:	460e      	mov	r6, r1
 800d59a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d59e:	f7ff fa6b 	bl	800ca78 <_malloc_r>
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	b140      	cbz	r0, 800d5b8 <__sfmoreglue+0x28>
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d5ac:	300c      	adds	r0, #12
 800d5ae:	60a0      	str	r0, [r4, #8]
 800d5b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5b4:	f7fd fb38 	bl	800ac28 <memset>
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	bd70      	pop	{r4, r5, r6, pc}

0800d5bc <__sfp_lock_acquire>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	; (800d5c4 <__sfp_lock_acquire+0x8>)
 800d5be:	f000 b8b3 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	20001669 	.word	0x20001669

0800d5c8 <__sfp_lock_release>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__sfp_lock_release+0x8>)
 800d5ca:	f000 b8ae 	b.w	800d72a <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20001669 	.word	0x20001669

0800d5d4 <__sinit_lock_acquire>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__sinit_lock_acquire+0x8>)
 800d5d6:	f000 b8a7 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800d5da:	bf00      	nop
 800d5dc:	2000166a 	.word	0x2000166a

0800d5e0 <__sinit_lock_release>:
 800d5e0:	4801      	ldr	r0, [pc, #4]	; (800d5e8 <__sinit_lock_release+0x8>)
 800d5e2:	f000 b8a2 	b.w	800d72a <__retarget_lock_release_recursive>
 800d5e6:	bf00      	nop
 800d5e8:	2000166a 	.word	0x2000166a

0800d5ec <__sinit>:
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	f7ff fff0 	bl	800d5d4 <__sinit_lock_acquire>
 800d5f4:	69a3      	ldr	r3, [r4, #24]
 800d5f6:	b11b      	cbz	r3, 800d600 <__sinit+0x14>
 800d5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fc:	f7ff bff0 	b.w	800d5e0 <__sinit_lock_release>
 800d600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d604:	6523      	str	r3, [r4, #80]	; 0x50
 800d606:	4b13      	ldr	r3, [pc, #76]	; (800d654 <__sinit+0x68>)
 800d608:	4a13      	ldr	r2, [pc, #76]	; (800d658 <__sinit+0x6c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d60e:	42a3      	cmp	r3, r4
 800d610:	bf08      	it	eq
 800d612:	2301      	moveq	r3, #1
 800d614:	4620      	mov	r0, r4
 800d616:	bf08      	it	eq
 800d618:	61a3      	streq	r3, [r4, #24]
 800d61a:	f000 f81f 	bl	800d65c <__sfp>
 800d61e:	6060      	str	r0, [r4, #4]
 800d620:	4620      	mov	r0, r4
 800d622:	f000 f81b 	bl	800d65c <__sfp>
 800d626:	60a0      	str	r0, [r4, #8]
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 f817 	bl	800d65c <__sfp>
 800d62e:	2200      	movs	r2, #0
 800d630:	2104      	movs	r1, #4
 800d632:	60e0      	str	r0, [r4, #12]
 800d634:	6860      	ldr	r0, [r4, #4]
 800d636:	f7ff ff81 	bl	800d53c <std>
 800d63a:	2201      	movs	r2, #1
 800d63c:	2109      	movs	r1, #9
 800d63e:	68a0      	ldr	r0, [r4, #8]
 800d640:	f7ff ff7c 	bl	800d53c <std>
 800d644:	2202      	movs	r2, #2
 800d646:	2112      	movs	r1, #18
 800d648:	68e0      	ldr	r0, [r4, #12]
 800d64a:	f7ff ff77 	bl	800d53c <std>
 800d64e:	2301      	movs	r3, #1
 800d650:	61a3      	str	r3, [r4, #24]
 800d652:	e7d1      	b.n	800d5f8 <__sinit+0xc>
 800d654:	0800ed98 	.word	0x0800ed98
 800d658:	0800d585 	.word	0x0800d585

0800d65c <__sfp>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	4607      	mov	r7, r0
 800d660:	f7ff ffac 	bl	800d5bc <__sfp_lock_acquire>
 800d664:	4b1e      	ldr	r3, [pc, #120]	; (800d6e0 <__sfp+0x84>)
 800d666:	681e      	ldr	r6, [r3, #0]
 800d668:	69b3      	ldr	r3, [r6, #24]
 800d66a:	b913      	cbnz	r3, 800d672 <__sfp+0x16>
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff ffbd 	bl	800d5ec <__sinit>
 800d672:	3648      	adds	r6, #72	; 0x48
 800d674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d678:	3b01      	subs	r3, #1
 800d67a:	d503      	bpl.n	800d684 <__sfp+0x28>
 800d67c:	6833      	ldr	r3, [r6, #0]
 800d67e:	b30b      	cbz	r3, 800d6c4 <__sfp+0x68>
 800d680:	6836      	ldr	r6, [r6, #0]
 800d682:	e7f7      	b.n	800d674 <__sfp+0x18>
 800d684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d688:	b9d5      	cbnz	r5, 800d6c0 <__sfp+0x64>
 800d68a:	4b16      	ldr	r3, [pc, #88]	; (800d6e4 <__sfp+0x88>)
 800d68c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d690:	60e3      	str	r3, [r4, #12]
 800d692:	6665      	str	r5, [r4, #100]	; 0x64
 800d694:	f000 f847 	bl	800d726 <__retarget_lock_init_recursive>
 800d698:	f7ff ff96 	bl	800d5c8 <__sfp_lock_release>
 800d69c:	2208      	movs	r2, #8
 800d69e:	4629      	mov	r1, r5
 800d6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6a8:	6025      	str	r5, [r4, #0]
 800d6aa:	61a5      	str	r5, [r4, #24]
 800d6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6b0:	f7fd faba 	bl	800ac28 <memset>
 800d6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6bc:	4620      	mov	r0, r4
 800d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c0:	3468      	adds	r4, #104	; 0x68
 800d6c2:	e7d9      	b.n	800d678 <__sfp+0x1c>
 800d6c4:	2104      	movs	r1, #4
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f7ff ff62 	bl	800d590 <__sfmoreglue>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	6030      	str	r0, [r6, #0]
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d1d5      	bne.n	800d680 <__sfp+0x24>
 800d6d4:	f7ff ff78 	bl	800d5c8 <__sfp_lock_release>
 800d6d8:	230c      	movs	r3, #12
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	e7ee      	b.n	800d6bc <__sfp+0x60>
 800d6de:	bf00      	nop
 800d6e0:	0800ed98 	.word	0x0800ed98
 800d6e4:	ffff0001 	.word	0xffff0001

0800d6e8 <_fwalk_reent>:
 800d6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	4688      	mov	r8, r1
 800d6f0:	2700      	movs	r7, #0
 800d6f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6fa:	f1b9 0901 	subs.w	r9, r9, #1
 800d6fe:	d505      	bpl.n	800d70c <_fwalk_reent+0x24>
 800d700:	6824      	ldr	r4, [r4, #0]
 800d702:	2c00      	cmp	r4, #0
 800d704:	d1f7      	bne.n	800d6f6 <_fwalk_reent+0xe>
 800d706:	4638      	mov	r0, r7
 800d708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70c:	89ab      	ldrh	r3, [r5, #12]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d907      	bls.n	800d722 <_fwalk_reent+0x3a>
 800d712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d716:	3301      	adds	r3, #1
 800d718:	d003      	beq.n	800d722 <_fwalk_reent+0x3a>
 800d71a:	4629      	mov	r1, r5
 800d71c:	4630      	mov	r0, r6
 800d71e:	47c0      	blx	r8
 800d720:	4307      	orrs	r7, r0
 800d722:	3568      	adds	r5, #104	; 0x68
 800d724:	e7e9      	b.n	800d6fa <_fwalk_reent+0x12>

0800d726 <__retarget_lock_init_recursive>:
 800d726:	4770      	bx	lr

0800d728 <__retarget_lock_acquire_recursive>:
 800d728:	4770      	bx	lr

0800d72a <__retarget_lock_release_recursive>:
 800d72a:	4770      	bx	lr

0800d72c <__swhatbuf_r>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	460e      	mov	r6, r1
 800d730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d734:	4614      	mov	r4, r2
 800d736:	2900      	cmp	r1, #0
 800d738:	461d      	mov	r5, r3
 800d73a:	b096      	sub	sp, #88	; 0x58
 800d73c:	da08      	bge.n	800d750 <__swhatbuf_r+0x24>
 800d73e:	2200      	movs	r2, #0
 800d740:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d744:	602a      	str	r2, [r5, #0]
 800d746:	061a      	lsls	r2, r3, #24
 800d748:	d410      	bmi.n	800d76c <__swhatbuf_r+0x40>
 800d74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74e:	e00e      	b.n	800d76e <__swhatbuf_r+0x42>
 800d750:	466a      	mov	r2, sp
 800d752:	f000 f903 	bl	800d95c <_fstat_r>
 800d756:	2800      	cmp	r0, #0
 800d758:	dbf1      	blt.n	800d73e <__swhatbuf_r+0x12>
 800d75a:	9a01      	ldr	r2, [sp, #4]
 800d75c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d764:	425a      	negs	r2, r3
 800d766:	415a      	adcs	r2, r3
 800d768:	602a      	str	r2, [r5, #0]
 800d76a:	e7ee      	b.n	800d74a <__swhatbuf_r+0x1e>
 800d76c:	2340      	movs	r3, #64	; 0x40
 800d76e:	2000      	movs	r0, #0
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	b016      	add	sp, #88	; 0x58
 800d774:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d778 <__smakebuf_r>:
 800d778:	898b      	ldrh	r3, [r1, #12]
 800d77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d77c:	079d      	lsls	r5, r3, #30
 800d77e:	4606      	mov	r6, r0
 800d780:	460c      	mov	r4, r1
 800d782:	d507      	bpl.n	800d794 <__smakebuf_r+0x1c>
 800d784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	6123      	str	r3, [r4, #16]
 800d78c:	2301      	movs	r3, #1
 800d78e:	6163      	str	r3, [r4, #20]
 800d790:	b002      	add	sp, #8
 800d792:	bd70      	pop	{r4, r5, r6, pc}
 800d794:	466a      	mov	r2, sp
 800d796:	ab01      	add	r3, sp, #4
 800d798:	f7ff ffc8 	bl	800d72c <__swhatbuf_r>
 800d79c:	9900      	ldr	r1, [sp, #0]
 800d79e:	4605      	mov	r5, r0
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7ff f969 	bl	800ca78 <_malloc_r>
 800d7a6:	b948      	cbnz	r0, 800d7bc <__smakebuf_r+0x44>
 800d7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ac:	059a      	lsls	r2, r3, #22
 800d7ae:	d4ef      	bmi.n	800d790 <__smakebuf_r+0x18>
 800d7b0:	f023 0303 	bic.w	r3, r3, #3
 800d7b4:	f043 0302 	orr.w	r3, r3, #2
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	e7e3      	b.n	800d784 <__smakebuf_r+0xc>
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <__smakebuf_r+0x7c>)
 800d7be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	6020      	str	r0, [r4, #0]
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	9b00      	ldr	r3, [sp, #0]
 800d7cc:	6120      	str	r0, [r4, #16]
 800d7ce:	6163      	str	r3, [r4, #20]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	b15b      	cbz	r3, 800d7ec <__smakebuf_r+0x74>
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7da:	f000 f8d1 	bl	800d980 <_isatty_r>
 800d7de:	b128      	cbz	r0, 800d7ec <__smakebuf_r+0x74>
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	f023 0303 	bic.w	r3, r3, #3
 800d7e6:	f043 0301 	orr.w	r3, r3, #1
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	89a0      	ldrh	r0, [r4, #12]
 800d7ee:	4305      	orrs	r5, r0
 800d7f0:	81a5      	strh	r5, [r4, #12]
 800d7f2:	e7cd      	b.n	800d790 <__smakebuf_r+0x18>
 800d7f4:	0800d585 	.word	0x0800d585

0800d7f8 <_malloc_usable_size_r>:
 800d7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fc:	1f18      	subs	r0, r3, #4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfbc      	itt	lt
 800d802:	580b      	ldrlt	r3, [r1, r0]
 800d804:	18c0      	addlt	r0, r0, r3
 800d806:	4770      	bx	lr

0800d808 <_raise_r>:
 800d808:	291f      	cmp	r1, #31
 800d80a:	b538      	push	{r3, r4, r5, lr}
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	d904      	bls.n	800d81c <_raise_r+0x14>
 800d812:	2316      	movs	r3, #22
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	f04f 30ff 	mov.w	r0, #4294967295
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d81e:	b112      	cbz	r2, 800d826 <_raise_r+0x1e>
 800d820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d824:	b94b      	cbnz	r3, 800d83a <_raise_r+0x32>
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f830 	bl	800d88c <_getpid_r>
 800d82c:	462a      	mov	r2, r5
 800d82e:	4601      	mov	r1, r0
 800d830:	4620      	mov	r0, r4
 800d832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d836:	f000 b817 	b.w	800d868 <_kill_r>
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d00a      	beq.n	800d854 <_raise_r+0x4c>
 800d83e:	1c59      	adds	r1, r3, #1
 800d840:	d103      	bne.n	800d84a <_raise_r+0x42>
 800d842:	2316      	movs	r3, #22
 800d844:	6003      	str	r3, [r0, #0]
 800d846:	2001      	movs	r0, #1
 800d848:	e7e7      	b.n	800d81a <_raise_r+0x12>
 800d84a:	2400      	movs	r4, #0
 800d84c:	4628      	mov	r0, r5
 800d84e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d852:	4798      	blx	r3
 800d854:	2000      	movs	r0, #0
 800d856:	e7e0      	b.n	800d81a <_raise_r+0x12>

0800d858 <raise>:
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <raise+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f7ff bfd3 	b.w	800d808 <_raise_r>
 800d862:	bf00      	nop
 800d864:	20000184 	.word	0x20000184

0800d868 <_kill_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	2300      	movs	r3, #0
 800d86c:	4d06      	ldr	r5, [pc, #24]	; (800d888 <_kill_r+0x20>)
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f7f4 f9e8 	bl	8001c4a <_kill>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d102      	bne.n	800d884 <_kill_r+0x1c>
 800d87e:	682b      	ldr	r3, [r5, #0]
 800d880:	b103      	cbz	r3, 800d884 <_kill_r+0x1c>
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	bd38      	pop	{r3, r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	20001664 	.word	0x20001664

0800d88c <_getpid_r>:
 800d88c:	f7f4 b9d6 	b.w	8001c3c <_getpid>

0800d890 <__sread>:
 800d890:	b510      	push	{r4, lr}
 800d892:	460c      	mov	r4, r1
 800d894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d898:	f000 f894 	bl	800d9c4 <_read_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	bfab      	itete	ge
 800d8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8a4:	181b      	addge	r3, r3, r0
 800d8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8aa:	bfac      	ite	ge
 800d8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8ae:	81a3      	strhlt	r3, [r4, #12]
 800d8b0:	bd10      	pop	{r4, pc}

0800d8b2 <__swrite>:
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	05db      	lsls	r3, r3, #23
 800d8be:	460c      	mov	r4, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	d505      	bpl.n	800d8d0 <__swrite+0x1e>
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8cc:	f000 f868 	bl	800d9a0 <_lseek_r>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	4632      	mov	r2, r6
 800d8d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8d8:	81a3      	strh	r3, [r4, #12]
 800d8da:	4628      	mov	r0, r5
 800d8dc:	463b      	mov	r3, r7
 800d8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f000 b817 	b.w	800d918 <_write_r>

0800d8ea <__sseek>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 f855 	bl	800d9a0 <_lseek_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	bf15      	itete	ne
 800d8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d906:	81a3      	strheq	r3, [r4, #12]
 800d908:	bf18      	it	ne
 800d90a:	81a3      	strhne	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__sclose>:
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f000 b813 	b.w	800d93c <_close_r>
	...

0800d918 <_write_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4604      	mov	r4, r0
 800d91c:	4608      	mov	r0, r1
 800d91e:	4611      	mov	r1, r2
 800d920:	2200      	movs	r2, #0
 800d922:	4d05      	ldr	r5, [pc, #20]	; (800d938 <_write_r+0x20>)
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	f7f4 f9c6 	bl	8001cb8 <_write>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_write_r+0x1e>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_write_r+0x1e>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	20001664 	.word	0x20001664

0800d93c <_close_r>:
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	2300      	movs	r3, #0
 800d940:	4d05      	ldr	r5, [pc, #20]	; (800d958 <_close_r+0x1c>)
 800d942:	4604      	mov	r4, r0
 800d944:	4608      	mov	r0, r1
 800d946:	602b      	str	r3, [r5, #0]
 800d948:	f7f4 f9d2 	bl	8001cf0 <_close>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_close_r+0x1a>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_close_r+0x1a>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	20001664 	.word	0x20001664

0800d95c <_fstat_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	2300      	movs	r3, #0
 800d960:	4d06      	ldr	r5, [pc, #24]	; (800d97c <_fstat_r+0x20>)
 800d962:	4604      	mov	r4, r0
 800d964:	4608      	mov	r0, r1
 800d966:	4611      	mov	r1, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	f7f4 f9cc 	bl	8001d06 <_fstat>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	d102      	bne.n	800d978 <_fstat_r+0x1c>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	b103      	cbz	r3, 800d978 <_fstat_r+0x1c>
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	20001664 	.word	0x20001664

0800d980 <_isatty_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	2300      	movs	r3, #0
 800d984:	4d05      	ldr	r5, [pc, #20]	; (800d99c <_isatty_r+0x1c>)
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f4 f9ca 	bl	8001d24 <_isatty>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_isatty_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_isatty_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	20001664 	.word	0x20001664

0800d9a0 <_lseek_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4d05      	ldr	r5, [pc, #20]	; (800d9c0 <_lseek_r+0x20>)
 800d9ac:	602a      	str	r2, [r5, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f7f4 f9c2 	bl	8001d38 <_lseek>
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	d102      	bne.n	800d9be <_lseek_r+0x1e>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	b103      	cbz	r3, 800d9be <_lseek_r+0x1e>
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	20001664 	.word	0x20001664

0800d9c4 <_read_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	4d05      	ldr	r5, [pc, #20]	; (800d9e4 <_read_r+0x20>)
 800d9d0:	602a      	str	r2, [r5, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f7f4 f953 	bl	8001c7e <_read>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_read_r+0x1e>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_read_r+0x1e>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	20001664 	.word	0x20001664

0800d9e8 <atan2>:
 800d9e8:	f000 b88e 	b.w	800db08 <__ieee754_atan2>

0800d9ec <pow>:
 800d9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	461d      	mov	r5, r3
 800d9f4:	4680      	mov	r8, r0
 800d9f6:	4689      	mov	r9, r1
 800d9f8:	f000 f95a 	bl	800dcb0 <__ieee754_pow>
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	4606      	mov	r6, r0
 800da00:	460f      	mov	r7, r1
 800da02:	462b      	mov	r3, r5
 800da04:	4620      	mov	r0, r4
 800da06:	4629      	mov	r1, r5
 800da08:	f7f3 f800 	bl	8000a0c <__aeabi_dcmpun>
 800da0c:	bbc8      	cbnz	r0, 800da82 <pow+0x96>
 800da0e:	2200      	movs	r2, #0
 800da10:	2300      	movs	r3, #0
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	f7f2 ffc7 	bl	80009a8 <__aeabi_dcmpeq>
 800da1a:	b1b8      	cbz	r0, 800da4c <pow+0x60>
 800da1c:	2200      	movs	r2, #0
 800da1e:	2300      	movs	r3, #0
 800da20:	4620      	mov	r0, r4
 800da22:	4629      	mov	r1, r5
 800da24:	f7f2 ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d141      	bne.n	800dab0 <pow+0xc4>
 800da2c:	4620      	mov	r0, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	f001 f8bf 	bl	800ebb2 <finite>
 800da34:	b328      	cbz	r0, 800da82 <pow+0x96>
 800da36:	2200      	movs	r2, #0
 800da38:	2300      	movs	r3, #0
 800da3a:	4620      	mov	r0, r4
 800da3c:	4629      	mov	r1, r5
 800da3e:	f7f2 ffbd 	bl	80009bc <__aeabi_dcmplt>
 800da42:	b1f0      	cbz	r0, 800da82 <pow+0x96>
 800da44:	f7fd f8c6 	bl	800abd4 <__errno>
 800da48:	2322      	movs	r3, #34	; 0x22
 800da4a:	e019      	b.n	800da80 <pow+0x94>
 800da4c:	4630      	mov	r0, r6
 800da4e:	4639      	mov	r1, r7
 800da50:	f001 f8af 	bl	800ebb2 <finite>
 800da54:	b9c8      	cbnz	r0, 800da8a <pow+0x9e>
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f001 f8aa 	bl	800ebb2 <finite>
 800da5e:	b1a0      	cbz	r0, 800da8a <pow+0x9e>
 800da60:	4620      	mov	r0, r4
 800da62:	4629      	mov	r1, r5
 800da64:	f001 f8a5 	bl	800ebb2 <finite>
 800da68:	b178      	cbz	r0, 800da8a <pow+0x9e>
 800da6a:	4632      	mov	r2, r6
 800da6c:	463b      	mov	r3, r7
 800da6e:	4630      	mov	r0, r6
 800da70:	4639      	mov	r1, r7
 800da72:	f7f2 ffcb 	bl	8000a0c <__aeabi_dcmpun>
 800da76:	2800      	cmp	r0, #0
 800da78:	d0e4      	beq.n	800da44 <pow+0x58>
 800da7a:	f7fd f8ab 	bl	800abd4 <__errno>
 800da7e:	2321      	movs	r3, #33	; 0x21
 800da80:	6003      	str	r3, [r0, #0]
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	2200      	movs	r2, #0
 800da8c:	2300      	movs	r3, #0
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 ff89 	bl	80009a8 <__aeabi_dcmpeq>
 800da96:	2800      	cmp	r0, #0
 800da98:	d0f3      	beq.n	800da82 <pow+0x96>
 800da9a:	4640      	mov	r0, r8
 800da9c:	4649      	mov	r1, r9
 800da9e:	f001 f888 	bl	800ebb2 <finite>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d0ed      	beq.n	800da82 <pow+0x96>
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f001 f882 	bl	800ebb2 <finite>
 800daae:	e7c8      	b.n	800da42 <pow+0x56>
 800dab0:	2600      	movs	r6, #0
 800dab2:	4f01      	ldr	r7, [pc, #4]	; (800dab8 <pow+0xcc>)
 800dab4:	e7e5      	b.n	800da82 <pow+0x96>
 800dab6:	bf00      	nop
 800dab8:	3ff00000 	.word	0x3ff00000

0800dabc <sqrt>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	4606      	mov	r6, r0
 800dac0:	460f      	mov	r7, r1
 800dac2:	f000 fe0b 	bl	800e6dc <__ieee754_sqrt>
 800dac6:	4632      	mov	r2, r6
 800dac8:	4604      	mov	r4, r0
 800daca:	460d      	mov	r5, r1
 800dacc:	463b      	mov	r3, r7
 800dace:	4630      	mov	r0, r6
 800dad0:	4639      	mov	r1, r7
 800dad2:	f7f2 ff9b 	bl	8000a0c <__aeabi_dcmpun>
 800dad6:	b990      	cbnz	r0, 800dafe <sqrt+0x42>
 800dad8:	2200      	movs	r2, #0
 800dada:	2300      	movs	r3, #0
 800dadc:	4630      	mov	r0, r6
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 ff6c 	bl	80009bc <__aeabi_dcmplt>
 800dae4:	b158      	cbz	r0, 800dafe <sqrt+0x42>
 800dae6:	f7fd f875 	bl	800abd4 <__errno>
 800daea:	2321      	movs	r3, #33	; 0x21
 800daec:	2200      	movs	r2, #0
 800daee:	6003      	str	r3, [r0, #0]
 800daf0:	2300      	movs	r3, #0
 800daf2:	4610      	mov	r0, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	f7f2 fe19 	bl	800072c <__aeabi_ddiv>
 800dafa:	4604      	mov	r4, r0
 800dafc:	460d      	mov	r5, r1
 800dafe:	4620      	mov	r0, r4
 800db00:	4629      	mov	r1, r5
 800db02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db04:	0000      	movs	r0, r0
	...

0800db08 <__ieee754_atan2>:
 800db08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	4692      	mov	sl, r2
 800db0e:	4699      	mov	r9, r3
 800db10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db14:	461f      	mov	r7, r3
 800db16:	f1ca 0300 	rsb	r3, sl, #0
 800db1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800dca0 <__ieee754_atan2+0x198>
 800db1e:	ea43 030a 	orr.w	r3, r3, sl
 800db22:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db26:	4573      	cmp	r3, lr
 800db28:	4604      	mov	r4, r0
 800db2a:	460d      	mov	r5, r1
 800db2c:	d808      	bhi.n	800db40 <__ieee754_atan2+0x38>
 800db2e:	4246      	negs	r6, r0
 800db30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db34:	4306      	orrs	r6, r0
 800db36:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800db3a:	4576      	cmp	r6, lr
 800db3c:	468c      	mov	ip, r1
 800db3e:	d908      	bls.n	800db52 <__ieee754_atan2+0x4a>
 800db40:	4652      	mov	r2, sl
 800db42:	464b      	mov	r3, r9
 800db44:	4620      	mov	r0, r4
 800db46:	4629      	mov	r1, r5
 800db48:	f7f2 fb10 	bl	800016c <__adddf3>
 800db4c:	4604      	mov	r4, r0
 800db4e:	460d      	mov	r5, r1
 800db50:	e019      	b.n	800db86 <__ieee754_atan2+0x7e>
 800db52:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800db56:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800db5a:	ea56 060a 	orrs.w	r6, r6, sl
 800db5e:	d103      	bne.n	800db68 <__ieee754_atan2+0x60>
 800db60:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	f000 be98 	b.w	800e898 <atan>
 800db68:	17be      	asrs	r6, r7, #30
 800db6a:	f006 0602 	and.w	r6, r6, #2
 800db6e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800db72:	ea53 0100 	orrs.w	r1, r3, r0
 800db76:	d10a      	bne.n	800db8e <__ieee754_atan2+0x86>
 800db78:	2e02      	cmp	r6, #2
 800db7a:	d067      	beq.n	800dc4c <__ieee754_atan2+0x144>
 800db7c:	2e03      	cmp	r6, #3
 800db7e:	d102      	bne.n	800db86 <__ieee754_atan2+0x7e>
 800db80:	a53b      	add	r5, pc, #236	; (adr r5, 800dc70 <__ieee754_atan2+0x168>)
 800db82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8e:	ea52 010a 	orrs.w	r1, r2, sl
 800db92:	d106      	bne.n	800dba2 <__ieee754_atan2+0x9a>
 800db94:	f1bc 0f00 	cmp.w	ip, #0
 800db98:	da63      	bge.n	800dc62 <__ieee754_atan2+0x15a>
 800db9a:	a537      	add	r5, pc, #220	; (adr r5, 800dc78 <__ieee754_atan2+0x170>)
 800db9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dba0:	e7f1      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dba2:	4572      	cmp	r2, lr
 800dba4:	d10f      	bne.n	800dbc6 <__ieee754_atan2+0xbe>
 800dba6:	4293      	cmp	r3, r2
 800dba8:	f106 36ff 	add.w	r6, r6, #4294967295
 800dbac:	d107      	bne.n	800dbbe <__ieee754_atan2+0xb6>
 800dbae:	2e02      	cmp	r6, #2
 800dbb0:	d850      	bhi.n	800dc54 <__ieee754_atan2+0x14c>
 800dbb2:	4b3c      	ldr	r3, [pc, #240]	; (800dca4 <__ieee754_atan2+0x19c>)
 800dbb4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dbb8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800dbbc:	e7e3      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dbbe:	2e02      	cmp	r6, #2
 800dbc0:	d84c      	bhi.n	800dc5c <__ieee754_atan2+0x154>
 800dbc2:	4b39      	ldr	r3, [pc, #228]	; (800dca8 <__ieee754_atan2+0x1a0>)
 800dbc4:	e7f6      	b.n	800dbb4 <__ieee754_atan2+0xac>
 800dbc6:	4573      	cmp	r3, lr
 800dbc8:	d0e4      	beq.n	800db94 <__ieee754_atan2+0x8c>
 800dbca:	1a9b      	subs	r3, r3, r2
 800dbcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dbd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dbd4:	da20      	bge.n	800dc18 <__ieee754_atan2+0x110>
 800dbd6:	2f00      	cmp	r7, #0
 800dbd8:	da01      	bge.n	800dbde <__ieee754_atan2+0xd6>
 800dbda:	323c      	adds	r2, #60	; 0x3c
 800dbdc:	db20      	blt.n	800dc20 <__ieee754_atan2+0x118>
 800dbde:	4652      	mov	r2, sl
 800dbe0:	464b      	mov	r3, r9
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	f7f2 fda1 	bl	800072c <__aeabi_ddiv>
 800dbea:	f000 ffdf 	bl	800ebac <fabs>
 800dbee:	f000 fe53 	bl	800e898 <atan>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	460d      	mov	r5, r1
 800dbf6:	2e01      	cmp	r6, #1
 800dbf8:	d015      	beq.n	800dc26 <__ieee754_atan2+0x11e>
 800dbfa:	2e02      	cmp	r6, #2
 800dbfc:	d017      	beq.n	800dc2e <__ieee754_atan2+0x126>
 800dbfe:	2e00      	cmp	r6, #0
 800dc00:	d0c1      	beq.n	800db86 <__ieee754_atan2+0x7e>
 800dc02:	a31f      	add	r3, pc, #124	; (adr r3, 800dc80 <__ieee754_atan2+0x178>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	4620      	mov	r0, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f2 faac 	bl	8000168 <__aeabi_dsub>
 800dc10:	a31d      	add	r3, pc, #116	; (adr r3, 800dc88 <__ieee754_atan2+0x180>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	e016      	b.n	800dc46 <__ieee754_atan2+0x13e>
 800dc18:	a51d      	add	r5, pc, #116	; (adr r5, 800dc90 <__ieee754_atan2+0x188>)
 800dc1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc1e:	e7ea      	b.n	800dbf6 <__ieee754_atan2+0xee>
 800dc20:	2400      	movs	r4, #0
 800dc22:	2500      	movs	r5, #0
 800dc24:	e7e7      	b.n	800dbf6 <__ieee754_atan2+0xee>
 800dc26:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dc2a:	461d      	mov	r5, r3
 800dc2c:	e7ab      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dc2e:	a314      	add	r3, pc, #80	; (adr r3, 800dc80 <__ieee754_atan2+0x178>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 fa96 	bl	8000168 <__aeabi_dsub>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	a111      	add	r1, pc, #68	; (adr r1, 800dc88 <__ieee754_atan2+0x180>)
 800dc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc46:	f7f2 fa8f 	bl	8000168 <__aeabi_dsub>
 800dc4a:	e77f      	b.n	800db4c <__ieee754_atan2+0x44>
 800dc4c:	a50e      	add	r5, pc, #56	; (adr r5, 800dc88 <__ieee754_atan2+0x180>)
 800dc4e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc52:	e798      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dc54:	a510      	add	r5, pc, #64	; (adr r5, 800dc98 <__ieee754_atan2+0x190>)
 800dc56:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc5a:	e794      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dc5c:	2400      	movs	r4, #0
 800dc5e:	2500      	movs	r5, #0
 800dc60:	e791      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dc62:	a50b      	add	r5, pc, #44	; (adr r5, 800dc90 <__ieee754_atan2+0x188>)
 800dc64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc68:	e78d      	b.n	800db86 <__ieee754_atan2+0x7e>
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w
 800dc70:	54442d18 	.word	0x54442d18
 800dc74:	c00921fb 	.word	0xc00921fb
 800dc78:	54442d18 	.word	0x54442d18
 800dc7c:	bff921fb 	.word	0xbff921fb
 800dc80:	33145c07 	.word	0x33145c07
 800dc84:	3ca1a626 	.word	0x3ca1a626
 800dc88:	54442d18 	.word	0x54442d18
 800dc8c:	400921fb 	.word	0x400921fb
 800dc90:	54442d18 	.word	0x54442d18
 800dc94:	3ff921fb 	.word	0x3ff921fb
 800dc98:	54442d18 	.word	0x54442d18
 800dc9c:	3fe921fb 	.word	0x3fe921fb
 800dca0:	7ff00000 	.word	0x7ff00000
 800dca4:	0800f178 	.word	0x0800f178
 800dca8:	0800f190 	.word	0x0800f190
 800dcac:	00000000 	.word	0x00000000

0800dcb0 <__ieee754_pow>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	b093      	sub	sp, #76	; 0x4c
 800dcb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800dcbe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dcc2:	4689      	mov	r9, r1
 800dcc4:	ea56 0102 	orrs.w	r1, r6, r2
 800dcc8:	4680      	mov	r8, r0
 800dcca:	d111      	bne.n	800dcf0 <__ieee754_pow+0x40>
 800dccc:	1803      	adds	r3, r0, r0
 800dcce:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800dcd2:	4152      	adcs	r2, r2
 800dcd4:	4299      	cmp	r1, r3
 800dcd6:	4b82      	ldr	r3, [pc, #520]	; (800dee0 <__ieee754_pow+0x230>)
 800dcd8:	4193      	sbcs	r3, r2
 800dcda:	f080 84b9 	bcs.w	800e650 <__ieee754_pow+0x9a0>
 800dcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 fa41 	bl	800016c <__adddf3>
 800dcea:	4683      	mov	fp, r0
 800dcec:	468c      	mov	ip, r1
 800dcee:	e06f      	b.n	800ddd0 <__ieee754_pow+0x120>
 800dcf0:	4b7c      	ldr	r3, [pc, #496]	; (800dee4 <__ieee754_pow+0x234>)
 800dcf2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800dcf6:	429c      	cmp	r4, r3
 800dcf8:	464d      	mov	r5, r9
 800dcfa:	4682      	mov	sl, r0
 800dcfc:	dc06      	bgt.n	800dd0c <__ieee754_pow+0x5c>
 800dcfe:	d101      	bne.n	800dd04 <__ieee754_pow+0x54>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d1ec      	bne.n	800dcde <__ieee754_pow+0x2e>
 800dd04:	429e      	cmp	r6, r3
 800dd06:	dc01      	bgt.n	800dd0c <__ieee754_pow+0x5c>
 800dd08:	d10f      	bne.n	800dd2a <__ieee754_pow+0x7a>
 800dd0a:	b172      	cbz	r2, 800dd2a <__ieee754_pow+0x7a>
 800dd0c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dd10:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dd14:	ea55 050a 	orrs.w	r5, r5, sl
 800dd18:	d1e1      	bne.n	800dcde <__ieee754_pow+0x2e>
 800dd1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dd1e:	18db      	adds	r3, r3, r3
 800dd20:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dd24:	4152      	adcs	r2, r2
 800dd26:	429d      	cmp	r5, r3
 800dd28:	e7d5      	b.n	800dcd6 <__ieee754_pow+0x26>
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	da39      	bge.n	800dda2 <__ieee754_pow+0xf2>
 800dd2e:	4b6e      	ldr	r3, [pc, #440]	; (800dee8 <__ieee754_pow+0x238>)
 800dd30:	429e      	cmp	r6, r3
 800dd32:	dc52      	bgt.n	800ddda <__ieee754_pow+0x12a>
 800dd34:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dd38:	429e      	cmp	r6, r3
 800dd3a:	f340 849c 	ble.w	800e676 <__ieee754_pow+0x9c6>
 800dd3e:	1533      	asrs	r3, r6, #20
 800dd40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd44:	2b14      	cmp	r3, #20
 800dd46:	dd0f      	ble.n	800dd68 <__ieee754_pow+0xb8>
 800dd48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dd4c:	fa22 f103 	lsr.w	r1, r2, r3
 800dd50:	fa01 f303 	lsl.w	r3, r1, r3
 800dd54:	4293      	cmp	r3, r2
 800dd56:	f040 848e 	bne.w	800e676 <__ieee754_pow+0x9c6>
 800dd5a:	f001 0101 	and.w	r1, r1, #1
 800dd5e:	f1c1 0302 	rsb	r3, r1, #2
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	b182      	cbz	r2, 800dd88 <__ieee754_pow+0xd8>
 800dd66:	e05d      	b.n	800de24 <__ieee754_pow+0x174>
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	d159      	bne.n	800de20 <__ieee754_pow+0x170>
 800dd6c:	f1c3 0314 	rsb	r3, r3, #20
 800dd70:	fa46 f103 	asr.w	r1, r6, r3
 800dd74:	fa01 f303 	lsl.w	r3, r1, r3
 800dd78:	42b3      	cmp	r3, r6
 800dd7a:	f040 8479 	bne.w	800e670 <__ieee754_pow+0x9c0>
 800dd7e:	f001 0101 	and.w	r1, r1, #1
 800dd82:	f1c1 0302 	rsb	r3, r1, #2
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	4b58      	ldr	r3, [pc, #352]	; (800deec <__ieee754_pow+0x23c>)
 800dd8a:	429e      	cmp	r6, r3
 800dd8c:	d132      	bne.n	800ddf4 <__ieee754_pow+0x144>
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	f280 846a 	bge.w	800e668 <__ieee754_pow+0x9b8>
 800dd94:	4642      	mov	r2, r8
 800dd96:	464b      	mov	r3, r9
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4954      	ldr	r1, [pc, #336]	; (800deec <__ieee754_pow+0x23c>)
 800dd9c:	f7f2 fcc6 	bl	800072c <__aeabi_ddiv>
 800dda0:	e7a3      	b.n	800dcea <__ieee754_pow+0x3a>
 800dda2:	2300      	movs	r3, #0
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d13c      	bne.n	800de24 <__ieee754_pow+0x174>
 800ddaa:	4b4e      	ldr	r3, [pc, #312]	; (800dee4 <__ieee754_pow+0x234>)
 800ddac:	429e      	cmp	r6, r3
 800ddae:	d1eb      	bne.n	800dd88 <__ieee754_pow+0xd8>
 800ddb0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ddb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ddb8:	ea53 030a 	orrs.w	r3, r3, sl
 800ddbc:	f000 8448 	beq.w	800e650 <__ieee754_pow+0x9a0>
 800ddc0:	4b4b      	ldr	r3, [pc, #300]	; (800def0 <__ieee754_pow+0x240>)
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	dd0b      	ble.n	800ddde <__ieee754_pow+0x12e>
 800ddc6:	2f00      	cmp	r7, #0
 800ddc8:	f2c0 8448 	blt.w	800e65c <__ieee754_pow+0x9ac>
 800ddcc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ddd0:	4658      	mov	r0, fp
 800ddd2:	4661      	mov	r1, ip
 800ddd4:	b013      	add	sp, #76	; 0x4c
 800ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddda:	2302      	movs	r3, #2
 800dddc:	e7e2      	b.n	800dda4 <__ieee754_pow+0xf4>
 800ddde:	2f00      	cmp	r7, #0
 800dde0:	f04f 0b00 	mov.w	fp, #0
 800dde4:	f04f 0c00 	mov.w	ip, #0
 800dde8:	daf2      	bge.n	800ddd0 <__ieee754_pow+0x120>
 800ddea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ddee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ddf2:	e7ed      	b.n	800ddd0 <__ieee754_pow+0x120>
 800ddf4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ddf8:	d106      	bne.n	800de08 <__ieee754_pow+0x158>
 800ddfa:	4642      	mov	r2, r8
 800ddfc:	464b      	mov	r3, r9
 800ddfe:	4640      	mov	r0, r8
 800de00:	4649      	mov	r1, r9
 800de02:	f7f2 fb69 	bl	80004d8 <__aeabi_dmul>
 800de06:	e770      	b.n	800dcea <__ieee754_pow+0x3a>
 800de08:	4b3a      	ldr	r3, [pc, #232]	; (800def4 <__ieee754_pow+0x244>)
 800de0a:	429f      	cmp	r7, r3
 800de0c:	d10a      	bne.n	800de24 <__ieee754_pow+0x174>
 800de0e:	2d00      	cmp	r5, #0
 800de10:	db08      	blt.n	800de24 <__ieee754_pow+0x174>
 800de12:	4640      	mov	r0, r8
 800de14:	4649      	mov	r1, r9
 800de16:	b013      	add	sp, #76	; 0x4c
 800de18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	f000 bc5e 	b.w	800e6dc <__ieee754_sqrt>
 800de20:	2300      	movs	r3, #0
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4640      	mov	r0, r8
 800de26:	4649      	mov	r1, r9
 800de28:	f000 fec0 	bl	800ebac <fabs>
 800de2c:	4683      	mov	fp, r0
 800de2e:	468c      	mov	ip, r1
 800de30:	f1ba 0f00 	cmp.w	sl, #0
 800de34:	d128      	bne.n	800de88 <__ieee754_pow+0x1d8>
 800de36:	b124      	cbz	r4, 800de42 <__ieee754_pow+0x192>
 800de38:	4b2c      	ldr	r3, [pc, #176]	; (800deec <__ieee754_pow+0x23c>)
 800de3a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800de3e:	429a      	cmp	r2, r3
 800de40:	d122      	bne.n	800de88 <__ieee754_pow+0x1d8>
 800de42:	2f00      	cmp	r7, #0
 800de44:	da07      	bge.n	800de56 <__ieee754_pow+0x1a6>
 800de46:	465a      	mov	r2, fp
 800de48:	4663      	mov	r3, ip
 800de4a:	2000      	movs	r0, #0
 800de4c:	4927      	ldr	r1, [pc, #156]	; (800deec <__ieee754_pow+0x23c>)
 800de4e:	f7f2 fc6d 	bl	800072c <__aeabi_ddiv>
 800de52:	4683      	mov	fp, r0
 800de54:	468c      	mov	ip, r1
 800de56:	2d00      	cmp	r5, #0
 800de58:	daba      	bge.n	800ddd0 <__ieee754_pow+0x120>
 800de5a:	9b00      	ldr	r3, [sp, #0]
 800de5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800de60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de64:	4323      	orrs	r3, r4
 800de66:	d108      	bne.n	800de7a <__ieee754_pow+0x1ca>
 800de68:	465a      	mov	r2, fp
 800de6a:	4663      	mov	r3, ip
 800de6c:	4658      	mov	r0, fp
 800de6e:	4661      	mov	r1, ip
 800de70:	f7f2 f97a 	bl	8000168 <__aeabi_dsub>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	e790      	b.n	800dd9c <__ieee754_pow+0xec>
 800de7a:	9b00      	ldr	r3, [sp, #0]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d1a7      	bne.n	800ddd0 <__ieee754_pow+0x120>
 800de80:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800de84:	469c      	mov	ip, r3
 800de86:	e7a3      	b.n	800ddd0 <__ieee754_pow+0x120>
 800de88:	0feb      	lsrs	r3, r5, #31
 800de8a:	3b01      	subs	r3, #1
 800de8c:	930c      	str	r3, [sp, #48]	; 0x30
 800de8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	4313      	orrs	r3, r2
 800de94:	d104      	bne.n	800dea0 <__ieee754_pow+0x1f0>
 800de96:	4642      	mov	r2, r8
 800de98:	464b      	mov	r3, r9
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	e7e7      	b.n	800de70 <__ieee754_pow+0x1c0>
 800dea0:	4b15      	ldr	r3, [pc, #84]	; (800def8 <__ieee754_pow+0x248>)
 800dea2:	429e      	cmp	r6, r3
 800dea4:	f340 80f6 	ble.w	800e094 <__ieee754_pow+0x3e4>
 800dea8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800deac:	429e      	cmp	r6, r3
 800deae:	4b10      	ldr	r3, [pc, #64]	; (800def0 <__ieee754_pow+0x240>)
 800deb0:	dd09      	ble.n	800dec6 <__ieee754_pow+0x216>
 800deb2:	429c      	cmp	r4, r3
 800deb4:	dc0c      	bgt.n	800ded0 <__ieee754_pow+0x220>
 800deb6:	2f00      	cmp	r7, #0
 800deb8:	da0c      	bge.n	800ded4 <__ieee754_pow+0x224>
 800deba:	2000      	movs	r0, #0
 800debc:	b013      	add	sp, #76	; 0x4c
 800debe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec2:	f000 bce2 	b.w	800e88a <__math_oflow>
 800dec6:	429c      	cmp	r4, r3
 800dec8:	dbf5      	blt.n	800deb6 <__ieee754_pow+0x206>
 800deca:	4b08      	ldr	r3, [pc, #32]	; (800deec <__ieee754_pow+0x23c>)
 800decc:	429c      	cmp	r4, r3
 800dece:	dd15      	ble.n	800defc <__ieee754_pow+0x24c>
 800ded0:	2f00      	cmp	r7, #0
 800ded2:	dcf2      	bgt.n	800deba <__ieee754_pow+0x20a>
 800ded4:	2000      	movs	r0, #0
 800ded6:	b013      	add	sp, #76	; 0x4c
 800ded8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	f000 bcd0 	b.w	800e880 <__math_uflow>
 800dee0:	fff00000 	.word	0xfff00000
 800dee4:	7ff00000 	.word	0x7ff00000
 800dee8:	433fffff 	.word	0x433fffff
 800deec:	3ff00000 	.word	0x3ff00000
 800def0:	3fefffff 	.word	0x3fefffff
 800def4:	3fe00000 	.word	0x3fe00000
 800def8:	41e00000 	.word	0x41e00000
 800defc:	4661      	mov	r1, ip
 800defe:	2200      	movs	r2, #0
 800df00:	4658      	mov	r0, fp
 800df02:	4b5f      	ldr	r3, [pc, #380]	; (800e080 <__ieee754_pow+0x3d0>)
 800df04:	f7f2 f930 	bl	8000168 <__aeabi_dsub>
 800df08:	a355      	add	r3, pc, #340	; (adr r3, 800e060 <__ieee754_pow+0x3b0>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	4604      	mov	r4, r0
 800df10:	460d      	mov	r5, r1
 800df12:	f7f2 fae1 	bl	80004d8 <__aeabi_dmul>
 800df16:	a354      	add	r3, pc, #336	; (adr r3, 800e068 <__ieee754_pow+0x3b8>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	4606      	mov	r6, r0
 800df1e:	460f      	mov	r7, r1
 800df20:	4620      	mov	r0, r4
 800df22:	4629      	mov	r1, r5
 800df24:	f7f2 fad8 	bl	80004d8 <__aeabi_dmul>
 800df28:	2200      	movs	r2, #0
 800df2a:	4682      	mov	sl, r0
 800df2c:	468b      	mov	fp, r1
 800df2e:	4620      	mov	r0, r4
 800df30:	4629      	mov	r1, r5
 800df32:	4b54      	ldr	r3, [pc, #336]	; (800e084 <__ieee754_pow+0x3d4>)
 800df34:	f7f2 fad0 	bl	80004d8 <__aeabi_dmul>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	a14c      	add	r1, pc, #304	; (adr r1, 800e070 <__ieee754_pow+0x3c0>)
 800df3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df42:	f7f2 f911 	bl	8000168 <__aeabi_dsub>
 800df46:	4622      	mov	r2, r4
 800df48:	462b      	mov	r3, r5
 800df4a:	f7f2 fac5 	bl	80004d8 <__aeabi_dmul>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	2000      	movs	r0, #0
 800df54:	494c      	ldr	r1, [pc, #304]	; (800e088 <__ieee754_pow+0x3d8>)
 800df56:	f7f2 f907 	bl	8000168 <__aeabi_dsub>
 800df5a:	4622      	mov	r2, r4
 800df5c:	462b      	mov	r3, r5
 800df5e:	4680      	mov	r8, r0
 800df60:	4689      	mov	r9, r1
 800df62:	4620      	mov	r0, r4
 800df64:	4629      	mov	r1, r5
 800df66:	f7f2 fab7 	bl	80004d8 <__aeabi_dmul>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4640      	mov	r0, r8
 800df70:	4649      	mov	r1, r9
 800df72:	f7f2 fab1 	bl	80004d8 <__aeabi_dmul>
 800df76:	a340      	add	r3, pc, #256	; (adr r3, 800e078 <__ieee754_pow+0x3c8>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 faac 	bl	80004d8 <__aeabi_dmul>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4650      	mov	r0, sl
 800df86:	4659      	mov	r1, fp
 800df88:	f7f2 f8ee 	bl	8000168 <__aeabi_dsub>
 800df8c:	f04f 0a00 	mov.w	sl, #0
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4604      	mov	r4, r0
 800df96:	460d      	mov	r5, r1
 800df98:	4630      	mov	r0, r6
 800df9a:	4639      	mov	r1, r7
 800df9c:	f7f2 f8e6 	bl	800016c <__adddf3>
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	4650      	mov	r0, sl
 800dfa6:	468b      	mov	fp, r1
 800dfa8:	f7f2 f8de 	bl	8000168 <__aeabi_dsub>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 f8d8 	bl	8000168 <__aeabi_dsub>
 800dfb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	f04f 0600 	mov.w	r6, #0
 800dfc8:	f04f 0200 	mov.w	r2, #0
 800dfcc:	bf0c      	ite	eq
 800dfce:	4b2f      	ldreq	r3, [pc, #188]	; (800e08c <__ieee754_pow+0x3dc>)
 800dfd0:	4b2b      	ldrne	r3, [pc, #172]	; (800e080 <__ieee754_pow+0x3d0>)
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfda:	e9cd 2300 	strd	r2, r3, [sp]
 800dfde:	4632      	mov	r2, r6
 800dfe0:	463b      	mov	r3, r7
 800dfe2:	f7f2 f8c1 	bl	8000168 <__aeabi_dsub>
 800dfe6:	4652      	mov	r2, sl
 800dfe8:	465b      	mov	r3, fp
 800dfea:	f7f2 fa75 	bl	80004d8 <__aeabi_dmul>
 800dfee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dff2:	4680      	mov	r8, r0
 800dff4:	4689      	mov	r9, r1
 800dff6:	4620      	mov	r0, r4
 800dff8:	4629      	mov	r1, r5
 800dffa:	f7f2 fa6d 	bl	80004d8 <__aeabi_dmul>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4640      	mov	r0, r8
 800e004:	4649      	mov	r1, r9
 800e006:	f7f2 f8b1 	bl	800016c <__adddf3>
 800e00a:	4632      	mov	r2, r6
 800e00c:	463b      	mov	r3, r7
 800e00e:	4680      	mov	r8, r0
 800e010:	4689      	mov	r9, r1
 800e012:	4650      	mov	r0, sl
 800e014:	4659      	mov	r1, fp
 800e016:	f7f2 fa5f 	bl	80004d8 <__aeabi_dmul>
 800e01a:	4604      	mov	r4, r0
 800e01c:	460d      	mov	r5, r1
 800e01e:	460b      	mov	r3, r1
 800e020:	4602      	mov	r2, r0
 800e022:	4649      	mov	r1, r9
 800e024:	4640      	mov	r0, r8
 800e026:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e02a:	f7f2 f89f 	bl	800016c <__adddf3>
 800e02e:	4b18      	ldr	r3, [pc, #96]	; (800e090 <__ieee754_pow+0x3e0>)
 800e030:	4682      	mov	sl, r0
 800e032:	4299      	cmp	r1, r3
 800e034:	460f      	mov	r7, r1
 800e036:	460e      	mov	r6, r1
 800e038:	f340 82e5 	ble.w	800e606 <__ieee754_pow+0x956>
 800e03c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e040:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e044:	4303      	orrs	r3, r0
 800e046:	f000 81df 	beq.w	800e408 <__ieee754_pow+0x758>
 800e04a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e04e:	2200      	movs	r2, #0
 800e050:	2300      	movs	r3, #0
 800e052:	f7f2 fcb3 	bl	80009bc <__aeabi_dcmplt>
 800e056:	3800      	subs	r0, #0
 800e058:	bf18      	it	ne
 800e05a:	2001      	movne	r0, #1
 800e05c:	e72e      	b.n	800debc <__ieee754_pow+0x20c>
 800e05e:	bf00      	nop
 800e060:	60000000 	.word	0x60000000
 800e064:	3ff71547 	.word	0x3ff71547
 800e068:	f85ddf44 	.word	0xf85ddf44
 800e06c:	3e54ae0b 	.word	0x3e54ae0b
 800e070:	55555555 	.word	0x55555555
 800e074:	3fd55555 	.word	0x3fd55555
 800e078:	652b82fe 	.word	0x652b82fe
 800e07c:	3ff71547 	.word	0x3ff71547
 800e080:	3ff00000 	.word	0x3ff00000
 800e084:	3fd00000 	.word	0x3fd00000
 800e088:	3fe00000 	.word	0x3fe00000
 800e08c:	bff00000 	.word	0xbff00000
 800e090:	408fffff 	.word	0x408fffff
 800e094:	4bd2      	ldr	r3, [pc, #840]	; (800e3e0 <__ieee754_pow+0x730>)
 800e096:	2200      	movs	r2, #0
 800e098:	402b      	ands	r3, r5
 800e09a:	b943      	cbnz	r3, 800e0ae <__ieee754_pow+0x3fe>
 800e09c:	4658      	mov	r0, fp
 800e09e:	4661      	mov	r1, ip
 800e0a0:	4bd0      	ldr	r3, [pc, #832]	; (800e3e4 <__ieee754_pow+0x734>)
 800e0a2:	f7f2 fa19 	bl	80004d8 <__aeabi_dmul>
 800e0a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e0aa:	4683      	mov	fp, r0
 800e0ac:	460c      	mov	r4, r1
 800e0ae:	1523      	asrs	r3, r4, #20
 800e0b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e0b4:	4413      	add	r3, r2
 800e0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0b8:	4bcb      	ldr	r3, [pc, #812]	; (800e3e8 <__ieee754_pow+0x738>)
 800e0ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e0be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e0c8:	dd08      	ble.n	800e0dc <__ieee754_pow+0x42c>
 800e0ca:	4bc8      	ldr	r3, [pc, #800]	; (800e3ec <__ieee754_pow+0x73c>)
 800e0cc:	429c      	cmp	r4, r3
 800e0ce:	f340 8199 	ble.w	800e404 <__ieee754_pow+0x754>
 800e0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e0d8:	3301      	adds	r3, #1
 800e0da:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0dc:	2600      	movs	r6, #0
 800e0de:	00f3      	lsls	r3, r6, #3
 800e0e0:	930d      	str	r3, [sp, #52]	; 0x34
 800e0e2:	4bc3      	ldr	r3, [pc, #780]	; (800e3f0 <__ieee754_pow+0x740>)
 800e0e4:	4658      	mov	r0, fp
 800e0e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	f7f2 f836 	bl	8000168 <__aeabi_dsub>
 800e0fc:	46da      	mov	sl, fp
 800e0fe:	462b      	mov	r3, r5
 800e100:	4652      	mov	r2, sl
 800e102:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e106:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e10a:	f7f2 f82f 	bl	800016c <__adddf3>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	2000      	movs	r0, #0
 800e114:	49b7      	ldr	r1, [pc, #732]	; (800e3f4 <__ieee754_pow+0x744>)
 800e116:	f7f2 fb09 	bl	800072c <__aeabi_ddiv>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e122:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e126:	f7f2 f9d7 	bl	80004d8 <__aeabi_dmul>
 800e12a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e12e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e132:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e136:	2300      	movs	r3, #0
 800e138:	2200      	movs	r2, #0
 800e13a:	46ab      	mov	fp, r5
 800e13c:	106d      	asrs	r5, r5, #1
 800e13e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e148:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e14c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e150:	4640      	mov	r0, r8
 800e152:	4649      	mov	r1, r9
 800e154:	4614      	mov	r4, r2
 800e156:	461d      	mov	r5, r3
 800e158:	f7f2 f9be 	bl	80004d8 <__aeabi_dmul>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e164:	f7f2 f800 	bl	8000168 <__aeabi_dsub>
 800e168:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e16c:	4606      	mov	r6, r0
 800e16e:	460f      	mov	r7, r1
 800e170:	4620      	mov	r0, r4
 800e172:	4629      	mov	r1, r5
 800e174:	f7f1 fff8 	bl	8000168 <__aeabi_dsub>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	4650      	mov	r0, sl
 800e17e:	4659      	mov	r1, fp
 800e180:	f7f1 fff2 	bl	8000168 <__aeabi_dsub>
 800e184:	4642      	mov	r2, r8
 800e186:	464b      	mov	r3, r9
 800e188:	f7f2 f9a6 	bl	80004d8 <__aeabi_dmul>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f1 ffe8 	bl	8000168 <__aeabi_dsub>
 800e198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e19c:	f7f2 f99c 	bl	80004d8 <__aeabi_dmul>
 800e1a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	f7f2 f994 	bl	80004d8 <__aeabi_dmul>
 800e1b0:	a379      	add	r3, pc, #484	; (adr r3, 800e398 <__ieee754_pow+0x6e8>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	460d      	mov	r5, r1
 800e1ba:	f7f2 f98d 	bl	80004d8 <__aeabi_dmul>
 800e1be:	a378      	add	r3, pc, #480	; (adr r3, 800e3a0 <__ieee754_pow+0x6f0>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	f7f1 ffd2 	bl	800016c <__adddf3>
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	462b      	mov	r3, r5
 800e1cc:	f7f2 f984 	bl	80004d8 <__aeabi_dmul>
 800e1d0:	a375      	add	r3, pc, #468	; (adr r3, 800e3a8 <__ieee754_pow+0x6f8>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f1 ffc9 	bl	800016c <__adddf3>
 800e1da:	4622      	mov	r2, r4
 800e1dc:	462b      	mov	r3, r5
 800e1de:	f7f2 f97b 	bl	80004d8 <__aeabi_dmul>
 800e1e2:	a373      	add	r3, pc, #460	; (adr r3, 800e3b0 <__ieee754_pow+0x700>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	f7f1 ffc0 	bl	800016c <__adddf3>
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	462b      	mov	r3, r5
 800e1f0:	f7f2 f972 	bl	80004d8 <__aeabi_dmul>
 800e1f4:	a370      	add	r3, pc, #448	; (adr r3, 800e3b8 <__ieee754_pow+0x708>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f1 ffb7 	bl	800016c <__adddf3>
 800e1fe:	4622      	mov	r2, r4
 800e200:	462b      	mov	r3, r5
 800e202:	f7f2 f969 	bl	80004d8 <__aeabi_dmul>
 800e206:	a36e      	add	r3, pc, #440	; (adr r3, 800e3c0 <__ieee754_pow+0x710>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	f7f1 ffae 	bl	800016c <__adddf3>
 800e210:	4622      	mov	r2, r4
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	462b      	mov	r3, r5
 800e218:	4620      	mov	r0, r4
 800e21a:	4629      	mov	r1, r5
 800e21c:	f7f2 f95c 	bl	80004d8 <__aeabi_dmul>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	4630      	mov	r0, r6
 800e226:	4639      	mov	r1, r7
 800e228:	f7f2 f956 	bl	80004d8 <__aeabi_dmul>
 800e22c:	4604      	mov	r4, r0
 800e22e:	460d      	mov	r5, r1
 800e230:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e234:	4642      	mov	r2, r8
 800e236:	464b      	mov	r3, r9
 800e238:	f7f1 ff98 	bl	800016c <__adddf3>
 800e23c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e240:	f7f2 f94a 	bl	80004d8 <__aeabi_dmul>
 800e244:	4622      	mov	r2, r4
 800e246:	462b      	mov	r3, r5
 800e248:	f7f1 ff90 	bl	800016c <__adddf3>
 800e24c:	4642      	mov	r2, r8
 800e24e:	4606      	mov	r6, r0
 800e250:	460f      	mov	r7, r1
 800e252:	464b      	mov	r3, r9
 800e254:	4640      	mov	r0, r8
 800e256:	4649      	mov	r1, r9
 800e258:	f7f2 f93e 	bl	80004d8 <__aeabi_dmul>
 800e25c:	2200      	movs	r2, #0
 800e25e:	4b66      	ldr	r3, [pc, #408]	; (800e3f8 <__ieee754_pow+0x748>)
 800e260:	4682      	mov	sl, r0
 800e262:	468b      	mov	fp, r1
 800e264:	f7f1 ff82 	bl	800016c <__adddf3>
 800e268:	4632      	mov	r2, r6
 800e26a:	463b      	mov	r3, r7
 800e26c:	f7f1 ff7e 	bl	800016c <__adddf3>
 800e270:	2400      	movs	r4, #0
 800e272:	460d      	mov	r5, r1
 800e274:	4622      	mov	r2, r4
 800e276:	460b      	mov	r3, r1
 800e278:	4640      	mov	r0, r8
 800e27a:	4649      	mov	r1, r9
 800e27c:	f7f2 f92c 	bl	80004d8 <__aeabi_dmul>
 800e280:	2200      	movs	r2, #0
 800e282:	4680      	mov	r8, r0
 800e284:	4689      	mov	r9, r1
 800e286:	4620      	mov	r0, r4
 800e288:	4629      	mov	r1, r5
 800e28a:	4b5b      	ldr	r3, [pc, #364]	; (800e3f8 <__ieee754_pow+0x748>)
 800e28c:	f7f1 ff6c 	bl	8000168 <__aeabi_dsub>
 800e290:	4652      	mov	r2, sl
 800e292:	465b      	mov	r3, fp
 800e294:	f7f1 ff68 	bl	8000168 <__aeabi_dsub>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4630      	mov	r0, r6
 800e29e:	4639      	mov	r1, r7
 800e2a0:	f7f1 ff62 	bl	8000168 <__aeabi_dsub>
 800e2a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2a8:	f7f2 f916 	bl	80004d8 <__aeabi_dmul>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	460f      	mov	r7, r1
 800e2b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e2b6:	462b      	mov	r3, r5
 800e2b8:	f7f2 f90e 	bl	80004d8 <__aeabi_dmul>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f1 ff52 	bl	800016c <__adddf3>
 800e2c8:	2400      	movs	r4, #0
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460f      	mov	r7, r1
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	f7f1 ff49 	bl	800016c <__adddf3>
 800e2da:	a33b      	add	r3, pc, #236	; (adr r3, 800e3c8 <__ieee754_pow+0x718>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	460d      	mov	r5, r1
 800e2e4:	f7f2 f8f8 	bl	80004d8 <__aeabi_dmul>
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f1 ff38 	bl	8000168 <__aeabi_dsub>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	4639      	mov	r1, r7
 800e300:	f7f1 ff32 	bl	8000168 <__aeabi_dsub>
 800e304:	a332      	add	r3, pc, #200	; (adr r3, 800e3d0 <__ieee754_pow+0x720>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f2 f8e5 	bl	80004d8 <__aeabi_dmul>
 800e30e:	a332      	add	r3, pc, #200	; (adr r3, 800e3d8 <__ieee754_pow+0x728>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	4606      	mov	r6, r0
 800e316:	460f      	mov	r7, r1
 800e318:	4620      	mov	r0, r4
 800e31a:	4629      	mov	r1, r5
 800e31c:	f7f2 f8dc 	bl	80004d8 <__aeabi_dmul>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4630      	mov	r0, r6
 800e326:	4639      	mov	r1, r7
 800e328:	f7f1 ff20 	bl	800016c <__adddf3>
 800e32c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e32e:	4b33      	ldr	r3, [pc, #204]	; (800e3fc <__ieee754_pow+0x74c>)
 800e330:	f04f 0a00 	mov.w	sl, #0
 800e334:	4413      	add	r3, r2
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f7f1 ff17 	bl	800016c <__adddf3>
 800e33e:	4680      	mov	r8, r0
 800e340:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e342:	4689      	mov	r9, r1
 800e344:	f7f2 f85e 	bl	8000404 <__aeabi_i2d>
 800e348:	4604      	mov	r4, r0
 800e34a:	460d      	mov	r5, r1
 800e34c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e34e:	4b2c      	ldr	r3, [pc, #176]	; (800e400 <__ieee754_pow+0x750>)
 800e350:	4413      	add	r3, r2
 800e352:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e356:	4642      	mov	r2, r8
 800e358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e35c:	464b      	mov	r3, r9
 800e35e:	f7f1 ff05 	bl	800016c <__adddf3>
 800e362:	4632      	mov	r2, r6
 800e364:	463b      	mov	r3, r7
 800e366:	f7f1 ff01 	bl	800016c <__adddf3>
 800e36a:	4622      	mov	r2, r4
 800e36c:	462b      	mov	r3, r5
 800e36e:	f7f1 fefd 	bl	800016c <__adddf3>
 800e372:	4622      	mov	r2, r4
 800e374:	462b      	mov	r3, r5
 800e376:	4650      	mov	r0, sl
 800e378:	468b      	mov	fp, r1
 800e37a:	f7f1 fef5 	bl	8000168 <__aeabi_dsub>
 800e37e:	4632      	mov	r2, r6
 800e380:	463b      	mov	r3, r7
 800e382:	f7f1 fef1 	bl	8000168 <__aeabi_dsub>
 800e386:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e38a:	f7f1 feed 	bl	8000168 <__aeabi_dsub>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4640      	mov	r0, r8
 800e394:	4649      	mov	r1, r9
 800e396:	e60d      	b.n	800dfb4 <__ieee754_pow+0x304>
 800e398:	4a454eef 	.word	0x4a454eef
 800e39c:	3fca7e28 	.word	0x3fca7e28
 800e3a0:	93c9db65 	.word	0x93c9db65
 800e3a4:	3fcd864a 	.word	0x3fcd864a
 800e3a8:	a91d4101 	.word	0xa91d4101
 800e3ac:	3fd17460 	.word	0x3fd17460
 800e3b0:	518f264d 	.word	0x518f264d
 800e3b4:	3fd55555 	.word	0x3fd55555
 800e3b8:	db6fabff 	.word	0xdb6fabff
 800e3bc:	3fdb6db6 	.word	0x3fdb6db6
 800e3c0:	33333303 	.word	0x33333303
 800e3c4:	3fe33333 	.word	0x3fe33333
 800e3c8:	e0000000 	.word	0xe0000000
 800e3cc:	3feec709 	.word	0x3feec709
 800e3d0:	dc3a03fd 	.word	0xdc3a03fd
 800e3d4:	3feec709 	.word	0x3feec709
 800e3d8:	145b01f5 	.word	0x145b01f5
 800e3dc:	be3e2fe0 	.word	0xbe3e2fe0
 800e3e0:	7ff00000 	.word	0x7ff00000
 800e3e4:	43400000 	.word	0x43400000
 800e3e8:	0003988e 	.word	0x0003988e
 800e3ec:	000bb679 	.word	0x000bb679
 800e3f0:	0800f1a8 	.word	0x0800f1a8
 800e3f4:	3ff00000 	.word	0x3ff00000
 800e3f8:	40080000 	.word	0x40080000
 800e3fc:	0800f1c8 	.word	0x0800f1c8
 800e400:	0800f1b8 	.word	0x0800f1b8
 800e404:	2601      	movs	r6, #1
 800e406:	e66a      	b.n	800e0de <__ieee754_pow+0x42e>
 800e408:	a39d      	add	r3, pc, #628	; (adr r3, 800e680 <__ieee754_pow+0x9d0>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	4640      	mov	r0, r8
 800e410:	4649      	mov	r1, r9
 800e412:	f7f1 feab 	bl	800016c <__adddf3>
 800e416:	4622      	mov	r2, r4
 800e418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e41c:	462b      	mov	r3, r5
 800e41e:	4650      	mov	r0, sl
 800e420:	4639      	mov	r1, r7
 800e422:	f7f1 fea1 	bl	8000168 <__aeabi_dsub>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e42e:	f7f2 fae3 	bl	80009f8 <__aeabi_dcmpgt>
 800e432:	2800      	cmp	r0, #0
 800e434:	f47f ae09 	bne.w	800e04a <__ieee754_pow+0x39a>
 800e438:	4aa3      	ldr	r2, [pc, #652]	; (800e6c8 <__ieee754_pow+0xa18>)
 800e43a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e43e:	4293      	cmp	r3, r2
 800e440:	f340 8101 	ble.w	800e646 <__ieee754_pow+0x996>
 800e444:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e448:	2000      	movs	r0, #0
 800e44a:	151b      	asrs	r3, r3, #20
 800e44c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e450:	fa4a f303 	asr.w	r3, sl, r3
 800e454:	4433      	add	r3, r6
 800e456:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e45a:	4f9c      	ldr	r7, [pc, #624]	; (800e6cc <__ieee754_pow+0xa1c>)
 800e45c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e460:	4117      	asrs	r7, r2
 800e462:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e466:	ea23 0107 	bic.w	r1, r3, r7
 800e46a:	f1c2 0214 	rsb	r2, r2, #20
 800e46e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e472:	460b      	mov	r3, r1
 800e474:	fa4a fa02 	asr.w	sl, sl, r2
 800e478:	2e00      	cmp	r6, #0
 800e47a:	4602      	mov	r2, r0
 800e47c:	4629      	mov	r1, r5
 800e47e:	4620      	mov	r0, r4
 800e480:	bfb8      	it	lt
 800e482:	f1ca 0a00 	rsblt	sl, sl, #0
 800e486:	f7f1 fe6f 	bl	8000168 <__aeabi_dsub>
 800e48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e492:	2400      	movs	r4, #0
 800e494:	4642      	mov	r2, r8
 800e496:	464b      	mov	r3, r9
 800e498:	f7f1 fe68 	bl	800016c <__adddf3>
 800e49c:	a37a      	add	r3, pc, #488	; (adr r3, 800e688 <__ieee754_pow+0x9d8>)
 800e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	460d      	mov	r5, r1
 800e4a6:	f7f2 f817 	bl	80004d8 <__aeabi_dmul>
 800e4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f1 fe57 	bl	8000168 <__aeabi_dsub>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	4640      	mov	r0, r8
 800e4c0:	4649      	mov	r1, r9
 800e4c2:	f7f1 fe51 	bl	8000168 <__aeabi_dsub>
 800e4c6:	a372      	add	r3, pc, #456	; (adr r3, 800e690 <__ieee754_pow+0x9e0>)
 800e4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4cc:	f7f2 f804 	bl	80004d8 <__aeabi_dmul>
 800e4d0:	a371      	add	r3, pc, #452	; (adr r3, 800e698 <__ieee754_pow+0x9e8>)
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	4680      	mov	r8, r0
 800e4d8:	4689      	mov	r9, r1
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f7f1 fffb 	bl	80004d8 <__aeabi_dmul>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	f7f1 fe3f 	bl	800016c <__adddf3>
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	f7f1 fe37 	bl	800016c <__adddf3>
 800e4fe:	4632      	mov	r2, r6
 800e500:	463b      	mov	r3, r7
 800e502:	4680      	mov	r8, r0
 800e504:	4689      	mov	r9, r1
 800e506:	f7f1 fe2f 	bl	8000168 <__aeabi_dsub>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4620      	mov	r0, r4
 800e510:	4629      	mov	r1, r5
 800e512:	f7f1 fe29 	bl	8000168 <__aeabi_dsub>
 800e516:	4642      	mov	r2, r8
 800e518:	4606      	mov	r6, r0
 800e51a:	460f      	mov	r7, r1
 800e51c:	464b      	mov	r3, r9
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	f7f1 ffd9 	bl	80004d8 <__aeabi_dmul>
 800e526:	a35e      	add	r3, pc, #376	; (adr r3, 800e6a0 <__ieee754_pow+0x9f0>)
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	4604      	mov	r4, r0
 800e52e:	460d      	mov	r5, r1
 800e530:	f7f1 ffd2 	bl	80004d8 <__aeabi_dmul>
 800e534:	a35c      	add	r3, pc, #368	; (adr r3, 800e6a8 <__ieee754_pow+0x9f8>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fe15 	bl	8000168 <__aeabi_dsub>
 800e53e:	4622      	mov	r2, r4
 800e540:	462b      	mov	r3, r5
 800e542:	f7f1 ffc9 	bl	80004d8 <__aeabi_dmul>
 800e546:	a35a      	add	r3, pc, #360	; (adr r3, 800e6b0 <__ieee754_pow+0xa00>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 fe0e 	bl	800016c <__adddf3>
 800e550:	4622      	mov	r2, r4
 800e552:	462b      	mov	r3, r5
 800e554:	f7f1 ffc0 	bl	80004d8 <__aeabi_dmul>
 800e558:	a357      	add	r3, pc, #348	; (adr r3, 800e6b8 <__ieee754_pow+0xa08>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 fe03 	bl	8000168 <__aeabi_dsub>
 800e562:	4622      	mov	r2, r4
 800e564:	462b      	mov	r3, r5
 800e566:	f7f1 ffb7 	bl	80004d8 <__aeabi_dmul>
 800e56a:	a355      	add	r3, pc, #340	; (adr r3, 800e6c0 <__ieee754_pow+0xa10>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 fdfc 	bl	800016c <__adddf3>
 800e574:	4622      	mov	r2, r4
 800e576:	462b      	mov	r3, r5
 800e578:	f7f1 ffae 	bl	80004d8 <__aeabi_dmul>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4640      	mov	r0, r8
 800e582:	4649      	mov	r1, r9
 800e584:	f7f1 fdf0 	bl	8000168 <__aeabi_dsub>
 800e588:	4604      	mov	r4, r0
 800e58a:	460d      	mov	r5, r1
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	4640      	mov	r0, r8
 800e592:	4649      	mov	r1, r9
 800e594:	f7f1 ffa0 	bl	80004d8 <__aeabi_dmul>
 800e598:	2200      	movs	r2, #0
 800e59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	f7f1 fddf 	bl	8000168 <__aeabi_dsub>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b2:	f7f2 f8bb 	bl	800072c <__aeabi_ddiv>
 800e5b6:	4632      	mov	r2, r6
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	463b      	mov	r3, r7
 800e5be:	4640      	mov	r0, r8
 800e5c0:	4649      	mov	r1, r9
 800e5c2:	f7f1 ff89 	bl	80004d8 <__aeabi_dmul>
 800e5c6:	4632      	mov	r2, r6
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	f7f1 fdcf 	bl	800016c <__adddf3>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f7f1 fdc7 	bl	8000168 <__aeabi_dsub>
 800e5da:	4642      	mov	r2, r8
 800e5dc:	464b      	mov	r3, r9
 800e5de:	f7f1 fdc3 	bl	8000168 <__aeabi_dsub>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	4939      	ldr	r1, [pc, #228]	; (800e6d0 <__ieee754_pow+0xa20>)
 800e5ea:	f7f1 fdbd 	bl	8000168 <__aeabi_dsub>
 800e5ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e5f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e5f6:	da29      	bge.n	800e64c <__ieee754_pow+0x99c>
 800e5f8:	4652      	mov	r2, sl
 800e5fa:	f000 fae1 	bl	800ebc0 <scalbn>
 800e5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e602:	f7ff bbfe 	b.w	800de02 <__ieee754_pow+0x152>
 800e606:	4b33      	ldr	r3, [pc, #204]	; (800e6d4 <__ieee754_pow+0xa24>)
 800e608:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800e60c:	429f      	cmp	r7, r3
 800e60e:	f77f af13 	ble.w	800e438 <__ieee754_pow+0x788>
 800e612:	4b31      	ldr	r3, [pc, #196]	; (800e6d8 <__ieee754_pow+0xa28>)
 800e614:	440b      	add	r3, r1
 800e616:	4303      	orrs	r3, r0
 800e618:	d009      	beq.n	800e62e <__ieee754_pow+0x97e>
 800e61a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e61e:	2200      	movs	r2, #0
 800e620:	2300      	movs	r3, #0
 800e622:	f7f2 f9cb 	bl	80009bc <__aeabi_dcmplt>
 800e626:	3800      	subs	r0, #0
 800e628:	bf18      	it	ne
 800e62a:	2001      	movne	r0, #1
 800e62c:	e453      	b.n	800ded6 <__ieee754_pow+0x226>
 800e62e:	4622      	mov	r2, r4
 800e630:	462b      	mov	r3, r5
 800e632:	f7f1 fd99 	bl	8000168 <__aeabi_dsub>
 800e636:	4642      	mov	r2, r8
 800e638:	464b      	mov	r3, r9
 800e63a:	f7f2 f9d3 	bl	80009e4 <__aeabi_dcmpge>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f43f aefa 	beq.w	800e438 <__ieee754_pow+0x788>
 800e644:	e7e9      	b.n	800e61a <__ieee754_pow+0x96a>
 800e646:	f04f 0a00 	mov.w	sl, #0
 800e64a:	e720      	b.n	800e48e <__ieee754_pow+0x7de>
 800e64c:	4621      	mov	r1, r4
 800e64e:	e7d6      	b.n	800e5fe <__ieee754_pow+0x94e>
 800e650:	f04f 0b00 	mov.w	fp, #0
 800e654:	f8df c078 	ldr.w	ip, [pc, #120]	; 800e6d0 <__ieee754_pow+0xa20>
 800e658:	f7ff bbba 	b.w	800ddd0 <__ieee754_pow+0x120>
 800e65c:	f04f 0b00 	mov.w	fp, #0
 800e660:	f04f 0c00 	mov.w	ip, #0
 800e664:	f7ff bbb4 	b.w	800ddd0 <__ieee754_pow+0x120>
 800e668:	4640      	mov	r0, r8
 800e66a:	4649      	mov	r1, r9
 800e66c:	f7ff bb3d 	b.w	800dcea <__ieee754_pow+0x3a>
 800e670:	9200      	str	r2, [sp, #0]
 800e672:	f7ff bb89 	b.w	800dd88 <__ieee754_pow+0xd8>
 800e676:	2300      	movs	r3, #0
 800e678:	f7ff bb73 	b.w	800dd62 <__ieee754_pow+0xb2>
 800e67c:	f3af 8000 	nop.w
 800e680:	652b82fe 	.word	0x652b82fe
 800e684:	3c971547 	.word	0x3c971547
 800e688:	00000000 	.word	0x00000000
 800e68c:	3fe62e43 	.word	0x3fe62e43
 800e690:	fefa39ef 	.word	0xfefa39ef
 800e694:	3fe62e42 	.word	0x3fe62e42
 800e698:	0ca86c39 	.word	0x0ca86c39
 800e69c:	be205c61 	.word	0xbe205c61
 800e6a0:	72bea4d0 	.word	0x72bea4d0
 800e6a4:	3e663769 	.word	0x3e663769
 800e6a8:	c5d26bf1 	.word	0xc5d26bf1
 800e6ac:	3ebbbd41 	.word	0x3ebbbd41
 800e6b0:	af25de2c 	.word	0xaf25de2c
 800e6b4:	3f11566a 	.word	0x3f11566a
 800e6b8:	16bebd93 	.word	0x16bebd93
 800e6bc:	3f66c16c 	.word	0x3f66c16c
 800e6c0:	5555553e 	.word	0x5555553e
 800e6c4:	3fc55555 	.word	0x3fc55555
 800e6c8:	3fe00000 	.word	0x3fe00000
 800e6cc:	000fffff 	.word	0x000fffff
 800e6d0:	3ff00000 	.word	0x3ff00000
 800e6d4:	4090cbff 	.word	0x4090cbff
 800e6d8:	3f6f3400 	.word	0x3f6f3400

0800e6dc <__ieee754_sqrt>:
 800e6dc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800e838 <__ieee754_sqrt+0x15c>
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	ea3c 0c01 	bics.w	ip, ip, r1
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	460c      	mov	r4, r1
 800e6ee:	460a      	mov	r2, r1
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	d10f      	bne.n	800e716 <__ieee754_sqrt+0x3a>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	f7f1 feed 	bl	80004d8 <__aeabi_dmul>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4630      	mov	r0, r6
 800e704:	4629      	mov	r1, r5
 800e706:	f7f1 fd31 	bl	800016c <__adddf3>
 800e70a:	4606      	mov	r6, r0
 800e70c:	460d      	mov	r5, r1
 800e70e:	4630      	mov	r0, r6
 800e710:	4629      	mov	r1, r5
 800e712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e716:	2900      	cmp	r1, #0
 800e718:	dc0e      	bgt.n	800e738 <__ieee754_sqrt+0x5c>
 800e71a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e71e:	ea5c 0707 	orrs.w	r7, ip, r7
 800e722:	d0f4      	beq.n	800e70e <__ieee754_sqrt+0x32>
 800e724:	b141      	cbz	r1, 800e738 <__ieee754_sqrt+0x5c>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	f7f1 fd1d 	bl	8000168 <__aeabi_dsub>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	f7f1 fffb 	bl	800072c <__aeabi_ddiv>
 800e736:	e7e8      	b.n	800e70a <__ieee754_sqrt+0x2e>
 800e738:	1521      	asrs	r1, r4, #20
 800e73a:	d075      	beq.n	800e828 <__ieee754_sqrt+0x14c>
 800e73c:	07cc      	lsls	r4, r1, #31
 800e73e:	f04f 0400 	mov.w	r4, #0
 800e742:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e746:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e74a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e74e:	bf5e      	ittt	pl
 800e750:	0fd9      	lsrpl	r1, r3, #31
 800e752:	005b      	lslpl	r3, r3, #1
 800e754:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800e758:	0fd9      	lsrs	r1, r3, #31
 800e75a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e75e:	2516      	movs	r5, #22
 800e760:	4620      	mov	r0, r4
 800e762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e766:	107f      	asrs	r7, r7, #1
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	1846      	adds	r6, r0, r1
 800e76c:	4296      	cmp	r6, r2
 800e76e:	bfde      	ittt	le
 800e770:	1b92      	suble	r2, r2, r6
 800e772:	1870      	addle	r0, r6, r1
 800e774:	1864      	addle	r4, r4, r1
 800e776:	0052      	lsls	r2, r2, #1
 800e778:	3d01      	subs	r5, #1
 800e77a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e77e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e782:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e786:	d1f0      	bne.n	800e76a <__ieee754_sqrt+0x8e>
 800e788:	4629      	mov	r1, r5
 800e78a:	f04f 0e20 	mov.w	lr, #32
 800e78e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e792:	4282      	cmp	r2, r0
 800e794:	eb06 0c05 	add.w	ip, r6, r5
 800e798:	dc02      	bgt.n	800e7a0 <__ieee754_sqrt+0xc4>
 800e79a:	d113      	bne.n	800e7c4 <__ieee754_sqrt+0xe8>
 800e79c:	459c      	cmp	ip, r3
 800e79e:	d811      	bhi.n	800e7c4 <__ieee754_sqrt+0xe8>
 800e7a0:	f1bc 0f00 	cmp.w	ip, #0
 800e7a4:	eb0c 0506 	add.w	r5, ip, r6
 800e7a8:	da43      	bge.n	800e832 <__ieee754_sqrt+0x156>
 800e7aa:	2d00      	cmp	r5, #0
 800e7ac:	db41      	blt.n	800e832 <__ieee754_sqrt+0x156>
 800e7ae:	f100 0801 	add.w	r8, r0, #1
 800e7b2:	1a12      	subs	r2, r2, r0
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	459c      	cmp	ip, r3
 800e7b8:	bf88      	it	hi
 800e7ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e7be:	eba3 030c 	sub.w	r3, r3, ip
 800e7c2:	4431      	add	r1, r6
 800e7c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e7c8:	f1be 0e01 	subs.w	lr, lr, #1
 800e7cc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800e7d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e7d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e7d8:	d1db      	bne.n	800e792 <__ieee754_sqrt+0xb6>
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	d006      	beq.n	800e7ec <__ieee754_sqrt+0x110>
 800e7de:	1c48      	adds	r0, r1, #1
 800e7e0:	bf0b      	itete	eq
 800e7e2:	4671      	moveq	r1, lr
 800e7e4:	3101      	addne	r1, #1
 800e7e6:	3401      	addeq	r4, #1
 800e7e8:	f021 0101 	bicne.w	r1, r1, #1
 800e7ec:	1063      	asrs	r3, r4, #1
 800e7ee:	0849      	lsrs	r1, r1, #1
 800e7f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e7f4:	07e2      	lsls	r2, r4, #31
 800e7f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e7fa:	bf48      	it	mi
 800e7fc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e800:	460e      	mov	r6, r1
 800e802:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e806:	e782      	b.n	800e70e <__ieee754_sqrt+0x32>
 800e808:	0ada      	lsrs	r2, r3, #11
 800e80a:	3815      	subs	r0, #21
 800e80c:	055b      	lsls	r3, r3, #21
 800e80e:	2a00      	cmp	r2, #0
 800e810:	d0fa      	beq.n	800e808 <__ieee754_sqrt+0x12c>
 800e812:	02d5      	lsls	r5, r2, #11
 800e814:	d50a      	bpl.n	800e82c <__ieee754_sqrt+0x150>
 800e816:	f1c1 0420 	rsb	r4, r1, #32
 800e81a:	fa23 f404 	lsr.w	r4, r3, r4
 800e81e:	1e4d      	subs	r5, r1, #1
 800e820:	408b      	lsls	r3, r1
 800e822:	4322      	orrs	r2, r4
 800e824:	1b41      	subs	r1, r0, r5
 800e826:	e789      	b.n	800e73c <__ieee754_sqrt+0x60>
 800e828:	4608      	mov	r0, r1
 800e82a:	e7f0      	b.n	800e80e <__ieee754_sqrt+0x132>
 800e82c:	0052      	lsls	r2, r2, #1
 800e82e:	3101      	adds	r1, #1
 800e830:	e7ef      	b.n	800e812 <__ieee754_sqrt+0x136>
 800e832:	4680      	mov	r8, r0
 800e834:	e7bd      	b.n	800e7b2 <__ieee754_sqrt+0xd6>
 800e836:	bf00      	nop
 800e838:	7ff00000 	.word	0x7ff00000

0800e83c <with_errno>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	4604      	mov	r4, r0
 800e840:	460d      	mov	r5, r1
 800e842:	4616      	mov	r6, r2
 800e844:	f7fc f9c6 	bl	800abd4 <__errno>
 800e848:	4629      	mov	r1, r5
 800e84a:	6006      	str	r6, [r0, #0]
 800e84c:	4620      	mov	r0, r4
 800e84e:	bd70      	pop	{r4, r5, r6, pc}

0800e850 <xflow>:
 800e850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e852:	4615      	mov	r5, r2
 800e854:	461c      	mov	r4, r3
 800e856:	b180      	cbz	r0, 800e87a <xflow+0x2a>
 800e858:	4610      	mov	r0, r2
 800e85a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e85e:	e9cd 0100 	strd	r0, r1, [sp]
 800e862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e866:	4628      	mov	r0, r5
 800e868:	4621      	mov	r1, r4
 800e86a:	f7f1 fe35 	bl	80004d8 <__aeabi_dmul>
 800e86e:	2222      	movs	r2, #34	; 0x22
 800e870:	b003      	add	sp, #12
 800e872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e876:	f7ff bfe1 	b.w	800e83c <with_errno>
 800e87a:	4610      	mov	r0, r2
 800e87c:	4619      	mov	r1, r3
 800e87e:	e7ee      	b.n	800e85e <xflow+0xe>

0800e880 <__math_uflow>:
 800e880:	2200      	movs	r2, #0
 800e882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e886:	f7ff bfe3 	b.w	800e850 <xflow>

0800e88a <__math_oflow>:
 800e88a:	2200      	movs	r2, #0
 800e88c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e890:	f7ff bfde 	b.w	800e850 <xflow>
 800e894:	0000      	movs	r0, r0
	...

0800e898 <atan>:
 800e898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	4bb6      	ldr	r3, [pc, #728]	; (800eb78 <atan+0x2e0>)
 800e89e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e8a2:	429e      	cmp	r6, r3
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	468b      	mov	fp, r1
 800e8aa:	dd17      	ble.n	800e8dc <atan+0x44>
 800e8ac:	4bb3      	ldr	r3, [pc, #716]	; (800eb7c <atan+0x2e4>)
 800e8ae:	429e      	cmp	r6, r3
 800e8b0:	dc01      	bgt.n	800e8b6 <atan+0x1e>
 800e8b2:	d109      	bne.n	800e8c8 <atan+0x30>
 800e8b4:	b140      	cbz	r0, 800e8c8 <atan+0x30>
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	462b      	mov	r3, r5
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f1 fc55 	bl	800016c <__adddf3>
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	e005      	b.n	800e8d4 <atan+0x3c>
 800e8c8:	f1bb 0f00 	cmp.w	fp, #0
 800e8cc:	4cac      	ldr	r4, [pc, #688]	; (800eb80 <atan+0x2e8>)
 800e8ce:	f300 8121 	bgt.w	800eb14 <atan+0x27c>
 800e8d2:	4dac      	ldr	r5, [pc, #688]	; (800eb84 <atan+0x2ec>)
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	4baa      	ldr	r3, [pc, #680]	; (800eb88 <atan+0x2f0>)
 800e8de:	429e      	cmp	r6, r3
 800e8e0:	dc11      	bgt.n	800e906 <atan+0x6e>
 800e8e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e8e6:	429e      	cmp	r6, r3
 800e8e8:	dc0a      	bgt.n	800e900 <atan+0x68>
 800e8ea:	a38b      	add	r3, pc, #556	; (adr r3, 800eb18 <atan+0x280>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fc3c 	bl	800016c <__adddf3>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	4ba5      	ldr	r3, [pc, #660]	; (800eb8c <atan+0x2f4>)
 800e8f8:	f7f2 f87e 	bl	80009f8 <__aeabi_dcmpgt>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d1e9      	bne.n	800e8d4 <atan+0x3c>
 800e900:	f04f 3aff 	mov.w	sl, #4294967295
 800e904:	e027      	b.n	800e956 <atan+0xbe>
 800e906:	f000 f951 	bl	800ebac <fabs>
 800e90a:	4ba1      	ldr	r3, [pc, #644]	; (800eb90 <atan+0x2f8>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	429e      	cmp	r6, r3
 800e910:	460d      	mov	r5, r1
 800e912:	f300 80b8 	bgt.w	800ea86 <atan+0x1ee>
 800e916:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e91a:	429e      	cmp	r6, r3
 800e91c:	f300 809c 	bgt.w	800ea58 <atan+0x1c0>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	f7f1 fc22 	bl	800016c <__adddf3>
 800e928:	2200      	movs	r2, #0
 800e92a:	4b98      	ldr	r3, [pc, #608]	; (800eb8c <atan+0x2f4>)
 800e92c:	f7f1 fc1c 	bl	8000168 <__aeabi_dsub>
 800e930:	2200      	movs	r2, #0
 800e932:	4606      	mov	r6, r0
 800e934:	460f      	mov	r7, r1
 800e936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e93a:	4620      	mov	r0, r4
 800e93c:	4629      	mov	r1, r5
 800e93e:	f7f1 fc15 	bl	800016c <__adddf3>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	4630      	mov	r0, r6
 800e948:	4639      	mov	r1, r7
 800e94a:	f7f1 feef 	bl	800072c <__aeabi_ddiv>
 800e94e:	f04f 0a00 	mov.w	sl, #0
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	4622      	mov	r2, r4
 800e958:	462b      	mov	r3, r5
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f1 fdbb 	bl	80004d8 <__aeabi_dmul>
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	4680      	mov	r8, r0
 800e968:	4689      	mov	r9, r1
 800e96a:	f7f1 fdb5 	bl	80004d8 <__aeabi_dmul>
 800e96e:	a36c      	add	r3, pc, #432	; (adr r3, 800eb20 <atan+0x288>)
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	4606      	mov	r6, r0
 800e976:	460f      	mov	r7, r1
 800e978:	f7f1 fdae 	bl	80004d8 <__aeabi_dmul>
 800e97c:	a36a      	add	r3, pc, #424	; (adr r3, 800eb28 <atan+0x290>)
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	f7f1 fbf3 	bl	800016c <__adddf3>
 800e986:	4632      	mov	r2, r6
 800e988:	463b      	mov	r3, r7
 800e98a:	f7f1 fda5 	bl	80004d8 <__aeabi_dmul>
 800e98e:	a368      	add	r3, pc, #416	; (adr r3, 800eb30 <atan+0x298>)
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	f7f1 fbea 	bl	800016c <__adddf3>
 800e998:	4632      	mov	r2, r6
 800e99a:	463b      	mov	r3, r7
 800e99c:	f7f1 fd9c 	bl	80004d8 <__aeabi_dmul>
 800e9a0:	a365      	add	r3, pc, #404	; (adr r3, 800eb38 <atan+0x2a0>)
 800e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a6:	f7f1 fbe1 	bl	800016c <__adddf3>
 800e9aa:	4632      	mov	r2, r6
 800e9ac:	463b      	mov	r3, r7
 800e9ae:	f7f1 fd93 	bl	80004d8 <__aeabi_dmul>
 800e9b2:	a363      	add	r3, pc, #396	; (adr r3, 800eb40 <atan+0x2a8>)
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fbd8 	bl	800016c <__adddf3>
 800e9bc:	4632      	mov	r2, r6
 800e9be:	463b      	mov	r3, r7
 800e9c0:	f7f1 fd8a 	bl	80004d8 <__aeabi_dmul>
 800e9c4:	a360      	add	r3, pc, #384	; (adr r3, 800eb48 <atan+0x2b0>)
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	f7f1 fbcf 	bl	800016c <__adddf3>
 800e9ce:	4642      	mov	r2, r8
 800e9d0:	464b      	mov	r3, r9
 800e9d2:	f7f1 fd81 	bl	80004d8 <__aeabi_dmul>
 800e9d6:	a35e      	add	r3, pc, #376	; (adr r3, 800eb50 <atan+0x2b8>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	4680      	mov	r8, r0
 800e9de:	4689      	mov	r9, r1
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	f7f1 fd78 	bl	80004d8 <__aeabi_dmul>
 800e9e8:	a35b      	add	r3, pc, #364	; (adr r3, 800eb58 <atan+0x2c0>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f7f1 fbbb 	bl	8000168 <__aeabi_dsub>
 800e9f2:	4632      	mov	r2, r6
 800e9f4:	463b      	mov	r3, r7
 800e9f6:	f7f1 fd6f 	bl	80004d8 <__aeabi_dmul>
 800e9fa:	a359      	add	r3, pc, #356	; (adr r3, 800eb60 <atan+0x2c8>)
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	f7f1 fbb2 	bl	8000168 <__aeabi_dsub>
 800ea04:	4632      	mov	r2, r6
 800ea06:	463b      	mov	r3, r7
 800ea08:	f7f1 fd66 	bl	80004d8 <__aeabi_dmul>
 800ea0c:	a356      	add	r3, pc, #344	; (adr r3, 800eb68 <atan+0x2d0>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	f7f1 fba9 	bl	8000168 <__aeabi_dsub>
 800ea16:	4632      	mov	r2, r6
 800ea18:	463b      	mov	r3, r7
 800ea1a:	f7f1 fd5d 	bl	80004d8 <__aeabi_dmul>
 800ea1e:	a354      	add	r3, pc, #336	; (adr r3, 800eb70 <atan+0x2d8>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	f7f1 fba0 	bl	8000168 <__aeabi_dsub>
 800ea28:	4632      	mov	r2, r6
 800ea2a:	463b      	mov	r3, r7
 800ea2c:	f7f1 fd54 	bl	80004d8 <__aeabi_dmul>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	f7f1 fb98 	bl	800016c <__adddf3>
 800ea3c:	4622      	mov	r2, r4
 800ea3e:	462b      	mov	r3, r5
 800ea40:	f7f1 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ea44:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ea48:	4602      	mov	r2, r0
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	d144      	bne.n	800ead8 <atan+0x240>
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f1 fb89 	bl	8000168 <__aeabi_dsub>
 800ea56:	e734      	b.n	800e8c2 <atan+0x2a>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	4b4c      	ldr	r3, [pc, #304]	; (800eb8c <atan+0x2f4>)
 800ea5c:	f7f1 fb84 	bl	8000168 <__aeabi_dsub>
 800ea60:	2200      	movs	r2, #0
 800ea62:	4606      	mov	r6, r0
 800ea64:	460f      	mov	r7, r1
 800ea66:	4620      	mov	r0, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4b48      	ldr	r3, [pc, #288]	; (800eb8c <atan+0x2f4>)
 800ea6c:	f7f1 fb7e 	bl	800016c <__adddf3>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4630      	mov	r0, r6
 800ea76:	4639      	mov	r1, r7
 800ea78:	f7f1 fe58 	bl	800072c <__aeabi_ddiv>
 800ea7c:	f04f 0a01 	mov.w	sl, #1
 800ea80:	4604      	mov	r4, r0
 800ea82:	460d      	mov	r5, r1
 800ea84:	e767      	b.n	800e956 <atan+0xbe>
 800ea86:	4b43      	ldr	r3, [pc, #268]	; (800eb94 <atan+0x2fc>)
 800ea88:	429e      	cmp	r6, r3
 800ea8a:	da1a      	bge.n	800eac2 <atan+0x22a>
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	4b42      	ldr	r3, [pc, #264]	; (800eb98 <atan+0x300>)
 800ea90:	f7f1 fb6a 	bl	8000168 <__aeabi_dsub>
 800ea94:	2200      	movs	r2, #0
 800ea96:	4606      	mov	r6, r0
 800ea98:	460f      	mov	r7, r1
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4b3e      	ldr	r3, [pc, #248]	; (800eb98 <atan+0x300>)
 800eaa0:	f7f1 fd1a 	bl	80004d8 <__aeabi_dmul>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4b39      	ldr	r3, [pc, #228]	; (800eb8c <atan+0x2f4>)
 800eaa8:	f7f1 fb60 	bl	800016c <__adddf3>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4630      	mov	r0, r6
 800eab2:	4639      	mov	r1, r7
 800eab4:	f7f1 fe3a 	bl	800072c <__aeabi_ddiv>
 800eab8:	f04f 0a02 	mov.w	sl, #2
 800eabc:	4604      	mov	r4, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	e749      	b.n	800e956 <atan+0xbe>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	2000      	movs	r0, #0
 800eac8:	4934      	ldr	r1, [pc, #208]	; (800eb9c <atan+0x304>)
 800eaca:	f7f1 fe2f 	bl	800072c <__aeabi_ddiv>
 800eace:	f04f 0a03 	mov.w	sl, #3
 800ead2:	4604      	mov	r4, r0
 800ead4:	460d      	mov	r5, r1
 800ead6:	e73e      	b.n	800e956 <atan+0xbe>
 800ead8:	4b31      	ldr	r3, [pc, #196]	; (800eba0 <atan+0x308>)
 800eada:	4e32      	ldr	r6, [pc, #200]	; (800eba4 <atan+0x30c>)
 800eadc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eae0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800eae4:	e9da 2300 	ldrd	r2, r3, [sl]
 800eae8:	f7f1 fb3e 	bl	8000168 <__aeabi_dsub>
 800eaec:	4622      	mov	r2, r4
 800eaee:	462b      	mov	r3, r5
 800eaf0:	f7f1 fb3a 	bl	8000168 <__aeabi_dsub>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eafc:	f7f1 fb34 	bl	8000168 <__aeabi_dsub>
 800eb00:	f1bb 0f00 	cmp.w	fp, #0
 800eb04:	4604      	mov	r4, r0
 800eb06:	460d      	mov	r5, r1
 800eb08:	f6bf aee4 	bge.w	800e8d4 <atan+0x3c>
 800eb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb10:	461d      	mov	r5, r3
 800eb12:	e6df      	b.n	800e8d4 <atan+0x3c>
 800eb14:	4d24      	ldr	r5, [pc, #144]	; (800eba8 <atan+0x310>)
 800eb16:	e6dd      	b.n	800e8d4 <atan+0x3c>
 800eb18:	8800759c 	.word	0x8800759c
 800eb1c:	7e37e43c 	.word	0x7e37e43c
 800eb20:	e322da11 	.word	0xe322da11
 800eb24:	3f90ad3a 	.word	0x3f90ad3a
 800eb28:	24760deb 	.word	0x24760deb
 800eb2c:	3fa97b4b 	.word	0x3fa97b4b
 800eb30:	a0d03d51 	.word	0xa0d03d51
 800eb34:	3fb10d66 	.word	0x3fb10d66
 800eb38:	c54c206e 	.word	0xc54c206e
 800eb3c:	3fb745cd 	.word	0x3fb745cd
 800eb40:	920083ff 	.word	0x920083ff
 800eb44:	3fc24924 	.word	0x3fc24924
 800eb48:	5555550d 	.word	0x5555550d
 800eb4c:	3fd55555 	.word	0x3fd55555
 800eb50:	2c6a6c2f 	.word	0x2c6a6c2f
 800eb54:	bfa2b444 	.word	0xbfa2b444
 800eb58:	52defd9a 	.word	0x52defd9a
 800eb5c:	3fadde2d 	.word	0x3fadde2d
 800eb60:	af749a6d 	.word	0xaf749a6d
 800eb64:	3fb3b0f2 	.word	0x3fb3b0f2
 800eb68:	fe231671 	.word	0xfe231671
 800eb6c:	3fbc71c6 	.word	0x3fbc71c6
 800eb70:	9998ebc4 	.word	0x9998ebc4
 800eb74:	3fc99999 	.word	0x3fc99999
 800eb78:	440fffff 	.word	0x440fffff
 800eb7c:	7ff00000 	.word	0x7ff00000
 800eb80:	54442d18 	.word	0x54442d18
 800eb84:	bff921fb 	.word	0xbff921fb
 800eb88:	3fdbffff 	.word	0x3fdbffff
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	3ff2ffff 	.word	0x3ff2ffff
 800eb94:	40038000 	.word	0x40038000
 800eb98:	3ff80000 	.word	0x3ff80000
 800eb9c:	bff00000 	.word	0xbff00000
 800eba0:	0800f1f8 	.word	0x0800f1f8
 800eba4:	0800f1d8 	.word	0x0800f1d8
 800eba8:	3ff921fb 	.word	0x3ff921fb

0800ebac <fabs>:
 800ebac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ebb0:	4770      	bx	lr

0800ebb2 <finite>:
 800ebb2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ebb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ebba:	0fc0      	lsrs	r0, r0, #31
 800ebbc:	4770      	bx	lr
	...

0800ebc0 <scalbn>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460d      	mov	r5, r1
 800ebca:	4617      	mov	r7, r2
 800ebcc:	460b      	mov	r3, r1
 800ebce:	b996      	cbnz	r6, 800ebf6 <scalbn+0x36>
 800ebd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebd4:	4303      	orrs	r3, r0
 800ebd6:	d039      	beq.n	800ec4c <scalbn+0x8c>
 800ebd8:	4b33      	ldr	r3, [pc, #204]	; (800eca8 <scalbn+0xe8>)
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f7f1 fc7c 	bl	80004d8 <__aeabi_dmul>
 800ebe0:	4b32      	ldr	r3, [pc, #200]	; (800ecac <scalbn+0xec>)
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	429f      	cmp	r7, r3
 800ebe6:	460d      	mov	r5, r1
 800ebe8:	da0f      	bge.n	800ec0a <scalbn+0x4a>
 800ebea:	a32b      	add	r3, pc, #172	; (adr r3, 800ec98 <scalbn+0xd8>)
 800ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf0:	f7f1 fc72 	bl	80004d8 <__aeabi_dmul>
 800ebf4:	e006      	b.n	800ec04 <scalbn+0x44>
 800ebf6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ebfa:	4296      	cmp	r6, r2
 800ebfc:	d10a      	bne.n	800ec14 <scalbn+0x54>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	f7f1 fab4 	bl	800016c <__adddf3>
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
 800ec08:	e020      	b.n	800ec4c <scalbn+0x8c>
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ec10:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ec14:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ec18:	19b9      	adds	r1, r7, r6
 800ec1a:	4291      	cmp	r1, r2
 800ec1c:	dd0e      	ble.n	800ec3c <scalbn+0x7c>
 800ec1e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ec22:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ec26:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ec2a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ec2e:	4820      	ldr	r0, [pc, #128]	; (800ecb0 <scalbn+0xf0>)
 800ec30:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ec34:	a31a      	add	r3, pc, #104	; (adr r3, 800eca0 <scalbn+0xe0>)
 800ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3a:	e7d9      	b.n	800ebf0 <scalbn+0x30>
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	dd08      	ble.n	800ec52 <scalbn+0x92>
 800ec40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec48:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec52:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ec56:	da12      	bge.n	800ec7e <scalbn+0xbe>
 800ec58:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ec5c:	429f      	cmp	r7, r3
 800ec5e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ec62:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ec66:	dcdc      	bgt.n	800ec22 <scalbn+0x62>
 800ec68:	a30b      	add	r3, pc, #44	; (adr r3, 800ec98 <scalbn+0xd8>)
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ec72:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ec76:	480f      	ldr	r0, [pc, #60]	; (800ecb4 <scalbn+0xf4>)
 800ec78:	f041 011f 	orr.w	r1, r1, #31
 800ec7c:	e7b8      	b.n	800ebf0 <scalbn+0x30>
 800ec7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec82:	3136      	adds	r1, #54	; 0x36
 800ec84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	4629      	mov	r1, r5
 800ec90:	2200      	movs	r2, #0
 800ec92:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <scalbn+0xf8>)
 800ec94:	e7ac      	b.n	800ebf0 <scalbn+0x30>
 800ec96:	bf00      	nop
 800ec98:	c2f8f359 	.word	0xc2f8f359
 800ec9c:	01a56e1f 	.word	0x01a56e1f
 800eca0:	8800759c 	.word	0x8800759c
 800eca4:	7e37e43c 	.word	0x7e37e43c
 800eca8:	43500000 	.word	0x43500000
 800ecac:	ffff3cb0 	.word	0xffff3cb0
 800ecb0:	8800759c 	.word	0x8800759c
 800ecb4:	c2f8f359 	.word	0xc2f8f359
 800ecb8:	3c900000 	.word	0x3c900000

0800ecbc <_init>:
 800ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbe:	bf00      	nop
 800ecc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecc2:	bc08      	pop	{r3}
 800ecc4:	469e      	mov	lr, r3
 800ecc6:	4770      	bx	lr

0800ecc8 <_fini>:
 800ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecca:	bf00      	nop
 800eccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecce:	bc08      	pop	{r3}
 800ecd0:	469e      	mov	lr, r3
 800ecd2:	4770      	bx	lr
